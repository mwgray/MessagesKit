/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import <Thrift/TProtocol.h>
#import <Thrift/TProtocolFactory.h>
#import <Thrift/TApplicationError.h>
#import <Thrift/TProtocolError.h>
#import <Thrift/TProtocolUtil.h>
#import <Thrift/TProcessor.h>
#import <Thrift/TBase.h>
#import <Thrift/TAsyncTransport.h>
#import <Thrift/TBaseClient.h>

#import <PromiseKit/PromiseKit.h>

typedef NS_ENUM(SInt32, AliasType) {
  AliasTypeEMailAddress = 0,
  AliasTypePhoneNumber = 1
};

typedef NS_ENUM(SInt32, UserStatus) {
  UserStatusOnline = 0,
  UserStatusOffline = 1,
  UserStatusTyping = 2,
  UserStatusPhotographing = 3,
  UserStatusRecordingVideo = 4,
  UserStatusRecordingAudio = 5,
  UserStatusLocating = 6,
  UserStatusSelectingContact = 7,
  UserStatusNoStatus = 8
};

typedef NS_ENUM(SInt32, MsgType) {
  MsgTypeText = 0,
  MsgTypeImage = 1,
  MsgTypeAudio = 2,
  MsgTypeVideo = 3,
  MsgTypeLocation = 4,
  MsgTypeContact = 5,
  MsgTypeView = 6,
  MsgTypeEnter = 7,
  MsgTypeExit = 8,
  MsgTypeClarify = 9,
  MsgTypeDelete = 10,
  MsgTypeConference = 11,
  MsgTypeFile = 12,
  MsgTypeAuthorize = 13,
  MsgTypeKeySet = 14
};

typedef NS_ENUM(SInt32, EncryptionType) {
  EncryptionTypeVer1_AES256_CBC = 0
};

typedef NS_ENUM(SInt32, SignatureType) {
  SignatureTypeVer1_SHA256_PSS32 = 0,
  SignatureTypeVer2_SHA256_PKCS1 = 1
};

typedef NS_ENUM(SInt32, NotificationType) {
  NotificationTypeMessage = 0,
  NotificationTypeInformation = 1
};

typedef NS_ENUM(SInt32, DeviceServiceOp) {
  DeviceServiceOpUserStatus = 0,
  DeviceServiceOpGroupStatus = 1,
  DeviceServiceOpMsgDelivery = 2,
  DeviceServiceOpMsgReady = 3,
  DeviceServiceOpMsgDelivered = 4,
  DeviceServiceOpMsgDirect = 5
};

typedef NS_ENUM(SInt32, ConferenceStatus) {
  ConferenceStatusWaiting = 0,
  ConferenceStatusInProgress = 1,
  ConferenceStatusCompleted = 2,
  ConferenceStatusMissed = 3
};

typedef NSArray<NSData *> * DataList;

typedef NSMutableArray<NSData *> * MutableDataList;

@class Id;
typedef NSArray<Id *> * IdList;

typedef NSMutableArray<Id *> * MutableIdList;

typedef SInt64 TimeStamp;

typedef NSString * Alias;

typedef NSSet<Alias> * AliasSet;

typedef NSMutableSet<Alias> * MutableAliasSet;

@class Envelope;
typedef NSArray<Envelope *> * EnvelopeList;

typedef NSMutableArray<Envelope *> * MutableEnvelopeList;

@class DirectEnvelope;
typedef NSArray<DirectEnvelope *> * DirectEnvelopeList;

typedef NSMutableArray<DirectEnvelope *> * MutableDirectEnvelopeList;

@interface Id : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) NSData * data;
@property (assign, nonatomic) BOOL dataIsSet;
- (void) unsetData;


- (instancetype) initWithData: (NSData *) data;

@end

@interface Group : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) Id * chat;
@property (assign, nonatomic) BOOL chatIsSet;
- (void) unsetChat;

@property (strong, nonatomic) MutableAliasSet members;
@property (assign, nonatomic) BOOL membersIsSet;
- (void) unsetMembers;


- (instancetype) initWithChat: (Id *) chat members: (AliasSet) members;

@end

@interface Msg : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) Id * id;
@property (assign, nonatomic) BOOL idIsSet;
- (void) unsetId;

@property (assign, nonatomic) MsgType type;
@property (assign, nonatomic) BOOL typeIsSet;
- (void) unsetType;

@property (strong, nonatomic) Alias sender;
@property (assign, nonatomic) BOOL senderIsSet;
- (void) unsetSender;

@property (strong, nonatomic) Alias recipient;
@property (assign, nonatomic) BOOL recipientIsSet;
- (void) unsetRecipient;

@property (strong, nonatomic) Group * group;
@property (assign, nonatomic) BOOL groupIsSet;
- (void) unsetGroup;

@property (strong, nonatomic) NSData * key;
@property (assign, nonatomic) BOOL keyIsSet;
- (void) unsetKey;

@property (strong, nonatomic) NSData * signature;
@property (assign, nonatomic) BOOL signatureIsSet;
- (void) unsetSignature;

@property (strong, nonatomic) NSData * data;
@property (assign, nonatomic) BOOL dataIsSet;
- (void) unsetData;

@property (strong, nonatomic) NSMutableDictionary<NSString *, NSString *> * metaData;
@property (assign, nonatomic) BOOL metaDataIsSet;
- (void) unsetMetaData;

@property (assign, nonatomic) TimeStamp sent;
@property (assign, nonatomic) BOOL sentIsSet;
- (void) unsetSent;

@property (assign, nonatomic) SInt8 flags;
@property (assign, nonatomic) BOOL flagsIsSet;
- (void) unsetFlags;


- (instancetype) initWithId: (Id *) id type: (MsgType) type sender: (Alias) sender recipient: (Alias) recipient group: (Group *) group key: (NSData *) key signature: (NSData *) signature data: (NSData *) data metaData: (NSDictionary<NSString *, NSString *> *) metaData sent: (TimeStamp) sent flags: (SInt8) flags;

@end

@interface Envelope : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) Alias recipient;
@property (assign, nonatomic) BOOL recipientIsSet;
- (void) unsetRecipient;

@property (strong, nonatomic) NSData * key;
@property (assign, nonatomic) BOOL keyIsSet;
- (void) unsetKey;

@property (strong, nonatomic) NSData * signature;
@property (assign, nonatomic) BOOL signatureIsSet;
- (void) unsetSignature;

@property (strong, nonatomic) NSData * fingerprint;
@property (assign, nonatomic) BOOL fingerprintIsSet;
- (void) unsetFingerprint;


- (instancetype) initWithRecipient: (Alias) recipient key: (NSData *) key signature: (NSData *) signature fingerprint: (NSData *) fingerprint;

@end

@interface DirectMsg : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) Id * id;
@property (assign, nonatomic) BOOL idIsSet;
- (void) unsetId;

@property (strong, nonatomic) NSString * type;
@property (assign, nonatomic) BOOL typeIsSet;
- (void) unsetType;

@property (strong, nonatomic) Alias sender;
@property (assign, nonatomic) BOOL senderIsSet;
- (void) unsetSender;

@property (strong, nonatomic) Id * senderDevice;
@property (assign, nonatomic) BOOL senderDeviceIsSet;
- (void) unsetSenderDevice;

@property (strong, nonatomic) NSData * key;
@property (assign, nonatomic) BOOL keyIsSet;
- (void) unsetKey;

@property (strong, nonatomic) NSData * signature;
@property (assign, nonatomic) BOOL signatureIsSet;
- (void) unsetSignature;

@property (strong, nonatomic) NSData * data;
@property (assign, nonatomic) BOOL dataIsSet;
- (void) unsetData;


- (instancetype) initWithId: (Id *) id type: (NSString *) type sender: (Alias) sender senderDevice: (Id *) senderDevice key: (NSData *) key signature: (NSData *) signature data: (NSData *) data;

@end

@interface DirectEnvelope : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) Alias recipient;
@property (assign, nonatomic) BOOL recipientIsSet;
- (void) unsetRecipient;

@property (strong, nonatomic) Id * device;
@property (assign, nonatomic) BOOL deviceIsSet;
- (void) unsetDevice;

@property (strong, nonatomic) NSData * key;
@property (assign, nonatomic) BOOL keyIsSet;
- (void) unsetKey;

@property (strong, nonatomic) NSData * signature;
@property (assign, nonatomic) BOOL signatureIsSet;
- (void) unsetSignature;

@property (strong, nonatomic) NSData * fingerprint;
@property (assign, nonatomic) BOOL fingerprintIsSet;
- (void) unsetFingerprint;


- (instancetype) initWithRecipient: (Alias) recipient device: (Id *) device key: (NSData *) key signature: (NSData *) signature fingerprint: (NSData *) fingerprint;

@end

@interface MsgPack : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) Id * id;
@property (assign, nonatomic) BOOL idIsSet;
- (void) unsetId;

@property (assign, nonatomic) MsgType type;
@property (assign, nonatomic) BOOL typeIsSet;
- (void) unsetType;

@property (strong, nonatomic) Alias sender;
@property (assign, nonatomic) BOOL senderIsSet;
- (void) unsetSender;

@property (strong, nonatomic) MutableEnvelopeList envelopes;
@property (assign, nonatomic) BOOL envelopesIsSet;
- (void) unsetEnvelopes;

@property (strong, nonatomic) Id * chat;
@property (assign, nonatomic) BOOL chatIsSet;
- (void) unsetChat;

@property (strong, nonatomic) NSMutableDictionary<NSString *, NSString *> * metaData;
@property (assign, nonatomic) BOOL metaDataIsSet;
- (void) unsetMetaData;

@property (strong, nonatomic) NSData * data;
@property (assign, nonatomic) BOOL dataIsSet;
- (void) unsetData;


- (instancetype) initWithId: (Id *) id type: (MsgType) type sender: (Alias) sender envelopes: (EnvelopeList) envelopes chat: (Id *) chat metaData: (NSDictionary<NSString *, NSString *> *) metaData data: (NSData *) data;

@end

@interface MsgHdr : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) Id * id;
@property (assign, nonatomic) BOOL idIsSet;
- (void) unsetId;

@property (assign, nonatomic) MsgType type;
@property (assign, nonatomic) BOOL typeIsSet;
- (void) unsetType;

@property (assign, nonatomic) SInt32 dataLength;
@property (assign, nonatomic) BOOL dataLengthIsSet;
- (void) unsetDataLength;


- (instancetype) initWithId: (Id *) id type: (MsgType) type dataLength: (SInt32) dataLength;

@end

@interface DeviceInfo : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) Id * id;
@property (assign, nonatomic) BOOL idIsSet;
- (void) unsetId;

@property (strong, nonatomic) NSString * name;
@property (assign, nonatomic) BOOL nameIsSet;
- (void) unsetName;

@property (strong, nonatomic) NSString * manufacturer;
@property (assign, nonatomic) BOOL manufacturerIsSet;
- (void) unsetManufacturer;

@property (strong, nonatomic) NSString * model;
@property (assign, nonatomic) BOOL modelIsSet;
- (void) unsetModel;

@property (strong, nonatomic) NSString * version;
@property (assign, nonatomic) BOOL versionIsSet;
- (void) unsetVersion;

@property (strong, nonatomic) NSString * osVersion;
@property (assign, nonatomic) BOOL osVersionIsSet;
- (void) unsetOsVersion;

@property (strong, nonatomic) MutableAliasSet activeAliases;
@property (assign, nonatomic) BOOL activeAliasesIsSet;
- (void) unsetActiveAliases;


- (instancetype) initWithId: (Id *) id name: (NSString *) name manufacturer: (NSString *) manufacturer model: (NSString *) model version: (NSString *) version osVersion: (NSString *) osVersion activeAliases: (AliasSet) activeAliases;

@end

@interface Image : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) NSString * mimeType;
@property (assign, nonatomic) BOOL mimeTypeIsSet;
- (void) unsetMimeType;

@property (strong, nonatomic) NSData * data;
@property (assign, nonatomic) BOOL dataIsSet;
- (void) unsetData;


- (instancetype) initWithMimeType: (NSString *) mimeType data: (NSData *) data;

@end

@interface UserInfo : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) Id * id;
@property (assign, nonatomic) BOOL idIsSet;
- (void) unsetId;

@property (strong, nonatomic) MutableAliasSet aliases;
@property (assign, nonatomic) BOOL aliasesIsSet;
- (void) unsetAliases;

@property (strong, nonatomic) NSData * encryptionCert;
@property (assign, nonatomic) BOOL encryptionCertIsSet;
- (void) unsetEncryptionCert;

@property (strong, nonatomic) NSData * signingCert;
@property (assign, nonatomic) BOOL signingCertIsSet;
- (void) unsetSigningCert;

@property (strong, nonatomic) Image * avatar;
@property (assign, nonatomic) BOOL avatarIsSet;
- (void) unsetAvatar;


- (instancetype) initWithId: (Id *) id aliases: (AliasSet) aliases encryptionCert: (NSData *) encryptionCert signingCert: (NSData *) signingCert avatar: (Image *) avatar;

@end

@interface UserProfile : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) Id * id;
@property (assign, nonatomic) BOOL idIsSet;
- (void) unsetId;

@property (strong, nonatomic) MutableAliasSet aliases;
@property (assign, nonatomic) BOOL aliasesIsSet;
- (void) unsetAliases;

@property (strong, nonatomic) NSData * encryptionCert;
@property (assign, nonatomic) BOOL encryptionCertIsSet;
- (void) unsetEncryptionCert;

@property (strong, nonatomic) NSData * signingCert;
@property (assign, nonatomic) BOOL signingCertIsSet;
- (void) unsetSigningCert;

@property (strong, nonatomic) NSMutableArray<DeviceInfo *> * devices;
@property (assign, nonatomic) BOOL devicesIsSet;
- (void) unsetDevices;

@property (strong, nonatomic) Image * avatar;
@property (assign, nonatomic) BOOL avatarIsSet;
- (void) unsetAvatar;


- (instancetype) initWithId: (Id *) id aliases: (AliasSet) aliases encryptionCert: (NSData *) encryptionCert signingCert: (NSData *) signingCert devices: (NSArray<DeviceInfo *> *) devices avatar: (Image *) avatar;

@end

enum {
  MessagesErrorInvalidUser = -60000
};

@interface InvalidUser : NSError <TBase, NSCoding, NSCopying> 



@end

enum {
  MessagesErrorInvalidDevice = -60001
};

@interface InvalidDevice : NSError <TBase, NSCoding, NSCopying> 



@end

enum {
  MessagesErrorInvalidSender = -60002
};

@interface InvalidSender : NSError <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) Alias offender;
@property (assign, nonatomic) BOOL offenderIsSet;
- (void) unsetOffender;


- (instancetype) initWithOffender: (Alias) offender;

@end

enum {
  MessagesErrorInvalidRecipient = -60003
};

@interface InvalidRecipient : NSError <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) Alias offender;
@property (assign, nonatomic) BOOL offenderIsSet;
- (void) unsetOffender;


- (instancetype) initWithOffender: (Alias) offender;

@end

enum {
  MessagesErrorInvalidAlias = -60004
};

@interface InvalidAlias : NSError <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) Alias offender;
@property (assign, nonatomic) BOOL offenderIsSet;
- (void) unsetOffender;


- (instancetype) initWithOffender: (Alias) offender;

@end

enum {
  MessagesErrorInvalidCredentials = -60005
};

@interface InvalidCredentials : NSError <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) Alias recipient;
@property (assign, nonatomic) BOOL recipientIsSet;
- (void) unsetRecipient;


- (instancetype) initWithRecipient: (Alias) recipient;

@end

enum {
  MessagesErrorDeviceInUse = -60006
};

@interface DeviceInUse : NSError <TBase, NSCoding, NSCopying> 



@end

enum {
  MessagesErrorMessageUndeliverable = -60007
};

@interface MessageUndeliverable : NSError <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) NSString * reason;
@property (assign, nonatomic) BOOL reasonIsSet;
- (void) unsetReason;


- (instancetype) initWithReason: (NSString *) reason;

@end

@interface AuthenticatedAlias : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) NSString * name;
@property (assign, nonatomic) BOOL nameIsSet;
- (void) unsetName;

@property (strong, nonatomic) NSString * pin;
@property (assign, nonatomic) BOOL pinIsSet;
- (void) unsetPin;


- (instancetype) initWithName: (NSString *) name pin: (NSString *) pin;

@end

enum {
  MessagesErrorAliasInUse = -60008
};

@interface AliasInUse : NSError <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) Alias problemAlias;
@property (assign, nonatomic) BOOL problemAliasIsSet;
- (void) unsetProblemAlias;


- (instancetype) initWithProblemAlias: (Alias) problemAlias;

@end

enum {
  MessagesErrorAliasPinInvalid = -60009
};

@interface AliasPinInvalid : NSError <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) Alias problemAlias;
@property (assign, nonatomic) BOOL problemAliasIsSet;
- (void) unsetProblemAlias;


- (instancetype) initWithProblemAlias: (Alias) problemAlias;

@end

enum {
  MessagesErrorAliasNotAuthenticated = -60010
};

@interface AliasNotAuthenticated : NSError <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) Alias problemAlias;
@property (assign, nonatomic) BOOL problemAliasIsSet;
- (void) unsetProblemAlias;


- (instancetype) initWithProblemAlias: (Alias) problemAlias;

@end

enum {
  MessagesErrorUnableToAuthenticate = -60011
};

@interface UnableToAuthenticate : NSError <TBase, NSCoding, NSCopying> 



@end

enum {
  MessagesErrorSignInDisallowed = -60012
};

@interface SignInDisallowed : NSError <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) NSString * message;
@property (assign, nonatomic) BOOL messageIsSet;
- (void) unsetMessage;


- (instancetype) initWithMessage: (NSString *) message;

@end

@interface Invite : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) NSString * bodyText;
@property (assign, nonatomic) BOOL bodyTextIsSet;
- (void) unsetBodyText;

@property (strong, nonatomic) NSString * bodyHtml;
@property (assign, nonatomic) BOOL bodyHtmlIsSet;
- (void) unsetBodyHtml;

@property (strong, nonatomic) NSString * subject;
@property (assign, nonatomic) BOOL subjectIsSet;
- (void) unsetSubject;


- (instancetype) initWithBodyText: (NSString *) bodyText bodyHtml: (NSString *) bodyHtml subject: (NSString *) subject;

@end

enum {
  MessagesErrorAliasAlreadyInvited = -60013
};

@interface AliasAlreadyInvited : NSError <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) NSString * problemAlias;
@property (assign, nonatomic) BOOL problemAliasIsSet;
- (void) unsetProblemAlias;


- (instancetype) initWithProblemAlias: (NSString *) problemAlias;

@end

@interface CertificateSet : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) NSData * encryptionCert;
@property (assign, nonatomic) BOOL encryptionCertIsSet;
- (void) unsetEncryptionCert;

@property (strong, nonatomic) NSData * signingCert;
@property (assign, nonatomic) BOOL signingCertIsSet;
- (void) unsetSigningCert;


- (instancetype) initWithEncryptionCert: (NSData *) encryptionCert signingCert: (NSData *) signingCert;

@end

@interface Location : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) NSString * title;
@property (assign, nonatomic) BOOL titleIsSet;
- (void) unsetTitle;

@property (assign, nonatomic) double longitude;
@property (assign, nonatomic) BOOL longitudeIsSet;
- (void) unsetLongitude;

@property (assign, nonatomic) double latitude;
@property (assign, nonatomic) BOOL latitudeIsSet;
- (void) unsetLatitude;


- (instancetype) initWithTitle: (NSString *) title longitude: (double) longitude latitude: (double) latitude;

@end

@interface Conference : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) Id * callingDeviceId;
@property (assign, nonatomic) BOOL callingDeviceIdIsSet;
- (void) unsetCallingDeviceId;

@property (assign, nonatomic) ConferenceStatus status;
@property (assign, nonatomic) BOOL statusIsSet;
- (void) unsetStatus;

@property (strong, nonatomic) NSString * message;
@property (assign, nonatomic) BOOL messageIsSet;
- (void) unsetMessage;


- (instancetype) initWithCallingDeviceId: (Id *) callingDeviceId status: (ConferenceStatus) status message: (NSString *) message;

@end

@interface AuthorizeRequest : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) Id * deviceId;
@property (assign, nonatomic) BOOL deviceIdIsSet;
- (void) unsetDeviceId;

@property (strong, nonatomic) NSString * deviceName;
@property (assign, nonatomic) BOOL deviceNameIsSet;
- (void) unsetDeviceName;

@property (strong, nonatomic) NSData * deviceEncryptionCert;
@property (assign, nonatomic) BOOL deviceEncryptionCertIsSet;
- (void) unsetDeviceEncryptionCert;

@property (strong, nonatomic) NSData * deviceSigningCert;
@property (assign, nonatomic) BOOL deviceSigningCertIsSet;
- (void) unsetDeviceSigningCert;

@property (strong, nonatomic) NSString * requestor;
@property (assign, nonatomic) BOOL requestorIsSet;
- (void) unsetRequestor;


- (instancetype) initWithDeviceId: (Id *) deviceId deviceName: (NSString *) deviceName deviceEncryptionCert: (NSData *) deviceEncryptionCert deviceSigningCert: (NSData *) deviceSigningCert requestor: (NSString *) requestor;

@end

@interface KeySet : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) NSData * encryptionKeyPair;
@property (assign, nonatomic) BOOL encryptionKeyPairIsSet;
- (void) unsetEncryptionKeyPair;

@property (strong, nonatomic) NSData * signingKeyPair;
@property (assign, nonatomic) BOOL signingKeyPairIsSet;
- (void) unsetSigningKeyPair;


- (instancetype) initWithEncryptionKeyPair: (NSData *) encryptionKeyPair signingKeyPair: (NSData *) signingKeyPair;

@end

@protocol UserAPI <NSObject>
- (BOOL) registerNotifications: (NotificationType) type platform: (NSString *) platform token: (NSData *) token error: (NSError *__autoreleasing *)__thriftError;  // throws TException
- (CertificateSet *) updateCertificates: (NSData *) encryptionCSR signingCSR: (NSData *) signingCSR error: (NSError *__autoreleasing *)__thriftError;  // throws TException
- (BOOL) updateAvatar: (Image *) avatar error: (NSError *__autoreleasing *)__thriftError;  // throws TException
- (AliasSet) listAliases: (NSError *__autoreleasing *)__thriftError;  // throws TException
- (BOOL) registerAlias: (AuthenticatedAlias *) authenticatedAlias error: (NSError *__autoreleasing *)__thriftError;  // throws AliasInUse *, AliasPinInvalid *, AliasNotAuthenticated *, TException
- (BOOL) unregisterAlias: (Alias) name error: (NSError *__autoreleasing *)__thriftError;  // throws TException
- (NSArray<DeviceInfo *> *) listDevices: (NSError *__autoreleasing *)__thriftError;  // throws TException
- (BOOL) updateDeviceActiveAliases: (Id *) deviceId activeAliases: (AliasSet) activeAliases error: (NSError *__autoreleasing *)__thriftError;  // throws TException
- (NSArray<MsgHdr *> *) fetchWaiting: (NSError *__autoreleasing *)__thriftError;  // throws TException
- (Msg *) fetch: (Id *) msgId error: (NSError *__autoreleasing *)__thriftError;  // throws TException
- (BOOL) ack: (Id *) msgId sent: (TimeStamp) sent error: (NSError *__autoreleasing *)__thriftError;  // throws TException
- (NSNumber *) send: (MsgPack *) msgPack error: (NSError *__autoreleasing *)__thriftError;  // throws InvalidSender *, InvalidRecipient *, InvalidCredentials *, TException
- (BOOL) sendUserStatus: (Alias) sender recipient: (Alias) recipient status: (UserStatus) status error: (NSError *__autoreleasing *)__thriftError;  // throws TException
- (BOOL) sendGroupStatus: (Alias) sender group: (Group *) group status: (UserStatus) status error: (NSError *__autoreleasing *)__thriftError;  // throws TException
- (BOOL) sendDirect: (Id *) msgId msgType: (NSString *) msgType msgData: (NSData *) msgData sender: (NSString *) sender envelopes: (DirectEnvelopeList) envelopes error: (NSError *__autoreleasing *)__thriftError;  // throws InvalidSender *, InvalidRecipient *, InvalidCredentials *, TException
- (AliasSet) updateConnections: (NSSet<NSData *> *) newPeers oldPeers: (NSSet<NSData *> *) oldPeers error: (NSError *__autoreleasing *)__thriftError;  // throws TException
- (BOOL) clearConnections: (NSError *__autoreleasing *)__thriftError;  // throws TException
- (Invite *) generateInvite: (NSString *) inviteeAlias inviteeName: (NSString *) inviteeName params: (NSDictionary<NSString *, NSString *> *) params error: (NSError *__autoreleasing *)__thriftError;  // throws AliasInUse *, AliasAlreadyInvited *, InvalidAlias *, TException
@end

@interface UserAPIClient : TBaseClient <UserAPI> 
- (id) initWithProtocol: (id <TProtocol>) protocol;
- (id) initWithInProtocol: (id <TProtocol>) inProtocol outProtocol: (id <TProtocol>) outProtocol;
@end

@interface UserAPIProcessor : NSObject <TProcessor> 
- (id) initWithUserAPI: (id <UserAPI>) service;
- (id<UserAPI>) service;
@end

@protocol UserAPIAsync <NSObject>
- (void) registerNotifications: (NotificationType) type platform: (NSString *) platform token: (NSData *) token response: (void (^)()) responseBlock failure : (TAsyncFailureBlock) failureBlock;
- (AnyPromise *) registerNotifications: (NotificationType) type platform: (NSString *) platform token: (NSData *) token;
- (void) updateCertificates: (NSData *) encryptionCSR signingCSR: (NSData *) signingCSR response: (void (^)(CertificateSet *)) responseBlock failure : (TAsyncFailureBlock) failureBlock;
- (AnyPromise *) updateCertificates: (NSData *) encryptionCSR signingCSR: (NSData *) signingCSR;
- (void) updateAvatar: (Image *) avatar response: (void (^)()) responseBlock failure : (TAsyncFailureBlock) failureBlock;
- (AnyPromise *) updateAvatar: (Image *) avatar;
- (void) listAliases: (void (^)(AliasSet)) responseBlock failure : (TAsyncFailureBlock) failureBlock;
- (AnyPromise *) listAliases;
- (void) registerAlias: (AuthenticatedAlias *) authenticatedAlias response: (void (^)()) responseBlock failure : (TAsyncFailureBlock) failureBlock;
- (AnyPromise *) registerAlias: (AuthenticatedAlias *) authenticatedAlias;
- (void) unregisterAlias: (Alias) name response: (void (^)()) responseBlock failure : (TAsyncFailureBlock) failureBlock;
- (AnyPromise *) unregisterAlias: (Alias) name;
- (void) listDevices: (void (^)(NSArray<DeviceInfo *> *)) responseBlock failure : (TAsyncFailureBlock) failureBlock;
- (AnyPromise *) listDevices;
- (void) updateDeviceActiveAliases: (Id *) deviceId activeAliases: (AliasSet) activeAliases response: (void (^)()) responseBlock failure : (TAsyncFailureBlock) failureBlock;
- (AnyPromise *) updateDeviceActiveAliases: (Id *) deviceId activeAliases: (AliasSet) activeAliases;
- (void) fetchWaiting: (void (^)(NSArray<MsgHdr *> *)) responseBlock failure : (TAsyncFailureBlock) failureBlock;
- (AnyPromise *) fetchWaiting;
- (void) fetch: (Id *) msgId response: (void (^)(Msg *)) responseBlock failure : (TAsyncFailureBlock) failureBlock;
- (AnyPromise *) fetch: (Id *) msgId;
- (void) ack: (Id *) msgId sent: (TimeStamp) sent response: (void (^)()) responseBlock failure : (TAsyncFailureBlock) failureBlock;
- (AnyPromise *) ack: (Id *) msgId sent: (TimeStamp) sent;
- (void) send: (MsgPack *) msgPack response: (void (^)(TimeStamp)) responseBlock failure : (TAsyncFailureBlock) failureBlock;
- (AnyPromise *) send: (MsgPack *) msgPack;
- (void) sendUserStatus: (Alias) sender recipient: (Alias) recipient status: (UserStatus) status response: (void (^)()) responseBlock failure : (TAsyncFailureBlock) failureBlock;
- (AnyPromise *) sendUserStatus: (Alias) sender recipient: (Alias) recipient status: (UserStatus) status;
- (void) sendGroupStatus: (Alias) sender group: (Group *) group status: (UserStatus) status response: (void (^)()) responseBlock failure : (TAsyncFailureBlock) failureBlock;
- (AnyPromise *) sendGroupStatus: (Alias) sender group: (Group *) group status: (UserStatus) status;
- (void) sendDirect: (Id *) msgId msgType: (NSString *) msgType msgData: (NSData *) msgData sender: (NSString *) sender envelopes: (DirectEnvelopeList) envelopes response: (void (^)()) responseBlock failure : (TAsyncFailureBlock) failureBlock;
- (AnyPromise *) sendDirect: (Id *) msgId msgType: (NSString *) msgType msgData: (NSData *) msgData sender: (NSString *) sender envelopes: (DirectEnvelopeList) envelopes;
- (void) updateConnections: (NSSet<NSData *> *) newPeers oldPeers: (NSSet<NSData *> *) oldPeers response: (void (^)(AliasSet)) responseBlock failure : (TAsyncFailureBlock) failureBlock;
- (AnyPromise *) updateConnections: (NSSet<NSData *> *) newPeers oldPeers: (NSSet<NSData *> *) oldPeers;
- (void) clearConnections: (void (^)()) responseBlock failure : (TAsyncFailureBlock) failureBlock;
- (AnyPromise *) clearConnections;
- (void) generateInvite: (NSString *) inviteeAlias inviteeName: (NSString *) inviteeName params: (NSDictionary<NSString *, NSString *> *) params response: (void (^)(Invite *)) responseBlock failure : (TAsyncFailureBlock) failureBlock;
- (AnyPromise *) generateInvite: (NSString *) inviteeAlias inviteeName: (NSString *) inviteeName params: (NSDictionary<NSString *, NSString *> *) params;
@end

@interface UserAPIClientAsync : TBaseClient <UserAPIAsync> 

- (id) initWithProtocolFactory: (id <TProtocolFactory>) protocolFactory transportFactory: (id <TAsyncTransportFactory>) transportFactory;
@end

@protocol PublicAPI <NSObject>
- (UserInfo *) findUserWithAlias: (Alias) name error: (NSError *__autoreleasing *)__thriftError;  // throws TException
- (UserInfo *) findUserWithId: (Id *) userId error: (NSError *__autoreleasing *)__thriftError;  // throws TException
- (BOOL) requestAliasAuthentication: (Alias) name error: (NSError *__autoreleasing *)__thriftError;  // throws AliasInUse *, UnableToAuthenticate *, TException
- (NSNumber *) checkAliasAuthentication: (Alias) name pin: (NSString *) pin error: (NSError *__autoreleasing *)__thriftError;  // throws AliasNotAuthenticated *, TException
- (UserProfile *) findProfileWithId: (Id *) userId password: (NSString *) password error: (NSError *__autoreleasing *)__thriftError;  // throws TException
- (UserProfile *) findProfileWithAlias: (NSString *) userAlias password: (NSString *) password error: (NSError *__autoreleasing *)__thriftError;  // throws TException
- (UserProfile *) registerUser: (NSString *) password encryptionCSR: (NSData *) encryptionCSR signingCSR: (NSData *) signingCSR authenticatedAliases: (NSArray<AuthenticatedAlias *> *) authenticatedAliases deviceInfo: (DeviceInfo *) deviceInfo error: (NSError *__autoreleasing *)__thriftError;  // throws AliasInUse *, AliasNotAuthenticated *, AliasPinInvalid *, DeviceInUse *, TException
- (NSData *) signIn: (Id *) userId password: (NSString *) password deviceId: (Id *) deviceId error: (NSError *__autoreleasing *)__thriftError;  // throws InvalidDevice *, SignInDisallowed *, TException
- (NSString *) generateAccessToken: (Id *) userId deviceId: (Id *) deviceId refreshToken: (NSData *) refreshToken error: (NSError *__autoreleasing *)__thriftError;  // throws InvalidUser *, InvalidDevice *, TException
- (BOOL) registerDevice: (Id *) userId password: (NSString *) password deviceInfo: (DeviceInfo *) deviceInfo error: (NSError *__autoreleasing *)__thriftError;  // throws DeviceInUse *, TException
- (BOOL) replaceRegisteredDevice: (Id *) userId password: (NSString *) password deviceInfo: (DeviceInfo *) deviceInfo currentDeviceId: (Id *) currentDeviceId error: (NSError *__autoreleasing *)__thriftError;  // throws DeviceInUse *, InvalidDevice *, TException
- (BOOL) unregisterDevice: (Id *) userId password: (NSString *) password deviceId: (Id *) deviceId error: (NSError *__autoreleasing *)__thriftError;  // throws TException
- (NSNumber *) changePassword: (Id *) userId oldPassword: (NSString *) oldPassword newPassword: (NSString *) newPassword error: (NSError *__autoreleasing *)__thriftError;  // throws TException
- (Id *) requestTemporaryPassword: (Alias) name error: (NSError *__autoreleasing *)__thriftError;  // throws TException
- (NSNumber *) checkTemporaryPassword: (Id *) userId tempPassword: (NSString *) tempPassword error: (NSError *__autoreleasing *)__thriftError;  // throws TException
- (NSNumber *) resetPassword: (Id *) userId tempPassword: (NSString *) tempPassword password: (NSString *) password error: (NSError *__autoreleasing *)__thriftError;  // throws TException
@end

@interface PublicAPIClient : TBaseClient <PublicAPI> 
- (id) initWithProtocol: (id <TProtocol>) protocol;
- (id) initWithInProtocol: (id <TProtocol>) inProtocol outProtocol: (id <TProtocol>) outProtocol;
@end

@interface PublicAPIProcessor : NSObject <TProcessor> 
- (id) initWithPublicAPI: (id <PublicAPI>) service;
- (id<PublicAPI>) service;
@end

@protocol PublicAPIAsync <NSObject>
- (void) findUserWithAlias: (Alias) name response: (void (^)(UserInfo *)) responseBlock failure : (TAsyncFailureBlock) failureBlock;
- (AnyPromise *) findUserWithAlias: (Alias) name;
- (void) findUserWithId: (Id *) userId response: (void (^)(UserInfo *)) responseBlock failure : (TAsyncFailureBlock) failureBlock;
- (AnyPromise *) findUserWithId: (Id *) userId;
- (void) requestAliasAuthentication: (Alias) name response: (void (^)()) responseBlock failure : (TAsyncFailureBlock) failureBlock;
- (AnyPromise *) requestAliasAuthentication: (Alias) name;
- (void) checkAliasAuthentication: (Alias) name pin: (NSString *) pin response: (void (^)(BOOL)) responseBlock failure : (TAsyncFailureBlock) failureBlock;
- (AnyPromise *) checkAliasAuthentication: (Alias) name pin: (NSString *) pin;
- (void) findProfileWithId: (Id *) userId password: (NSString *) password response: (void (^)(UserProfile *)) responseBlock failure : (TAsyncFailureBlock) failureBlock;
- (AnyPromise *) findProfileWithId: (Id *) userId password: (NSString *) password;
- (void) findProfileWithAlias: (NSString *) userAlias password: (NSString *) password response: (void (^)(UserProfile *)) responseBlock failure : (TAsyncFailureBlock) failureBlock;
- (AnyPromise *) findProfileWithAlias: (NSString *) userAlias password: (NSString *) password;
- (void) registerUser: (NSString *) password encryptionCSR: (NSData *) encryptionCSR signingCSR: (NSData *) signingCSR authenticatedAliases: (NSArray<AuthenticatedAlias *> *) authenticatedAliases deviceInfo: (DeviceInfo *) deviceInfo response: (void (^)(UserProfile *)) responseBlock failure : (TAsyncFailureBlock) failureBlock;
- (AnyPromise *) registerUser: (NSString *) password encryptionCSR: (NSData *) encryptionCSR signingCSR: (NSData *) signingCSR authenticatedAliases: (NSArray<AuthenticatedAlias *> *) authenticatedAliases deviceInfo: (DeviceInfo *) deviceInfo;
- (void) signIn: (Id *) userId password: (NSString *) password deviceId: (Id *) deviceId response: (void (^)(NSData *)) responseBlock failure : (TAsyncFailureBlock) failureBlock;
- (AnyPromise *) signIn: (Id *) userId password: (NSString *) password deviceId: (Id *) deviceId;
- (void) generateAccessToken: (Id *) userId deviceId: (Id *) deviceId refreshToken: (NSData *) refreshToken response: (void (^)(NSString *)) responseBlock failure : (TAsyncFailureBlock) failureBlock;
- (AnyPromise *) generateAccessToken: (Id *) userId deviceId: (Id *) deviceId refreshToken: (NSData *) refreshToken;
- (void) registerDevice: (Id *) userId password: (NSString *) password deviceInfo: (DeviceInfo *) deviceInfo response: (void (^)()) responseBlock failure : (TAsyncFailureBlock) failureBlock;
- (AnyPromise *) registerDevice: (Id *) userId password: (NSString *) password deviceInfo: (DeviceInfo *) deviceInfo;
- (void) replaceRegisteredDevice: (Id *) userId password: (NSString *) password deviceInfo: (DeviceInfo *) deviceInfo currentDeviceId: (Id *) currentDeviceId response: (void (^)()) responseBlock failure : (TAsyncFailureBlock) failureBlock;
- (AnyPromise *) replaceRegisteredDevice: (Id *) userId password: (NSString *) password deviceInfo: (DeviceInfo *) deviceInfo currentDeviceId: (Id *) currentDeviceId;
- (void) unregisterDevice: (Id *) userId password: (NSString *) password deviceId: (Id *) deviceId response: (void (^)()) responseBlock failure : (TAsyncFailureBlock) failureBlock;
- (AnyPromise *) unregisterDevice: (Id *) userId password: (NSString *) password deviceId: (Id *) deviceId;
- (void) changePassword: (Id *) userId oldPassword: (NSString *) oldPassword newPassword: (NSString *) newPassword response: (void (^)(BOOL)) responseBlock failure : (TAsyncFailureBlock) failureBlock;
- (AnyPromise *) changePassword: (Id *) userId oldPassword: (NSString *) oldPassword newPassword: (NSString *) newPassword;
- (void) requestTemporaryPassword: (Alias) name response: (void (^)(Id *)) responseBlock failure : (TAsyncFailureBlock) failureBlock;
- (AnyPromise *) requestTemporaryPassword: (Alias) name;
- (void) checkTemporaryPassword: (Id *) userId tempPassword: (NSString *) tempPassword response: (void (^)(BOOL)) responseBlock failure : (TAsyncFailureBlock) failureBlock;
- (AnyPromise *) checkTemporaryPassword: (Id *) userId tempPassword: (NSString *) tempPassword;
- (void) resetPassword: (Id *) userId tempPassword: (NSString *) tempPassword password: (NSString *) password response: (void (^)(BOOL)) responseBlock failure : (TAsyncFailureBlock) failureBlock;
- (AnyPromise *) resetPassword: (Id *) userId tempPassword: (NSString *) tempPassword password: (NSString *) password;
@end

@interface PublicAPIClientAsync : TBaseClient <PublicAPIAsync> 

- (id) initWithProtocolFactory: (id <TProtocolFactory>) protocolFactory transportFactory: (id <TAsyncTransportFactory>) transportFactory;
@end

@protocol DeviceService <NSObject>
- (BOOL) userStatus: (Alias) sender recipient: (Alias) recipient status: (UserStatus) status error: (NSError *__autoreleasing *)__thriftError;  // throws TException
- (BOOL) groupStatus: (Alias) sender chatId: (Id *) chatId status: (UserStatus) status error: (NSError *__autoreleasing *)__thriftError;  // throws TException
- (BOOL) msgDelivery: (Msg *) msg error: (NSError *__autoreleasing *)__thriftError;  // throws TException
- (BOOL) msgReady: (MsgHdr *) msgHdr error: (NSError *__autoreleasing *)__thriftError;  // throws TException
- (BOOL) msgDelivered: (Id *) msgId recipient: (Alias) recipient error: (NSError *__autoreleasing *)__thriftError;  // throws TException
- (BOOL) msgDirect: (DirectMsg *) msg error: (NSError *__autoreleasing *)__thriftError;  // throws TException
@end

@interface DeviceServiceClient : TBaseClient <DeviceService> 
- (id) initWithProtocol: (id <TProtocol>) protocol;
- (id) initWithInProtocol: (id <TProtocol>) inProtocol outProtocol: (id <TProtocol>) outProtocol;
@end

@interface DeviceServiceProcessor : NSObject <TProcessor> 
- (id) initWithDeviceService: (id <DeviceService>) service;
- (id<DeviceService>) service;
@end

@protocol DeviceServiceAsync <NSObject>
- (void) userStatus: (Alias) sender recipient: (Alias) recipient status: (UserStatus) status response: (void (^)()) responseBlock failure : (TAsyncFailureBlock) failureBlock;
- (AnyPromise *) userStatus: (Alias) sender recipient: (Alias) recipient status: (UserStatus) status;
- (void) groupStatus: (Alias) sender chatId: (Id *) chatId status: (UserStatus) status response: (void (^)()) responseBlock failure : (TAsyncFailureBlock) failureBlock;
- (AnyPromise *) groupStatus: (Alias) sender chatId: (Id *) chatId status: (UserStatus) status;
- (void) msgDelivery: (Msg *) msg response: (void (^)()) responseBlock failure : (TAsyncFailureBlock) failureBlock;
- (AnyPromise *) msgDelivery: (Msg *) msg;
- (void) msgReady: (MsgHdr *) msgHdr response: (void (^)()) responseBlock failure : (TAsyncFailureBlock) failureBlock;
- (AnyPromise *) msgReady: (MsgHdr *) msgHdr;
- (void) msgDelivered: (Id *) msgId recipient: (Alias) recipient response: (void (^)()) responseBlock failure : (TAsyncFailureBlock) failureBlock;
- (AnyPromise *) msgDelivered: (Id *) msgId recipient: (Alias) recipient;
- (void) msgDirect: (DirectMsg *) msg response: (void (^)()) responseBlock failure : (TAsyncFailureBlock) failureBlock;
- (AnyPromise *) msgDirect: (DirectMsg *) msg;
@end

@interface DeviceServiceClientAsync : TBaseClient <DeviceServiceAsync> 

- (id) initWithProtocolFactory: (id <TProtocolFactory>) protocolFactory transportFactory: (id <TAsyncTransportFactory>) transportFactory;
@end

FOUNDATION_EXPORT NSString *MessagesErrorDomain;

FOUNDATION_EXPORT SInt8 MsgFlagCC;
FOUNDATION_EXPORT SInt8 MsgFlagSilent;
FOUNDATION_EXPORT NSString * MetaDataKey_MimeType;
FOUNDATION_EXPORT NSString * MetaDataKey_Title;
FOUNDATION_EXPORT NSString * MetaDataKey_ThumbnailFrameTime;
FOUNDATION_EXPORT NSString * VideoType_MP4;
FOUNDATION_EXPORT NSString * AudioType_WAV;
FOUNDATION_EXPORT NSString * AudioType_MP3;
FOUNDATION_EXPORT NSString * AudioType_MP4;
FOUNDATION_EXPORT NSString * ImageType_PNG;
FOUNDATION_EXPORT NSString * ImageType_JPG;
FOUNDATION_EXPORT NSString * MetaDataKey_TargetMessageId;
FOUNDATION_EXPORT NSString * MetaDataKey_DeleteType;
FOUNDATION_EXPORT NSString * DeleteType_Message;
FOUNDATION_EXPORT NSString * DeleteType_Chat;

