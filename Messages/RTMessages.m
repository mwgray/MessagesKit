/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import <Thrift/TProtocol.h>
#import <Thrift/TProtocolFactory.h>
#import <Thrift/TApplicationError.h>
#import <Thrift/TProtocolError.h>
#import <Thrift/TProtocolUtil.h>
#import <Thrift/TProcessor.h>
#import <Thrift/TBase.h>
#import <Thrift/TAsyncTransport.h>
#import <Thrift/TBaseClient.h>

#import <PromiseKit/PromiseKit.h>

#import "RTMessages.h"

@implementation RTId

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithData: (NSData *) data
{
  self = [super init];
  if (self)  {
    _data = data;
    _dataIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"data"])
    {
      _data = [decoder decodeObjectForKey: @"data"];
      _dataIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_dataIsSet)
  {
    [encoder encodeObject: _data forKey: @"data"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _dataIsSet ? 2654435761 : 0;
  if (_dataIsSet)
  {
    hash = (hash * 31) ^ [_data hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTId class]]) {
    return NO;
  }
  RTId *other = (RTId *)anObject;
  if ((_dataIsSet != other->_dataIsSet) ||
      (_dataIsSet && ((_data || other->_data) && ![_data isEqual:other->_data]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTId * val = [RTId new];
  val.data = [self.data copy];
  return val;
}

- (void) setData: (NSData *) data {
  _data = data;
  _dataIsSet = YES;
}

- (void) unsetData {
  _data = nil;
  _dataIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSData * fieldValue;
          if (![inProtocol readBinary:&fieldValue error: __thriftError]) return NO;
          self.data = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"Id" error: __thriftError]) return NO;
  if (_dataIsSet) {
    if (_data != nil) {
      if (![outProtocol writeFieldBeginWithName: @"data" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeBinary: _data error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  if (!_dataIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"data"}];
    }
  }
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTId("];
  [ms appendString: @"data:"];
  [ms appendFormat: @"\"%@\"", _data];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RTGroup

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithChat: (RTId *) chat members: (RTAliasSet) members
{
  self = [super init];
  if (self)  {
    _chat = chat;
    _chatIsSet = YES;
    _members = [members mutableCopy];
    _membersIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"chat"])
    {
      _chat = [decoder decodeObjectForKey: @"chat"];
      _chatIsSet = YES;
    }
    if ([decoder containsValueForKey: @"members"])
    {
      _members = [decoder decodeObjectForKey: @"members"];
      _membersIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_chatIsSet)
  {
    [encoder encodeObject: _chat forKey: @"chat"];
  }
  if (_membersIsSet)
  {
    [encoder encodeObject: _members forKey: @"members"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _chatIsSet ? 2654435761 : 0;
  if (_chatIsSet)
  {
    hash = (hash * 31) ^ [_chat hash];
  }
  hash = (hash * 31) ^ _membersIsSet ? 2654435761 : 0;
  if (_membersIsSet)
  {
    hash = (hash * 31) ^ [_members hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTGroup class]]) {
    return NO;
  }
  RTGroup *other = (RTGroup *)anObject;
  if ((_chatIsSet != other->_chatIsSet) ||
      (_chatIsSet && ((_chat || other->_chat) && ![_chat isEqual:other->_chat]))) {
    return NO;
  }
  if ((_membersIsSet != other->_membersIsSet) ||
      (_membersIsSet && ((_members || other->_members) && ![_members isEqual:other->_members]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTGroup * val = [RTGroup new];
  val.chat = [self.chat copy];
  val.members = [self.members copy];
  return val;
}

- (void) setChat: (RTId *) chat {
  _chat = chat;
  _chatIsSet = YES;
}

- (void) unsetChat {
  _chat = nil;
  _chatIsSet = NO;
}

- (void) setMembers: (NSMutableSet<RTAlias> *) members {
  _members = members;
  _membersIsSet = YES;
}

- (void) unsetMembers {
  _members = nil;
  _membersIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          RTId *fieldValue = [[RTId alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.chat = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSET) {
          SInt32 _size0;
          if (![inProtocol readSetBeginReturningElementType: NULL size: &_size0 error: __thriftError]) return NO;
          NSMutableSet * fieldValue = [[NSMutableSet alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            NSString * _elem2;
            if (![inProtocol readString:&_elem2 error: __thriftError]) return NO;
            [fieldValue addObject: _elem2];
          }
          if (![inProtocol readSetEnd: __thriftError]) return NO;
          self.members = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"Group" error: __thriftError]) return NO;
  if (_chatIsSet) {
    if (_chat != nil) {
      if (![outProtocol writeFieldBeginWithName: @"chat" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_chat write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_membersIsSet) {
    if (_members != nil) {
      if (![outProtocol writeFieldBeginWithName: @"members" type: TTypeSET fieldID: 2 error: __thriftError]) return NO;
      {
        if (![outProtocol writeSetBeginWithElementType: TTypeSTRING size: (SInt32)[_members count] error: __thriftError]) return NO;
        NSEnumerator * _iter3 = [_members objectEnumerator];
        id obj4;
        while ((obj4 = [_iter3 nextObject]))
        {
          if (![outProtocol writeString: obj4 error: __thriftError]) return NO;
        }
        if (![outProtocol writeSetEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  if (!_chatIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"chat"}];
    }
  }
  if (!_membersIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"members"}];
    }
  }
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTGroup("];
  [ms appendString: @"chat:"];
  [ms appendFormat: @"%@", _chat];
  [ms appendString: @",members:"];
  [ms appendFormat: @"%@", _members];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RTMsg

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithId: (RTId *) id type: (RTMsgType) type sender: (RTAlias) sender recipient: (RTAlias) recipient group: (RTGroup *) group key: (NSData *) key signature: (NSData *) signature data: (NSData *) data metaData: (NSDictionary<NSString *, NSString *> *) metaData sent: (RTTimeStamp) sent flags: (SInt8) flags
{
  self = [super init];
  if (self)  {
    _id = id;
    _idIsSet = YES;
    _type = type;
    _typeIsSet = YES;
    _sender = sender;
    _senderIsSet = YES;
    _recipient = recipient;
    _recipientIsSet = YES;
    _group = group;
    _groupIsSet = YES;
    _key = key;
    _keyIsSet = YES;
    _signature = signature;
    _signatureIsSet = YES;
    _data = data;
    _dataIsSet = YES;
    _metaData = [metaData mutableCopy];
    _metaDataIsSet = YES;
    _sent = sent;
    _sentIsSet = YES;
    _flags = flags;
    _flagsIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"id"])
    {
      _id = [decoder decodeObjectForKey: @"id"];
      _idIsSet = YES;
    }
    if ([decoder containsValueForKey: @"type"])
    {
      _type = [decoder decodeIntForKey: @"type"];
      _typeIsSet = YES;
    }
    if ([decoder containsValueForKey: @"sender"])
    {
      _sender = [decoder decodeObjectForKey: @"sender"];
      _senderIsSet = YES;
    }
    if ([decoder containsValueForKey: @"recipient"])
    {
      _recipient = [decoder decodeObjectForKey: @"recipient"];
      _recipientIsSet = YES;
    }
    if ([decoder containsValueForKey: @"group"])
    {
      _group = [decoder decodeObjectForKey: @"group"];
      _groupIsSet = YES;
    }
    if ([decoder containsValueForKey: @"key"])
    {
      _key = [decoder decodeObjectForKey: @"key"];
      _keyIsSet = YES;
    }
    if ([decoder containsValueForKey: @"signature"])
    {
      _signature = [decoder decodeObjectForKey: @"signature"];
      _signatureIsSet = YES;
    }
    if ([decoder containsValueForKey: @"data"])
    {
      _data = [decoder decodeObjectForKey: @"data"];
      _dataIsSet = YES;
    }
    if ([decoder containsValueForKey: @"metaData"])
    {
      _metaData = [decoder decodeObjectForKey: @"metaData"];
      _metaDataIsSet = YES;
    }
    if ([decoder containsValueForKey: @"sent"])
    {
      _sent = [decoder decodeInt64ForKey: @"sent"];
      _sentIsSet = YES;
    }
    if ([decoder containsValueForKey: @"flags"])
    {
      _flags = [decoder decodeIntForKey: @"flags"];
      _flagsIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_idIsSet)
  {
    [encoder encodeObject: _id forKey: @"id"];
  }
  if (_typeIsSet)
  {
    [encoder encodeInt: _type forKey: @"type"];
  }
  if (_senderIsSet)
  {
    [encoder encodeObject: _sender forKey: @"sender"];
  }
  if (_recipientIsSet)
  {
    [encoder encodeObject: _recipient forKey: @"recipient"];
  }
  if (_groupIsSet)
  {
    [encoder encodeObject: _group forKey: @"group"];
  }
  if (_keyIsSet)
  {
    [encoder encodeObject: _key forKey: @"key"];
  }
  if (_signatureIsSet)
  {
    [encoder encodeObject: _signature forKey: @"signature"];
  }
  if (_dataIsSet)
  {
    [encoder encodeObject: _data forKey: @"data"];
  }
  if (_metaDataIsSet)
  {
    [encoder encodeObject: _metaData forKey: @"metaData"];
  }
  if (_sentIsSet)
  {
    [encoder encodeInt64: _sent forKey: @"sent"];
  }
  if (_flagsIsSet)
  {
    [encoder encodeInt: _flags forKey: @"flags"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _idIsSet ? 2654435761 : 0;
  if (_idIsSet)
  {
    hash = (hash * 31) ^ [_id hash];
  }
  hash = (hash * 31) ^ _typeIsSet ? 2654435761 : 0;
  if (_typeIsSet)
  {
    hash = (hash * 31) ^ [@(_type) hash];
  }
  hash = (hash * 31) ^ _senderIsSet ? 2654435761 : 0;
  if (_senderIsSet)
  {
    hash = (hash * 31) ^ [_sender hash];
  }
  hash = (hash * 31) ^ _recipientIsSet ? 2654435761 : 0;
  if (_recipientIsSet)
  {
    hash = (hash * 31) ^ [_recipient hash];
  }
  hash = (hash * 31) ^ _groupIsSet ? 2654435761 : 0;
  if (_groupIsSet)
  {
    hash = (hash * 31) ^ [_group hash];
  }
  hash = (hash * 31) ^ _keyIsSet ? 2654435761 : 0;
  if (_keyIsSet)
  {
    hash = (hash * 31) ^ [_key hash];
  }
  hash = (hash * 31) ^ _signatureIsSet ? 2654435761 : 0;
  if (_signatureIsSet)
  {
    hash = (hash * 31) ^ [_signature hash];
  }
  hash = (hash * 31) ^ _dataIsSet ? 2654435761 : 0;
  if (_dataIsSet)
  {
    hash = (hash * 31) ^ [_data hash];
  }
  hash = (hash * 31) ^ _metaDataIsSet ? 2654435761 : 0;
  if (_metaDataIsSet)
  {
    hash = (hash * 31) ^ [_metaData hash];
  }
  hash = (hash * 31) ^ _sentIsSet ? 2654435761 : 0;
  if (_sentIsSet)
  {
    hash = (hash * 31) ^ [@(_sent) hash];
  }
  hash = (hash * 31) ^ _flagsIsSet ? 2654435761 : 0;
  if (_flagsIsSet)
  {
    hash = (hash * 31) ^ [@(_flags) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTMsg class]]) {
    return NO;
  }
  RTMsg *other = (RTMsg *)anObject;
  if ((_idIsSet != other->_idIsSet) ||
      (_idIsSet && ((_id || other->_id) && ![_id isEqual:other->_id]))) {
    return NO;
  }
  if ((_typeIsSet != other->_typeIsSet) ||
      (_typeIsSet && (_type != other->_type))) {
    return NO;
  }
  if ((_senderIsSet != other->_senderIsSet) ||
      (_senderIsSet && ((_sender || other->_sender) && ![_sender isEqual:other->_sender]))) {
    return NO;
  }
  if ((_recipientIsSet != other->_recipientIsSet) ||
      (_recipientIsSet && ((_recipient || other->_recipient) && ![_recipient isEqual:other->_recipient]))) {
    return NO;
  }
  if ((_groupIsSet != other->_groupIsSet) ||
      (_groupIsSet && ((_group || other->_group) && ![_group isEqual:other->_group]))) {
    return NO;
  }
  if ((_keyIsSet != other->_keyIsSet) ||
      (_keyIsSet && ((_key || other->_key) && ![_key isEqual:other->_key]))) {
    return NO;
  }
  if ((_signatureIsSet != other->_signatureIsSet) ||
      (_signatureIsSet && ((_signature || other->_signature) && ![_signature isEqual:other->_signature]))) {
    return NO;
  }
  if ((_dataIsSet != other->_dataIsSet) ||
      (_dataIsSet && ((_data || other->_data) && ![_data isEqual:other->_data]))) {
    return NO;
  }
  if ((_metaDataIsSet != other->_metaDataIsSet) ||
      (_metaDataIsSet && ((_metaData || other->_metaData) && ![_metaData isEqual:other->_metaData]))) {
    return NO;
  }
  if ((_sentIsSet != other->_sentIsSet) ||
      (_sentIsSet && (_sent != other->_sent))) {
    return NO;
  }
  if ((_flagsIsSet != other->_flagsIsSet) ||
      (_flagsIsSet && (_flags != other->_flags))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTMsg * val = [RTMsg new];
  val.id = [self.id copy];
  val.type = self.type;
  val.sender = [self.sender copy];
  val.recipient = [self.recipient copy];
  val.group = [self.group copy];
  val.key = [self.key copy];
  val.signature = [self.signature copy];
  val.data = [self.data copy];
  val.metaData = [self.metaData copy];
  val.sent = self.sent;
  val.flags = self.flags;
  return val;
}

- (void) setId: (RTId *) id {
  _id = id;
  _idIsSet = YES;
}

- (void) unsetId {
  _id = nil;
  _idIsSet = NO;
}

- (void) setType: (RTMsgType) type {
  _type = type;
  _typeIsSet = YES;
}

- (void) unsetType {
  _typeIsSet = NO;
}

- (void) setSender: (NSString *) sender {
  _sender = sender;
  _senderIsSet = YES;
}

- (void) unsetSender {
  _sender = nil;
  _senderIsSet = NO;
}

- (void) setRecipient: (NSString *) recipient {
  _recipient = recipient;
  _recipientIsSet = YES;
}

- (void) unsetRecipient {
  _recipient = nil;
  _recipientIsSet = NO;
}

- (void) setGroup: (RTGroup *) group {
  _group = group;
  _groupIsSet = YES;
}

- (void) unsetGroup {
  _group = nil;
  _groupIsSet = NO;
}

- (void) setKey: (NSData *) key {
  _key = key;
  _keyIsSet = YES;
}

- (void) unsetKey {
  _key = nil;
  _keyIsSet = NO;
}

- (void) setSignature: (NSData *) signature {
  _signature = signature;
  _signatureIsSet = YES;
}

- (void) unsetSignature {
  _signature = nil;
  _signatureIsSet = NO;
}

- (void) setData: (NSData *) data {
  _data = data;
  _dataIsSet = YES;
}

- (void) unsetData {
  _data = nil;
  _dataIsSet = NO;
}

- (void) setMetaData: (NSMutableDictionary<NSString *, NSString *> *) metaData {
  _metaData = metaData;
  _metaDataIsSet = YES;
}

- (void) unsetMetaData {
  _metaData = nil;
  _metaDataIsSet = NO;
}

- (void) setSent: (SInt64) sent {
  _sent = sent;
  _sentIsSet = YES;
}

- (void) unsetSent {
  _sentIsSet = NO;
}

- (void) setFlags: (SInt8) flags {
  _flags = flags;
  _flagsIsSet = YES;
}

- (void) unsetFlags {
  _flagsIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          RTId *fieldValue = [[RTId alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.id = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeI32) {
          RTMsgType fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.type = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.sender = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.recipient = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeSTRUCT) {
          RTGroup *fieldValue = [[RTGroup alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.group = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 6:
        if (fieldType == TTypeSTRING) {
          NSData * fieldValue;
          if (![inProtocol readBinary:&fieldValue error: __thriftError]) return NO;
          self.key = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 7:
        if (fieldType == TTypeSTRING) {
          NSData * fieldValue;
          if (![inProtocol readBinary:&fieldValue error: __thriftError]) return NO;
          self.signature = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 8:
        if (fieldType == TTypeSTRING) {
          NSData * fieldValue;
          if (![inProtocol readBinary:&fieldValue error: __thriftError]) return NO;
          self.data = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 11:
        if (fieldType == TTypeMAP) {
          SInt32 _size5;
          if (![inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size5 error: __thriftError]) return NO;
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            NSString * _key7;
            if (![inProtocol readString:&_key7 error: __thriftError]) return NO;
            NSString * _val8;
            if (![inProtocol readString:&_val8 error: __thriftError]) return NO;
            [fieldValue setObject: _val8 forKey: _key7];
          }
          if (![inProtocol readMapEnd: __thriftError]) return NO;
          self.metaData = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 9:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.sent = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 10:
        if (fieldType == TTypeBYTE) {
          SInt8 fieldValue;
          if (![inProtocol readByte:(UInt8 *)&fieldValue error: __thriftError]) return NO;
          self.flags = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"Msg" error: __thriftError]) return NO;
  if (_idIsSet) {
    if (_id != nil) {
      if (![outProtocol writeFieldBeginWithName: @"id" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_id write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_typeIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"type" type: TTypeI32 fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _type error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_senderIsSet) {
    if (_sender != nil) {
      if (![outProtocol writeFieldBeginWithName: @"sender" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeString: _sender error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_recipientIsSet) {
    if (_recipient != nil) {
      if (![outProtocol writeFieldBeginWithName: @"recipient" type: TTypeSTRING fieldID: 4 error: __thriftError]) return NO;
      if (![outProtocol writeString: _recipient error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_groupIsSet) {
    if (_group != nil) {
      if (![outProtocol writeFieldBeginWithName: @"group" type: TTypeSTRUCT fieldID: 5 error: __thriftError]) return NO;
      if (![_group write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_keyIsSet) {
    if (_key != nil) {
      if (![outProtocol writeFieldBeginWithName: @"key" type: TTypeSTRING fieldID: 6 error: __thriftError]) return NO;
      if (![outProtocol writeBinary: _key error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_signatureIsSet) {
    if (_signature != nil) {
      if (![outProtocol writeFieldBeginWithName: @"signature" type: TTypeSTRING fieldID: 7 error: __thriftError]) return NO;
      if (![outProtocol writeBinary: _signature error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_dataIsSet) {
    if (_data != nil) {
      if (![outProtocol writeFieldBeginWithName: @"data" type: TTypeSTRING fieldID: 8 error: __thriftError]) return NO;
      if (![outProtocol writeBinary: _data error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_metaDataIsSet) {
    if (_metaData != nil) {
      if (![outProtocol writeFieldBeginWithName: @"metaData" type: TTypeMAP fieldID: 11 error: __thriftError]) return NO;
      {
        if (![outProtocol writeMapBeginWithKeyType: TTypeSTRING valueType: TTypeSTRING size: (SInt32)[_metaData count] error: __thriftError]) return NO;
        NSEnumerator * _iter9 = [_metaData keyEnumerator];
        id key10;
        while ((key10 = [_iter9 nextObject]))
        {
          if (![outProtocol writeString: key10 error: __thriftError]) return NO;
          if (![outProtocol writeString: [_metaData objectForKey: key10] error: __thriftError]) return NO;
        }
        if (![outProtocol writeMapEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_sentIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"sent" type: TTypeI64 fieldID: 9 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _sent error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_flagsIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"flags" type: TTypeBYTE fieldID: 10 error: __thriftError]) return NO;
    if (![outProtocol writeByte: (UInt8)_flags error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  if (!_idIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"id"}];
    }
  }
  if (!_typeIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"type"}];
    }
  }
  if (!_senderIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"sender"}];
    }
  }
  if (!_recipientIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"recipient"}];
    }
  }
  if (!_sentIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"sent"}];
    }
  }
  if (!_flagsIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"flags"}];
    }
  }
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTMsg("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%@", _id];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", (int)_type];
  [ms appendString: @",sender:"];
  [ms appendFormat: @"\"%@\"", _sender];
  [ms appendString: @",recipient:"];
  [ms appendFormat: @"\"%@\"", _recipient];
  [ms appendString: @",group:"];
  [ms appendFormat: @"%@", _group];
  [ms appendString: @",key:"];
  [ms appendFormat: @"\"%@\"", _key];
  [ms appendString: @",signature:"];
  [ms appendFormat: @"\"%@\"", _signature];
  [ms appendString: @",data:"];
  [ms appendFormat: @"\"%@\"", _data];
  [ms appendString: @",metaData:"];
  [ms appendFormat: @"%@", _metaData];
  [ms appendString: @",sent:"];
  [ms appendFormat: @"%qi", _sent];
  [ms appendString: @",flags:"];
  [ms appendFormat: @"%i", _flags];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RTEnvelope

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithRecipient: (RTAlias) recipient key: (NSData *) key signature: (NSData *) signature fingerprint: (NSData *) fingerprint
{
  self = [super init];
  if (self)  {
    _recipient = recipient;
    _recipientIsSet = YES;
    _key = key;
    _keyIsSet = YES;
    _signature = signature;
    _signatureIsSet = YES;
    _fingerprint = fingerprint;
    _fingerprintIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"recipient"])
    {
      _recipient = [decoder decodeObjectForKey: @"recipient"];
      _recipientIsSet = YES;
    }
    if ([decoder containsValueForKey: @"key"])
    {
      _key = [decoder decodeObjectForKey: @"key"];
      _keyIsSet = YES;
    }
    if ([decoder containsValueForKey: @"signature"])
    {
      _signature = [decoder decodeObjectForKey: @"signature"];
      _signatureIsSet = YES;
    }
    if ([decoder containsValueForKey: @"fingerprint"])
    {
      _fingerprint = [decoder decodeObjectForKey: @"fingerprint"];
      _fingerprintIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_recipientIsSet)
  {
    [encoder encodeObject: _recipient forKey: @"recipient"];
  }
  if (_keyIsSet)
  {
    [encoder encodeObject: _key forKey: @"key"];
  }
  if (_signatureIsSet)
  {
    [encoder encodeObject: _signature forKey: @"signature"];
  }
  if (_fingerprintIsSet)
  {
    [encoder encodeObject: _fingerprint forKey: @"fingerprint"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _recipientIsSet ? 2654435761 : 0;
  if (_recipientIsSet)
  {
    hash = (hash * 31) ^ [_recipient hash];
  }
  hash = (hash * 31) ^ _keyIsSet ? 2654435761 : 0;
  if (_keyIsSet)
  {
    hash = (hash * 31) ^ [_key hash];
  }
  hash = (hash * 31) ^ _signatureIsSet ? 2654435761 : 0;
  if (_signatureIsSet)
  {
    hash = (hash * 31) ^ [_signature hash];
  }
  hash = (hash * 31) ^ _fingerprintIsSet ? 2654435761 : 0;
  if (_fingerprintIsSet)
  {
    hash = (hash * 31) ^ [_fingerprint hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTEnvelope class]]) {
    return NO;
  }
  RTEnvelope *other = (RTEnvelope *)anObject;
  if ((_recipientIsSet != other->_recipientIsSet) ||
      (_recipientIsSet && ((_recipient || other->_recipient) && ![_recipient isEqual:other->_recipient]))) {
    return NO;
  }
  if ((_keyIsSet != other->_keyIsSet) ||
      (_keyIsSet && ((_key || other->_key) && ![_key isEqual:other->_key]))) {
    return NO;
  }
  if ((_signatureIsSet != other->_signatureIsSet) ||
      (_signatureIsSet && ((_signature || other->_signature) && ![_signature isEqual:other->_signature]))) {
    return NO;
  }
  if ((_fingerprintIsSet != other->_fingerprintIsSet) ||
      (_fingerprintIsSet && ((_fingerprint || other->_fingerprint) && ![_fingerprint isEqual:other->_fingerprint]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTEnvelope * val = [RTEnvelope new];
  val.recipient = [self.recipient copy];
  val.key = [self.key copy];
  val.signature = [self.signature copy];
  val.fingerprint = [self.fingerprint copy];
  return val;
}

- (void) setRecipient: (NSString *) recipient {
  _recipient = recipient;
  _recipientIsSet = YES;
}

- (void) unsetRecipient {
  _recipient = nil;
  _recipientIsSet = NO;
}

- (void) setKey: (NSData *) key {
  _key = key;
  _keyIsSet = YES;
}

- (void) unsetKey {
  _key = nil;
  _keyIsSet = NO;
}

- (void) setSignature: (NSData *) signature {
  _signature = signature;
  _signatureIsSet = YES;
}

- (void) unsetSignature {
  _signature = nil;
  _signatureIsSet = NO;
}

- (void) setFingerprint: (NSData *) fingerprint {
  _fingerprint = fingerprint;
  _fingerprintIsSet = YES;
}

- (void) unsetFingerprint {
  _fingerprint = nil;
  _fingerprintIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.recipient = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSData * fieldValue;
          if (![inProtocol readBinary:&fieldValue error: __thriftError]) return NO;
          self.key = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSData * fieldValue;
          if (![inProtocol readBinary:&fieldValue error: __thriftError]) return NO;
          self.signature = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeSTRING) {
          NSData * fieldValue;
          if (![inProtocol readBinary:&fieldValue error: __thriftError]) return NO;
          self.fingerprint = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"Envelope" error: __thriftError]) return NO;
  if (_recipientIsSet) {
    if (_recipient != nil) {
      if (![outProtocol writeFieldBeginWithName: @"recipient" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _recipient error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_keyIsSet) {
    if (_key != nil) {
      if (![outProtocol writeFieldBeginWithName: @"key" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeBinary: _key error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_signatureIsSet) {
    if (_signature != nil) {
      if (![outProtocol writeFieldBeginWithName: @"signature" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeBinary: _signature error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_fingerprintIsSet) {
    if (_fingerprint != nil) {
      if (![outProtocol writeFieldBeginWithName: @"fingerprint" type: TTypeSTRING fieldID: 5 error: __thriftError]) return NO;
      if (![outProtocol writeBinary: _fingerprint error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  if (!_recipientIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"recipient"}];
    }
  }
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTEnvelope("];
  [ms appendString: @"recipient:"];
  [ms appendFormat: @"\"%@\"", _recipient];
  [ms appendString: @",key:"];
  [ms appendFormat: @"\"%@\"", _key];
  [ms appendString: @",signature:"];
  [ms appendFormat: @"\"%@\"", _signature];
  [ms appendString: @",fingerprint:"];
  [ms appendFormat: @"\"%@\"", _fingerprint];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RTDirectMsg

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithId: (RTId *) id type: (NSString *) type sender: (RTAlias) sender senderDevice: (RTId *) senderDevice key: (NSData *) key signature: (NSData *) signature data: (NSData *) data
{
  self = [super init];
  if (self)  {
    _id = id;
    _idIsSet = YES;
    _type = type;
    _typeIsSet = YES;
    _sender = sender;
    _senderIsSet = YES;
    _senderDevice = senderDevice;
    _senderDeviceIsSet = YES;
    _key = key;
    _keyIsSet = YES;
    _signature = signature;
    _signatureIsSet = YES;
    _data = data;
    _dataIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"id"])
    {
      _id = [decoder decodeObjectForKey: @"id"];
      _idIsSet = YES;
    }
    if ([decoder containsValueForKey: @"type"])
    {
      _type = [decoder decodeObjectForKey: @"type"];
      _typeIsSet = YES;
    }
    if ([decoder containsValueForKey: @"sender"])
    {
      _sender = [decoder decodeObjectForKey: @"sender"];
      _senderIsSet = YES;
    }
    if ([decoder containsValueForKey: @"senderDevice"])
    {
      _senderDevice = [decoder decodeObjectForKey: @"senderDevice"];
      _senderDeviceIsSet = YES;
    }
    if ([decoder containsValueForKey: @"key"])
    {
      _key = [decoder decodeObjectForKey: @"key"];
      _keyIsSet = YES;
    }
    if ([decoder containsValueForKey: @"signature"])
    {
      _signature = [decoder decodeObjectForKey: @"signature"];
      _signatureIsSet = YES;
    }
    if ([decoder containsValueForKey: @"data"])
    {
      _data = [decoder decodeObjectForKey: @"data"];
      _dataIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_idIsSet)
  {
    [encoder encodeObject: _id forKey: @"id"];
  }
  if (_typeIsSet)
  {
    [encoder encodeObject: _type forKey: @"type"];
  }
  if (_senderIsSet)
  {
    [encoder encodeObject: _sender forKey: @"sender"];
  }
  if (_senderDeviceIsSet)
  {
    [encoder encodeObject: _senderDevice forKey: @"senderDevice"];
  }
  if (_keyIsSet)
  {
    [encoder encodeObject: _key forKey: @"key"];
  }
  if (_signatureIsSet)
  {
    [encoder encodeObject: _signature forKey: @"signature"];
  }
  if (_dataIsSet)
  {
    [encoder encodeObject: _data forKey: @"data"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _idIsSet ? 2654435761 : 0;
  if (_idIsSet)
  {
    hash = (hash * 31) ^ [_id hash];
  }
  hash = (hash * 31) ^ _typeIsSet ? 2654435761 : 0;
  if (_typeIsSet)
  {
    hash = (hash * 31) ^ [_type hash];
  }
  hash = (hash * 31) ^ _senderIsSet ? 2654435761 : 0;
  if (_senderIsSet)
  {
    hash = (hash * 31) ^ [_sender hash];
  }
  hash = (hash * 31) ^ _senderDeviceIsSet ? 2654435761 : 0;
  if (_senderDeviceIsSet)
  {
    hash = (hash * 31) ^ [_senderDevice hash];
  }
  hash = (hash * 31) ^ _keyIsSet ? 2654435761 : 0;
  if (_keyIsSet)
  {
    hash = (hash * 31) ^ [_key hash];
  }
  hash = (hash * 31) ^ _signatureIsSet ? 2654435761 : 0;
  if (_signatureIsSet)
  {
    hash = (hash * 31) ^ [_signature hash];
  }
  hash = (hash * 31) ^ _dataIsSet ? 2654435761 : 0;
  if (_dataIsSet)
  {
    hash = (hash * 31) ^ [_data hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTDirectMsg class]]) {
    return NO;
  }
  RTDirectMsg *other = (RTDirectMsg *)anObject;
  if ((_idIsSet != other->_idIsSet) ||
      (_idIsSet && ((_id || other->_id) && ![_id isEqual:other->_id]))) {
    return NO;
  }
  if ((_typeIsSet != other->_typeIsSet) ||
      (_typeIsSet && ((_type || other->_type) && ![_type isEqual:other->_type]))) {
    return NO;
  }
  if ((_senderIsSet != other->_senderIsSet) ||
      (_senderIsSet && ((_sender || other->_sender) && ![_sender isEqual:other->_sender]))) {
    return NO;
  }
  if ((_senderDeviceIsSet != other->_senderDeviceIsSet) ||
      (_senderDeviceIsSet && ((_senderDevice || other->_senderDevice) && ![_senderDevice isEqual:other->_senderDevice]))) {
    return NO;
  }
  if ((_keyIsSet != other->_keyIsSet) ||
      (_keyIsSet && ((_key || other->_key) && ![_key isEqual:other->_key]))) {
    return NO;
  }
  if ((_signatureIsSet != other->_signatureIsSet) ||
      (_signatureIsSet && ((_signature || other->_signature) && ![_signature isEqual:other->_signature]))) {
    return NO;
  }
  if ((_dataIsSet != other->_dataIsSet) ||
      (_dataIsSet && ((_data || other->_data) && ![_data isEqual:other->_data]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTDirectMsg * val = [RTDirectMsg new];
  val.id = [self.id copy];
  val.type = [self.type copy];
  val.sender = [self.sender copy];
  val.senderDevice = [self.senderDevice copy];
  val.key = [self.key copy];
  val.signature = [self.signature copy];
  val.data = [self.data copy];
  return val;
}

- (void) setId: (RTId *) id {
  _id = id;
  _idIsSet = YES;
}

- (void) unsetId {
  _id = nil;
  _idIsSet = NO;
}

- (void) setType: (NSString *) type {
  _type = type;
  _typeIsSet = YES;
}

- (void) unsetType {
  _type = nil;
  _typeIsSet = NO;
}

- (void) setSender: (NSString *) sender {
  _sender = sender;
  _senderIsSet = YES;
}

- (void) unsetSender {
  _sender = nil;
  _senderIsSet = NO;
}

- (void) setSenderDevice: (RTId *) senderDevice {
  _senderDevice = senderDevice;
  _senderDeviceIsSet = YES;
}

- (void) unsetSenderDevice {
  _senderDevice = nil;
  _senderDeviceIsSet = NO;
}

- (void) setKey: (NSData *) key {
  _key = key;
  _keyIsSet = YES;
}

- (void) unsetKey {
  _key = nil;
  _keyIsSet = NO;
}

- (void) setSignature: (NSData *) signature {
  _signature = signature;
  _signatureIsSet = YES;
}

- (void) unsetSignature {
  _signature = nil;
  _signatureIsSet = NO;
}

- (void) setData: (NSData *) data {
  _data = data;
  _dataIsSet = YES;
}

- (void) unsetData {
  _data = nil;
  _dataIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          RTId *fieldValue = [[RTId alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.id = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.type = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.sender = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRUCT) {
          RTId *fieldValue = [[RTId alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.senderDevice = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeSTRING) {
          NSData * fieldValue;
          if (![inProtocol readBinary:&fieldValue error: __thriftError]) return NO;
          self.key = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 6:
        if (fieldType == TTypeSTRING) {
          NSData * fieldValue;
          if (![inProtocol readBinary:&fieldValue error: __thriftError]) return NO;
          self.signature = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 7:
        if (fieldType == TTypeSTRING) {
          NSData * fieldValue;
          if (![inProtocol readBinary:&fieldValue error: __thriftError]) return NO;
          self.data = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"DirectMsg" error: __thriftError]) return NO;
  if (_idIsSet) {
    if (_id != nil) {
      if (![outProtocol writeFieldBeginWithName: @"id" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_id write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_typeIsSet) {
    if (_type != nil) {
      if (![outProtocol writeFieldBeginWithName: @"type" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _type error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_senderIsSet) {
    if (_sender != nil) {
      if (![outProtocol writeFieldBeginWithName: @"sender" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeString: _sender error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_senderDeviceIsSet) {
    if (_senderDevice != nil) {
      if (![outProtocol writeFieldBeginWithName: @"senderDevice" type: TTypeSTRUCT fieldID: 4 error: __thriftError]) return NO;
      if (![_senderDevice write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_keyIsSet) {
    if (_key != nil) {
      if (![outProtocol writeFieldBeginWithName: @"key" type: TTypeSTRING fieldID: 5 error: __thriftError]) return NO;
      if (![outProtocol writeBinary: _key error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_signatureIsSet) {
    if (_signature != nil) {
      if (![outProtocol writeFieldBeginWithName: @"signature" type: TTypeSTRING fieldID: 6 error: __thriftError]) return NO;
      if (![outProtocol writeBinary: _signature error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_dataIsSet) {
    if (_data != nil) {
      if (![outProtocol writeFieldBeginWithName: @"data" type: TTypeSTRING fieldID: 7 error: __thriftError]) return NO;
      if (![outProtocol writeBinary: _data error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  if (!_idIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"id"}];
    }
  }
  if (!_typeIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"type"}];
    }
  }
  if (!_senderIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"sender"}];
    }
  }
  if (!_senderDeviceIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"senderDevice"}];
    }
  }
  if (!_dataIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"data"}];
    }
  }
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTDirectMsg("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%@", _id];
  [ms appendString: @",type:"];
  [ms appendFormat: @"\"%@\"", _type];
  [ms appendString: @",sender:"];
  [ms appendFormat: @"\"%@\"", _sender];
  [ms appendString: @",senderDevice:"];
  [ms appendFormat: @"%@", _senderDevice];
  [ms appendString: @",key:"];
  [ms appendFormat: @"\"%@\"", _key];
  [ms appendString: @",signature:"];
  [ms appendFormat: @"\"%@\"", _signature];
  [ms appendString: @",data:"];
  [ms appendFormat: @"\"%@\"", _data];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RTDirectEnvelope

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithRecipient: (RTAlias) recipient device: (RTId *) device key: (NSData *) key signature: (NSData *) signature fingerprint: (NSData *) fingerprint
{
  self = [super init];
  if (self)  {
    _recipient = recipient;
    _recipientIsSet = YES;
    _device = device;
    _deviceIsSet = YES;
    _key = key;
    _keyIsSet = YES;
    _signature = signature;
    _signatureIsSet = YES;
    _fingerprint = fingerprint;
    _fingerprintIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"recipient"])
    {
      _recipient = [decoder decodeObjectForKey: @"recipient"];
      _recipientIsSet = YES;
    }
    if ([decoder containsValueForKey: @"device"])
    {
      _device = [decoder decodeObjectForKey: @"device"];
      _deviceIsSet = YES;
    }
    if ([decoder containsValueForKey: @"key"])
    {
      _key = [decoder decodeObjectForKey: @"key"];
      _keyIsSet = YES;
    }
    if ([decoder containsValueForKey: @"signature"])
    {
      _signature = [decoder decodeObjectForKey: @"signature"];
      _signatureIsSet = YES;
    }
    if ([decoder containsValueForKey: @"fingerprint"])
    {
      _fingerprint = [decoder decodeObjectForKey: @"fingerprint"];
      _fingerprintIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_recipientIsSet)
  {
    [encoder encodeObject: _recipient forKey: @"recipient"];
  }
  if (_deviceIsSet)
  {
    [encoder encodeObject: _device forKey: @"device"];
  }
  if (_keyIsSet)
  {
    [encoder encodeObject: _key forKey: @"key"];
  }
  if (_signatureIsSet)
  {
    [encoder encodeObject: _signature forKey: @"signature"];
  }
  if (_fingerprintIsSet)
  {
    [encoder encodeObject: _fingerprint forKey: @"fingerprint"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _recipientIsSet ? 2654435761 : 0;
  if (_recipientIsSet)
  {
    hash = (hash * 31) ^ [_recipient hash];
  }
  hash = (hash * 31) ^ _deviceIsSet ? 2654435761 : 0;
  if (_deviceIsSet)
  {
    hash = (hash * 31) ^ [_device hash];
  }
  hash = (hash * 31) ^ _keyIsSet ? 2654435761 : 0;
  if (_keyIsSet)
  {
    hash = (hash * 31) ^ [_key hash];
  }
  hash = (hash * 31) ^ _signatureIsSet ? 2654435761 : 0;
  if (_signatureIsSet)
  {
    hash = (hash * 31) ^ [_signature hash];
  }
  hash = (hash * 31) ^ _fingerprintIsSet ? 2654435761 : 0;
  if (_fingerprintIsSet)
  {
    hash = (hash * 31) ^ [_fingerprint hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTDirectEnvelope class]]) {
    return NO;
  }
  RTDirectEnvelope *other = (RTDirectEnvelope *)anObject;
  if ((_recipientIsSet != other->_recipientIsSet) ||
      (_recipientIsSet && ((_recipient || other->_recipient) && ![_recipient isEqual:other->_recipient]))) {
    return NO;
  }
  if ((_deviceIsSet != other->_deviceIsSet) ||
      (_deviceIsSet && ((_device || other->_device) && ![_device isEqual:other->_device]))) {
    return NO;
  }
  if ((_keyIsSet != other->_keyIsSet) ||
      (_keyIsSet && ((_key || other->_key) && ![_key isEqual:other->_key]))) {
    return NO;
  }
  if ((_signatureIsSet != other->_signatureIsSet) ||
      (_signatureIsSet && ((_signature || other->_signature) && ![_signature isEqual:other->_signature]))) {
    return NO;
  }
  if ((_fingerprintIsSet != other->_fingerprintIsSet) ||
      (_fingerprintIsSet && ((_fingerprint || other->_fingerprint) && ![_fingerprint isEqual:other->_fingerprint]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTDirectEnvelope * val = [RTDirectEnvelope new];
  val.recipient = [self.recipient copy];
  val.device = [self.device copy];
  val.key = [self.key copy];
  val.signature = [self.signature copy];
  val.fingerprint = [self.fingerprint copy];
  return val;
}

- (void) setRecipient: (NSString *) recipient {
  _recipient = recipient;
  _recipientIsSet = YES;
}

- (void) unsetRecipient {
  _recipient = nil;
  _recipientIsSet = NO;
}

- (void) setDevice: (RTId *) device {
  _device = device;
  _deviceIsSet = YES;
}

- (void) unsetDevice {
  _device = nil;
  _deviceIsSet = NO;
}

- (void) setKey: (NSData *) key {
  _key = key;
  _keyIsSet = YES;
}

- (void) unsetKey {
  _key = nil;
  _keyIsSet = NO;
}

- (void) setSignature: (NSData *) signature {
  _signature = signature;
  _signatureIsSet = YES;
}

- (void) unsetSignature {
  _signature = nil;
  _signatureIsSet = NO;
}

- (void) setFingerprint: (NSData *) fingerprint {
  _fingerprint = fingerprint;
  _fingerprintIsSet = YES;
}

- (void) unsetFingerprint {
  _fingerprint = nil;
  _fingerprintIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.recipient = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          RTId *fieldValue = [[RTId alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.device = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSData * fieldValue;
          if (![inProtocol readBinary:&fieldValue error: __thriftError]) return NO;
          self.key = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRING) {
          NSData * fieldValue;
          if (![inProtocol readBinary:&fieldValue error: __thriftError]) return NO;
          self.signature = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 6:
        if (fieldType == TTypeSTRING) {
          NSData * fieldValue;
          if (![inProtocol readBinary:&fieldValue error: __thriftError]) return NO;
          self.fingerprint = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"DirectEnvelope" error: __thriftError]) return NO;
  if (_recipientIsSet) {
    if (_recipient != nil) {
      if (![outProtocol writeFieldBeginWithName: @"recipient" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _recipient error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_deviceIsSet) {
    if (_device != nil) {
      if (![outProtocol writeFieldBeginWithName: @"device" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_device write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_keyIsSet) {
    if (_key != nil) {
      if (![outProtocol writeFieldBeginWithName: @"key" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeBinary: _key error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_signatureIsSet) {
    if (_signature != nil) {
      if (![outProtocol writeFieldBeginWithName: @"signature" type: TTypeSTRING fieldID: 4 error: __thriftError]) return NO;
      if (![outProtocol writeBinary: _signature error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_fingerprintIsSet) {
    if (_fingerprint != nil) {
      if (![outProtocol writeFieldBeginWithName: @"fingerprint" type: TTypeSTRING fieldID: 6 error: __thriftError]) return NO;
      if (![outProtocol writeBinary: _fingerprint error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  if (!_recipientIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"recipient"}];
    }
  }
  if (!_deviceIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"device"}];
    }
  }
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTDirectEnvelope("];
  [ms appendString: @"recipient:"];
  [ms appendFormat: @"\"%@\"", _recipient];
  [ms appendString: @",device:"];
  [ms appendFormat: @"%@", _device];
  [ms appendString: @",key:"];
  [ms appendFormat: @"\"%@\"", _key];
  [ms appendString: @",signature:"];
  [ms appendFormat: @"\"%@\"", _signature];
  [ms appendString: @",fingerprint:"];
  [ms appendFormat: @"\"%@\"", _fingerprint];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RTMsgPack

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithId: (RTId *) id type: (RTMsgType) type sender: (RTAlias) sender envelopes: (RTEnvelopeList) envelopes chat: (RTId *) chat metaData: (NSDictionary<NSString *, NSString *> *) metaData data: (NSData *) data
{
  self = [super init];
  if (self)  {
    _id = id;
    _idIsSet = YES;
    _type = type;
    _typeIsSet = YES;
    _sender = sender;
    _senderIsSet = YES;
    _envelopes = [envelopes mutableCopy];
    _envelopesIsSet = YES;
    _chat = chat;
    _chatIsSet = YES;
    _metaData = [metaData mutableCopy];
    _metaDataIsSet = YES;
    _data = data;
    _dataIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"id"])
    {
      _id = [decoder decodeObjectForKey: @"id"];
      _idIsSet = YES;
    }
    if ([decoder containsValueForKey: @"type"])
    {
      _type = [decoder decodeIntForKey: @"type"];
      _typeIsSet = YES;
    }
    if ([decoder containsValueForKey: @"sender"])
    {
      _sender = [decoder decodeObjectForKey: @"sender"];
      _senderIsSet = YES;
    }
    if ([decoder containsValueForKey: @"envelopes"])
    {
      _envelopes = [decoder decodeObjectForKey: @"envelopes"];
      _envelopesIsSet = YES;
    }
    if ([decoder containsValueForKey: @"chat"])
    {
      _chat = [decoder decodeObjectForKey: @"chat"];
      _chatIsSet = YES;
    }
    if ([decoder containsValueForKey: @"metaData"])
    {
      _metaData = [decoder decodeObjectForKey: @"metaData"];
      _metaDataIsSet = YES;
    }
    if ([decoder containsValueForKey: @"data"])
    {
      _data = [decoder decodeObjectForKey: @"data"];
      _dataIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_idIsSet)
  {
    [encoder encodeObject: _id forKey: @"id"];
  }
  if (_typeIsSet)
  {
    [encoder encodeInt: _type forKey: @"type"];
  }
  if (_senderIsSet)
  {
    [encoder encodeObject: _sender forKey: @"sender"];
  }
  if (_envelopesIsSet)
  {
    [encoder encodeObject: _envelopes forKey: @"envelopes"];
  }
  if (_chatIsSet)
  {
    [encoder encodeObject: _chat forKey: @"chat"];
  }
  if (_metaDataIsSet)
  {
    [encoder encodeObject: _metaData forKey: @"metaData"];
  }
  if (_dataIsSet)
  {
    [encoder encodeObject: _data forKey: @"data"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _idIsSet ? 2654435761 : 0;
  if (_idIsSet)
  {
    hash = (hash * 31) ^ [_id hash];
  }
  hash = (hash * 31) ^ _typeIsSet ? 2654435761 : 0;
  if (_typeIsSet)
  {
    hash = (hash * 31) ^ [@(_type) hash];
  }
  hash = (hash * 31) ^ _senderIsSet ? 2654435761 : 0;
  if (_senderIsSet)
  {
    hash = (hash * 31) ^ [_sender hash];
  }
  hash = (hash * 31) ^ _envelopesIsSet ? 2654435761 : 0;
  if (_envelopesIsSet)
  {
    hash = (hash * 31) ^ [_envelopes hash];
  }
  hash = (hash * 31) ^ _chatIsSet ? 2654435761 : 0;
  if (_chatIsSet)
  {
    hash = (hash * 31) ^ [_chat hash];
  }
  hash = (hash * 31) ^ _metaDataIsSet ? 2654435761 : 0;
  if (_metaDataIsSet)
  {
    hash = (hash * 31) ^ [_metaData hash];
  }
  hash = (hash * 31) ^ _dataIsSet ? 2654435761 : 0;
  if (_dataIsSet)
  {
    hash = (hash * 31) ^ [_data hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTMsgPack class]]) {
    return NO;
  }
  RTMsgPack *other = (RTMsgPack *)anObject;
  if ((_idIsSet != other->_idIsSet) ||
      (_idIsSet && ((_id || other->_id) && ![_id isEqual:other->_id]))) {
    return NO;
  }
  if ((_typeIsSet != other->_typeIsSet) ||
      (_typeIsSet && (_type != other->_type))) {
    return NO;
  }
  if ((_senderIsSet != other->_senderIsSet) ||
      (_senderIsSet && ((_sender || other->_sender) && ![_sender isEqual:other->_sender]))) {
    return NO;
  }
  if ((_envelopesIsSet != other->_envelopesIsSet) ||
      (_envelopesIsSet && ((_envelopes || other->_envelopes) && ![_envelopes isEqual:other->_envelopes]))) {
    return NO;
  }
  if ((_chatIsSet != other->_chatIsSet) ||
      (_chatIsSet && ((_chat || other->_chat) && ![_chat isEqual:other->_chat]))) {
    return NO;
  }
  if ((_metaDataIsSet != other->_metaDataIsSet) ||
      (_metaDataIsSet && ((_metaData || other->_metaData) && ![_metaData isEqual:other->_metaData]))) {
    return NO;
  }
  if ((_dataIsSet != other->_dataIsSet) ||
      (_dataIsSet && ((_data || other->_data) && ![_data isEqual:other->_data]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTMsgPack * val = [RTMsgPack new];
  val.id = [self.id copy];
  val.type = self.type;
  val.sender = [self.sender copy];
  val.envelopes = [self.envelopes copy];
  val.chat = [self.chat copy];
  val.metaData = [self.metaData copy];
  val.data = [self.data copy];
  return val;
}

- (void) setId: (RTId *) id {
  _id = id;
  _idIsSet = YES;
}

- (void) unsetId {
  _id = nil;
  _idIsSet = NO;
}

- (void) setType: (RTMsgType) type {
  _type = type;
  _typeIsSet = YES;
}

- (void) unsetType {
  _typeIsSet = NO;
}

- (void) setSender: (NSString *) sender {
  _sender = sender;
  _senderIsSet = YES;
}

- (void) unsetSender {
  _sender = nil;
  _senderIsSet = NO;
}

- (void) setEnvelopes: (NSMutableArray<RTEnvelope *> *) envelopes {
  _envelopes = envelopes;
  _envelopesIsSet = YES;
}

- (void) unsetEnvelopes {
  _envelopes = nil;
  _envelopesIsSet = NO;
}

- (void) setChat: (RTId *) chat {
  _chat = chat;
  _chatIsSet = YES;
}

- (void) unsetChat {
  _chat = nil;
  _chatIsSet = NO;
}

- (void) setMetaData: (NSMutableDictionary<NSString *, NSString *> *) metaData {
  _metaData = metaData;
  _metaDataIsSet = YES;
}

- (void) unsetMetaData {
  _metaData = nil;
  _metaDataIsSet = NO;
}

- (void) setData: (NSData *) data {
  _data = data;
  _dataIsSet = YES;
}

- (void) unsetData {
  _data = nil;
  _dataIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          RTId *fieldValue = [[RTId alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.id = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeI32) {
          RTMsgType fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.type = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.sender = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeLIST) {
          SInt32 _size11;
          if (![inProtocol readListBeginReturningElementType: NULL size: &_size11 error: __thriftError]) return NO;
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size11];
          int _i12;
          for (_i12 = 0; _i12 < _size11; ++_i12)
          {
            RTEnvelope *_elem13 = [[RTEnvelope alloc] init];
            if (![_elem13 read: inProtocol error: __thriftError]) return NO;
            [fieldValue addObject: _elem13];
          }
          if (![inProtocol readListEnd: __thriftError]) return NO;
          self.envelopes = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeSTRUCT) {
          RTId *fieldValue = [[RTId alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.chat = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 7:
        if (fieldType == TTypeMAP) {
          SInt32 _size14;
          if (![inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size14 error: __thriftError]) return NO;
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size14];
          int _i15;
          for (_i15 = 0; _i15 < _size14; ++_i15)
          {
            NSString * _key16;
            if (![inProtocol readString:&_key16 error: __thriftError]) return NO;
            NSString * _val17;
            if (![inProtocol readString:&_val17 error: __thriftError]) return NO;
            [fieldValue setObject: _val17 forKey: _key16];
          }
          if (![inProtocol readMapEnd: __thriftError]) return NO;
          self.metaData = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 6:
        if (fieldType == TTypeSTRING) {
          NSData * fieldValue;
          if (![inProtocol readBinary:&fieldValue error: __thriftError]) return NO;
          self.data = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"MsgPack" error: __thriftError]) return NO;
  if (_idIsSet) {
    if (_id != nil) {
      if (![outProtocol writeFieldBeginWithName: @"id" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_id write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_typeIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"type" type: TTypeI32 fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _type error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_senderIsSet) {
    if (_sender != nil) {
      if (![outProtocol writeFieldBeginWithName: @"sender" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeString: _sender error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_envelopesIsSet) {
    if (_envelopes != nil) {
      if (![outProtocol writeFieldBeginWithName: @"envelopes" type: TTypeLIST fieldID: 4 error: __thriftError]) return NO;
      {
        if (![outProtocol writeListBeginWithElementType: TTypeSTRUCT size: (SInt32)[_envelopes count] error: __thriftError]) return NO;
        int idx19;
        for (idx19 = 0; idx19 < [_envelopes count]; idx19++)
        {
          if (![[_envelopes objectAtIndex: idx19] write: outProtocol error: __thriftError]) return NO;
        }
        if (![outProtocol writeListEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_chatIsSet) {
    if (_chat != nil) {
      if (![outProtocol writeFieldBeginWithName: @"chat" type: TTypeSTRUCT fieldID: 5 error: __thriftError]) return NO;
      if (![_chat write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_metaDataIsSet) {
    if (_metaData != nil) {
      if (![outProtocol writeFieldBeginWithName: @"metaData" type: TTypeMAP fieldID: 7 error: __thriftError]) return NO;
      {
        if (![outProtocol writeMapBeginWithKeyType: TTypeSTRING valueType: TTypeSTRING size: (SInt32)[_metaData count] error: __thriftError]) return NO;
        NSEnumerator * _iter20 = [_metaData keyEnumerator];
        id key21;
        while ((key21 = [_iter20 nextObject]))
        {
          if (![outProtocol writeString: key21 error: __thriftError]) return NO;
          if (![outProtocol writeString: [_metaData objectForKey: key21] error: __thriftError]) return NO;
        }
        if (![outProtocol writeMapEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_dataIsSet) {
    if (_data != nil) {
      if (![outProtocol writeFieldBeginWithName: @"data" type: TTypeSTRING fieldID: 6 error: __thriftError]) return NO;
      if (![outProtocol writeBinary: _data error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  if (!_idIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"id"}];
    }
  }
  if (!_typeIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"type"}];
    }
  }
  if (!_senderIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"sender"}];
    }
  }
  if (!_envelopesIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"envelopes"}];
    }
  }
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTMsgPack("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%@", _id];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", (int)_type];
  [ms appendString: @",sender:"];
  [ms appendFormat: @"\"%@\"", _sender];
  [ms appendString: @",envelopes:"];
  [ms appendFormat: @"%@", _envelopes];
  [ms appendString: @",chat:"];
  [ms appendFormat: @"%@", _chat];
  [ms appendString: @",metaData:"];
  [ms appendFormat: @"%@", _metaData];
  [ms appendString: @",data:"];
  [ms appendFormat: @"\"%@\"", _data];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RTMsgHdr

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithId: (RTId *) id type: (RTMsgType) type dataLength: (SInt32) dataLength
{
  self = [super init];
  if (self)  {
    _id = id;
    _idIsSet = YES;
    _type = type;
    _typeIsSet = YES;
    _dataLength = dataLength;
    _dataLengthIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"id"])
    {
      _id = [decoder decodeObjectForKey: @"id"];
      _idIsSet = YES;
    }
    if ([decoder containsValueForKey: @"type"])
    {
      _type = [decoder decodeIntForKey: @"type"];
      _typeIsSet = YES;
    }
    if ([decoder containsValueForKey: @"dataLength"])
    {
      _dataLength = [decoder decodeInt32ForKey: @"dataLength"];
      _dataLengthIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_idIsSet)
  {
    [encoder encodeObject: _id forKey: @"id"];
  }
  if (_typeIsSet)
  {
    [encoder encodeInt: _type forKey: @"type"];
  }
  if (_dataLengthIsSet)
  {
    [encoder encodeInt32: _dataLength forKey: @"dataLength"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _idIsSet ? 2654435761 : 0;
  if (_idIsSet)
  {
    hash = (hash * 31) ^ [_id hash];
  }
  hash = (hash * 31) ^ _typeIsSet ? 2654435761 : 0;
  if (_typeIsSet)
  {
    hash = (hash * 31) ^ [@(_type) hash];
  }
  hash = (hash * 31) ^ _dataLengthIsSet ? 2654435761 : 0;
  if (_dataLengthIsSet)
  {
    hash = (hash * 31) ^ [@(_dataLength) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTMsgHdr class]]) {
    return NO;
  }
  RTMsgHdr *other = (RTMsgHdr *)anObject;
  if ((_idIsSet != other->_idIsSet) ||
      (_idIsSet && ((_id || other->_id) && ![_id isEqual:other->_id]))) {
    return NO;
  }
  if ((_typeIsSet != other->_typeIsSet) ||
      (_typeIsSet && (_type != other->_type))) {
    return NO;
  }
  if ((_dataLengthIsSet != other->_dataLengthIsSet) ||
      (_dataLengthIsSet && (_dataLength != other->_dataLength))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTMsgHdr * val = [RTMsgHdr new];
  val.id = [self.id copy];
  val.type = self.type;
  val.dataLength = self.dataLength;
  return val;
}

- (void) setId: (RTId *) id {
  _id = id;
  _idIsSet = YES;
}

- (void) unsetId {
  _id = nil;
  _idIsSet = NO;
}

- (void) setType: (RTMsgType) type {
  _type = type;
  _typeIsSet = YES;
}

- (void) unsetType {
  _typeIsSet = NO;
}

- (void) setDataLength: (SInt32) dataLength {
  _dataLength = dataLength;
  _dataLengthIsSet = YES;
}

- (void) unsetDataLength {
  _dataLengthIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          RTId *fieldValue = [[RTId alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.id = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeI32) {
          RTMsgType fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.type = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeI32) {
          SInt32 fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.dataLength = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"MsgHdr" error: __thriftError]) return NO;
  if (_idIsSet) {
    if (_id != nil) {
      if (![outProtocol writeFieldBeginWithName: @"id" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_id write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_typeIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"type" type: TTypeI32 fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _type error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_dataLengthIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"dataLength" type: TTypeI32 fieldID: 3 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _dataLength error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  if (!_idIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"id"}];
    }
  }
  if (!_typeIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"type"}];
    }
  }
  if (!_dataLengthIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"dataLength"}];
    }
  }
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTMsgHdr("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%@", _id];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", (int)_type];
  [ms appendString: @",dataLength:"];
  [ms appendFormat: @"%i", (int)_dataLength];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RTDeviceInfo

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithId: (RTId *) id name: (NSString *) name manufacturer: (NSString *) manufacturer model: (NSString *) model version: (NSString *) version osVersion: (NSString *) osVersion activeAliases: (RTAliasSet) activeAliases
{
  self = [super init];
  if (self)  {
    _id = id;
    _idIsSet = YES;
    _name = name;
    _nameIsSet = YES;
    _manufacturer = manufacturer;
    _manufacturerIsSet = YES;
    _model = model;
    _modelIsSet = YES;
    _version = version;
    _versionIsSet = YES;
    _osVersion = osVersion;
    _osVersionIsSet = YES;
    _activeAliases = [activeAliases mutableCopy];
    _activeAliasesIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"id"])
    {
      _id = [decoder decodeObjectForKey: @"id"];
      _idIsSet = YES;
    }
    if ([decoder containsValueForKey: @"name"])
    {
      _name = [decoder decodeObjectForKey: @"name"];
      _nameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"manufacturer"])
    {
      _manufacturer = [decoder decodeObjectForKey: @"manufacturer"];
      _manufacturerIsSet = YES;
    }
    if ([decoder containsValueForKey: @"model"])
    {
      _model = [decoder decodeObjectForKey: @"model"];
      _modelIsSet = YES;
    }
    if ([decoder containsValueForKey: @"version"])
    {
      _version = [decoder decodeObjectForKey: @"version"];
      _versionIsSet = YES;
    }
    if ([decoder containsValueForKey: @"osVersion"])
    {
      _osVersion = [decoder decodeObjectForKey: @"osVersion"];
      _osVersionIsSet = YES;
    }
    if ([decoder containsValueForKey: @"activeAliases"])
    {
      _activeAliases = [decoder decodeObjectForKey: @"activeAliases"];
      _activeAliasesIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_idIsSet)
  {
    [encoder encodeObject: _id forKey: @"id"];
  }
  if (_nameIsSet)
  {
    [encoder encodeObject: _name forKey: @"name"];
  }
  if (_manufacturerIsSet)
  {
    [encoder encodeObject: _manufacturer forKey: @"manufacturer"];
  }
  if (_modelIsSet)
  {
    [encoder encodeObject: _model forKey: @"model"];
  }
  if (_versionIsSet)
  {
    [encoder encodeObject: _version forKey: @"version"];
  }
  if (_osVersionIsSet)
  {
    [encoder encodeObject: _osVersion forKey: @"osVersion"];
  }
  if (_activeAliasesIsSet)
  {
    [encoder encodeObject: _activeAliases forKey: @"activeAliases"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _idIsSet ? 2654435761 : 0;
  if (_idIsSet)
  {
    hash = (hash * 31) ^ [_id hash];
  }
  hash = (hash * 31) ^ _nameIsSet ? 2654435761 : 0;
  if (_nameIsSet)
  {
    hash = (hash * 31) ^ [_name hash];
  }
  hash = (hash * 31) ^ _manufacturerIsSet ? 2654435761 : 0;
  if (_manufacturerIsSet)
  {
    hash = (hash * 31) ^ [_manufacturer hash];
  }
  hash = (hash * 31) ^ _modelIsSet ? 2654435761 : 0;
  if (_modelIsSet)
  {
    hash = (hash * 31) ^ [_model hash];
  }
  hash = (hash * 31) ^ _versionIsSet ? 2654435761 : 0;
  if (_versionIsSet)
  {
    hash = (hash * 31) ^ [_version hash];
  }
  hash = (hash * 31) ^ _osVersionIsSet ? 2654435761 : 0;
  if (_osVersionIsSet)
  {
    hash = (hash * 31) ^ [_osVersion hash];
  }
  hash = (hash * 31) ^ _activeAliasesIsSet ? 2654435761 : 0;
  if (_activeAliasesIsSet)
  {
    hash = (hash * 31) ^ [_activeAliases hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTDeviceInfo class]]) {
    return NO;
  }
  RTDeviceInfo *other = (RTDeviceInfo *)anObject;
  if ((_idIsSet != other->_idIsSet) ||
      (_idIsSet && ((_id || other->_id) && ![_id isEqual:other->_id]))) {
    return NO;
  }
  if ((_nameIsSet != other->_nameIsSet) ||
      (_nameIsSet && ((_name || other->_name) && ![_name isEqual:other->_name]))) {
    return NO;
  }
  if ((_manufacturerIsSet != other->_manufacturerIsSet) ||
      (_manufacturerIsSet && ((_manufacturer || other->_manufacturer) && ![_manufacturer isEqual:other->_manufacturer]))) {
    return NO;
  }
  if ((_modelIsSet != other->_modelIsSet) ||
      (_modelIsSet && ((_model || other->_model) && ![_model isEqual:other->_model]))) {
    return NO;
  }
  if ((_versionIsSet != other->_versionIsSet) ||
      (_versionIsSet && ((_version || other->_version) && ![_version isEqual:other->_version]))) {
    return NO;
  }
  if ((_osVersionIsSet != other->_osVersionIsSet) ||
      (_osVersionIsSet && ((_osVersion || other->_osVersion) && ![_osVersion isEqual:other->_osVersion]))) {
    return NO;
  }
  if ((_activeAliasesIsSet != other->_activeAliasesIsSet) ||
      (_activeAliasesIsSet && ((_activeAliases || other->_activeAliases) && ![_activeAliases isEqual:other->_activeAliases]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTDeviceInfo * val = [RTDeviceInfo new];
  val.id = [self.id copy];
  val.name = [self.name copy];
  val.manufacturer = [self.manufacturer copy];
  val.model = [self.model copy];
  val.version = [self.version copy];
  val.osVersion = [self.osVersion copy];
  val.activeAliases = [self.activeAliases copy];
  return val;
}

- (void) setId: (RTId *) id {
  _id = id;
  _idIsSet = YES;
}

- (void) unsetId {
  _id = nil;
  _idIsSet = NO;
}

- (void) setName: (NSString *) name {
  _name = name;
  _nameIsSet = YES;
}

- (void) unsetName {
  _name = nil;
  _nameIsSet = NO;
}

- (void) setManufacturer: (NSString *) manufacturer {
  _manufacturer = manufacturer;
  _manufacturerIsSet = YES;
}

- (void) unsetManufacturer {
  _manufacturer = nil;
  _manufacturerIsSet = NO;
}

- (void) setModel: (NSString *) model {
  _model = model;
  _modelIsSet = YES;
}

- (void) unsetModel {
  _model = nil;
  _modelIsSet = NO;
}

- (void) setVersion: (NSString *) version {
  _version = version;
  _versionIsSet = YES;
}

- (void) unsetVersion {
  _version = nil;
  _versionIsSet = NO;
}

- (void) setOsVersion: (NSString *) osVersion {
  _osVersion = osVersion;
  _osVersionIsSet = YES;
}

- (void) unsetOsVersion {
  _osVersion = nil;
  _osVersionIsSet = NO;
}

- (void) setActiveAliases: (NSMutableSet<RTAlias> *) activeAliases {
  _activeAliases = activeAliases;
  _activeAliasesIsSet = YES;
}

- (void) unsetActiveAliases {
  _activeAliases = nil;
  _activeAliasesIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          RTId *fieldValue = [[RTId alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.id = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.name = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.manufacturer = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.model = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.version = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 6:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.osVersion = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 7:
        if (fieldType == TTypeSET) {
          SInt32 _size22;
          if (![inProtocol readSetBeginReturningElementType: NULL size: &_size22 error: __thriftError]) return NO;
          NSMutableSet * fieldValue = [[NSMutableSet alloc] initWithCapacity: _size22];
          int _i23;
          for (_i23 = 0; _i23 < _size22; ++_i23)
          {
            NSString * _elem24;
            if (![inProtocol readString:&_elem24 error: __thriftError]) return NO;
            [fieldValue addObject: _elem24];
          }
          if (![inProtocol readSetEnd: __thriftError]) return NO;
          self.activeAliases = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"DeviceInfo" error: __thriftError]) return NO;
  if (_idIsSet) {
    if (_id != nil) {
      if (![outProtocol writeFieldBeginWithName: @"id" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_id write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_nameIsSet) {
    if (_name != nil) {
      if (![outProtocol writeFieldBeginWithName: @"name" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _name error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_manufacturerIsSet) {
    if (_manufacturer != nil) {
      if (![outProtocol writeFieldBeginWithName: @"manufacturer" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeString: _manufacturer error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_modelIsSet) {
    if (_model != nil) {
      if (![outProtocol writeFieldBeginWithName: @"model" type: TTypeSTRING fieldID: 4 error: __thriftError]) return NO;
      if (![outProtocol writeString: _model error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_versionIsSet) {
    if (_version != nil) {
      if (![outProtocol writeFieldBeginWithName: @"version" type: TTypeSTRING fieldID: 5 error: __thriftError]) return NO;
      if (![outProtocol writeString: _version error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_osVersionIsSet) {
    if (_osVersion != nil) {
      if (![outProtocol writeFieldBeginWithName: @"osVersion" type: TTypeSTRING fieldID: 6 error: __thriftError]) return NO;
      if (![outProtocol writeString: _osVersion error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_activeAliasesIsSet) {
    if (_activeAliases != nil) {
      if (![outProtocol writeFieldBeginWithName: @"activeAliases" type: TTypeSET fieldID: 7 error: __thriftError]) return NO;
      {
        if (![outProtocol writeSetBeginWithElementType: TTypeSTRING size: (SInt32)[_activeAliases count] error: __thriftError]) return NO;
        NSEnumerator * _iter25 = [_activeAliases objectEnumerator];
        id obj26;
        while ((obj26 = [_iter25 nextObject]))
        {
          if (![outProtocol writeString: obj26 error: __thriftError]) return NO;
        }
        if (![outProtocol writeSetEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTDeviceInfo("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%@", _id];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", _name];
  [ms appendString: @",manufacturer:"];
  [ms appendFormat: @"\"%@\"", _manufacturer];
  [ms appendString: @",model:"];
  [ms appendFormat: @"\"%@\"", _model];
  [ms appendString: @",version:"];
  [ms appendFormat: @"\"%@\"", _version];
  [ms appendString: @",osVersion:"];
  [ms appendFormat: @"\"%@\"", _osVersion];
  [ms appendString: @",activeAliases:"];
  [ms appendFormat: @"%@", _activeAliases];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RTImage

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithMimeType: (NSString *) mimeType data: (NSData *) data
{
  self = [super init];
  if (self)  {
    _mimeType = mimeType;
    _mimeTypeIsSet = YES;
    _data = data;
    _dataIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"mimeType"])
    {
      _mimeType = [decoder decodeObjectForKey: @"mimeType"];
      _mimeTypeIsSet = YES;
    }
    if ([decoder containsValueForKey: @"data"])
    {
      _data = [decoder decodeObjectForKey: @"data"];
      _dataIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_mimeTypeIsSet)
  {
    [encoder encodeObject: _mimeType forKey: @"mimeType"];
  }
  if (_dataIsSet)
  {
    [encoder encodeObject: _data forKey: @"data"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _mimeTypeIsSet ? 2654435761 : 0;
  if (_mimeTypeIsSet)
  {
    hash = (hash * 31) ^ [_mimeType hash];
  }
  hash = (hash * 31) ^ _dataIsSet ? 2654435761 : 0;
  if (_dataIsSet)
  {
    hash = (hash * 31) ^ [_data hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTImage class]]) {
    return NO;
  }
  RTImage *other = (RTImage *)anObject;
  if ((_mimeTypeIsSet != other->_mimeTypeIsSet) ||
      (_mimeTypeIsSet && ((_mimeType || other->_mimeType) && ![_mimeType isEqual:other->_mimeType]))) {
    return NO;
  }
  if ((_dataIsSet != other->_dataIsSet) ||
      (_dataIsSet && ((_data || other->_data) && ![_data isEqual:other->_data]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTImage * val = [RTImage new];
  val.mimeType = [self.mimeType copy];
  val.data = [self.data copy];
  return val;
}

- (void) setMimeType: (NSString *) mimeType {
  _mimeType = mimeType;
  _mimeTypeIsSet = YES;
}

- (void) unsetMimeType {
  _mimeType = nil;
  _mimeTypeIsSet = NO;
}

- (void) setData: (NSData *) data {
  _data = data;
  _dataIsSet = YES;
}

- (void) unsetData {
  _data = nil;
  _dataIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.mimeType = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSData * fieldValue;
          if (![inProtocol readBinary:&fieldValue error: __thriftError]) return NO;
          self.data = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"Image" error: __thriftError]) return NO;
  if (_mimeTypeIsSet) {
    if (_mimeType != nil) {
      if (![outProtocol writeFieldBeginWithName: @"mimeType" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _mimeType error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_dataIsSet) {
    if (_data != nil) {
      if (![outProtocol writeFieldBeginWithName: @"data" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeBinary: _data error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTImage("];
  [ms appendString: @"mimeType:"];
  [ms appendFormat: @"\"%@\"", _mimeType];
  [ms appendString: @",data:"];
  [ms appendFormat: @"\"%@\"", _data];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RTUserInfo

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithId: (RTId *) id aliases: (RTAliasSet) aliases encryptionCert: (NSData *) encryptionCert signingCert: (NSData *) signingCert avatar: (RTImage *) avatar
{
  self = [super init];
  if (self)  {
    _id = id;
    _idIsSet = YES;
    _aliases = [aliases mutableCopy];
    _aliasesIsSet = YES;
    _encryptionCert = encryptionCert;
    _encryptionCertIsSet = YES;
    _signingCert = signingCert;
    _signingCertIsSet = YES;
    _avatar = avatar;
    _avatarIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"id"])
    {
      _id = [decoder decodeObjectForKey: @"id"];
      _idIsSet = YES;
    }
    if ([decoder containsValueForKey: @"aliases"])
    {
      _aliases = [decoder decodeObjectForKey: @"aliases"];
      _aliasesIsSet = YES;
    }
    if ([decoder containsValueForKey: @"encryptionCert"])
    {
      _encryptionCert = [decoder decodeObjectForKey: @"encryptionCert"];
      _encryptionCertIsSet = YES;
    }
    if ([decoder containsValueForKey: @"signingCert"])
    {
      _signingCert = [decoder decodeObjectForKey: @"signingCert"];
      _signingCertIsSet = YES;
    }
    if ([decoder containsValueForKey: @"avatar"])
    {
      _avatar = [decoder decodeObjectForKey: @"avatar"];
      _avatarIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_idIsSet)
  {
    [encoder encodeObject: _id forKey: @"id"];
  }
  if (_aliasesIsSet)
  {
    [encoder encodeObject: _aliases forKey: @"aliases"];
  }
  if (_encryptionCertIsSet)
  {
    [encoder encodeObject: _encryptionCert forKey: @"encryptionCert"];
  }
  if (_signingCertIsSet)
  {
    [encoder encodeObject: _signingCert forKey: @"signingCert"];
  }
  if (_avatarIsSet)
  {
    [encoder encodeObject: _avatar forKey: @"avatar"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _idIsSet ? 2654435761 : 0;
  if (_idIsSet)
  {
    hash = (hash * 31) ^ [_id hash];
  }
  hash = (hash * 31) ^ _aliasesIsSet ? 2654435761 : 0;
  if (_aliasesIsSet)
  {
    hash = (hash * 31) ^ [_aliases hash];
  }
  hash = (hash * 31) ^ _encryptionCertIsSet ? 2654435761 : 0;
  if (_encryptionCertIsSet)
  {
    hash = (hash * 31) ^ [_encryptionCert hash];
  }
  hash = (hash * 31) ^ _signingCertIsSet ? 2654435761 : 0;
  if (_signingCertIsSet)
  {
    hash = (hash * 31) ^ [_signingCert hash];
  }
  hash = (hash * 31) ^ _avatarIsSet ? 2654435761 : 0;
  if (_avatarIsSet)
  {
    hash = (hash * 31) ^ [_avatar hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTUserInfo class]]) {
    return NO;
  }
  RTUserInfo *other = (RTUserInfo *)anObject;
  if ((_idIsSet != other->_idIsSet) ||
      (_idIsSet && ((_id || other->_id) && ![_id isEqual:other->_id]))) {
    return NO;
  }
  if ((_aliasesIsSet != other->_aliasesIsSet) ||
      (_aliasesIsSet && ((_aliases || other->_aliases) && ![_aliases isEqual:other->_aliases]))) {
    return NO;
  }
  if ((_encryptionCertIsSet != other->_encryptionCertIsSet) ||
      (_encryptionCertIsSet && ((_encryptionCert || other->_encryptionCert) && ![_encryptionCert isEqual:other->_encryptionCert]))) {
    return NO;
  }
  if ((_signingCertIsSet != other->_signingCertIsSet) ||
      (_signingCertIsSet && ((_signingCert || other->_signingCert) && ![_signingCert isEqual:other->_signingCert]))) {
    return NO;
  }
  if ((_avatarIsSet != other->_avatarIsSet) ||
      (_avatarIsSet && ((_avatar || other->_avatar) && ![_avatar isEqual:other->_avatar]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTUserInfo * val = [RTUserInfo new];
  val.id = [self.id copy];
  val.aliases = [self.aliases copy];
  val.encryptionCert = [self.encryptionCert copy];
  val.signingCert = [self.signingCert copy];
  val.avatar = [self.avatar copy];
  return val;
}

- (void) setId: (RTId *) id {
  _id = id;
  _idIsSet = YES;
}

- (void) unsetId {
  _id = nil;
  _idIsSet = NO;
}

- (void) setAliases: (NSMutableSet<RTAlias> *) aliases {
  _aliases = aliases;
  _aliasesIsSet = YES;
}

- (void) unsetAliases {
  _aliases = nil;
  _aliasesIsSet = NO;
}

- (void) setEncryptionCert: (NSData *) encryptionCert {
  _encryptionCert = encryptionCert;
  _encryptionCertIsSet = YES;
}

- (void) unsetEncryptionCert {
  _encryptionCert = nil;
  _encryptionCertIsSet = NO;
}

- (void) setSigningCert: (NSData *) signingCert {
  _signingCert = signingCert;
  _signingCertIsSet = YES;
}

- (void) unsetSigningCert {
  _signingCert = nil;
  _signingCertIsSet = NO;
}

- (void) setAvatar: (RTImage *) avatar {
  _avatar = avatar;
  _avatarIsSet = YES;
}

- (void) unsetAvatar {
  _avatar = nil;
  _avatarIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          RTId *fieldValue = [[RTId alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.id = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSET) {
          SInt32 _size27;
          if (![inProtocol readSetBeginReturningElementType: NULL size: &_size27 error: __thriftError]) return NO;
          NSMutableSet * fieldValue = [[NSMutableSet alloc] initWithCapacity: _size27];
          int _i28;
          for (_i28 = 0; _i28 < _size27; ++_i28)
          {
            NSString * _elem29;
            if (![inProtocol readString:&_elem29 error: __thriftError]) return NO;
            [fieldValue addObject: _elem29];
          }
          if (![inProtocol readSetEnd: __thriftError]) return NO;
          self.aliases = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSData * fieldValue;
          if (![inProtocol readBinary:&fieldValue error: __thriftError]) return NO;
          self.encryptionCert = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRING) {
          NSData * fieldValue;
          if (![inProtocol readBinary:&fieldValue error: __thriftError]) return NO;
          self.signingCert = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeSTRUCT) {
          RTImage *fieldValue = [[RTImage alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.avatar = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"UserInfo" error: __thriftError]) return NO;
  if (_idIsSet) {
    if (_id != nil) {
      if (![outProtocol writeFieldBeginWithName: @"id" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_id write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_aliasesIsSet) {
    if (_aliases != nil) {
      if (![outProtocol writeFieldBeginWithName: @"aliases" type: TTypeSET fieldID: 2 error: __thriftError]) return NO;
      {
        if (![outProtocol writeSetBeginWithElementType: TTypeSTRING size: (SInt32)[_aliases count] error: __thriftError]) return NO;
        NSEnumerator * _iter30 = [_aliases objectEnumerator];
        id obj31;
        while ((obj31 = [_iter30 nextObject]))
        {
          if (![outProtocol writeString: obj31 error: __thriftError]) return NO;
        }
        if (![outProtocol writeSetEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_encryptionCertIsSet) {
    if (_encryptionCert != nil) {
      if (![outProtocol writeFieldBeginWithName: @"encryptionCert" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeBinary: _encryptionCert error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_signingCertIsSet) {
    if (_signingCert != nil) {
      if (![outProtocol writeFieldBeginWithName: @"signingCert" type: TTypeSTRING fieldID: 4 error: __thriftError]) return NO;
      if (![outProtocol writeBinary: _signingCert error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_avatarIsSet) {
    if (_avatar != nil) {
      if (![outProtocol writeFieldBeginWithName: @"avatar" type: TTypeSTRUCT fieldID: 5 error: __thriftError]) return NO;
      if (![_avatar write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTUserInfo("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%@", _id];
  [ms appendString: @",aliases:"];
  [ms appendFormat: @"%@", _aliases];
  [ms appendString: @",encryptionCert:"];
  [ms appendFormat: @"\"%@\"", _encryptionCert];
  [ms appendString: @",signingCert:"];
  [ms appendFormat: @"\"%@\"", _signingCert];
  [ms appendString: @",avatar:"];
  [ms appendFormat: @"%@", _avatar];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RTUserProfile

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithId: (RTId *) id aliases: (RTAliasSet) aliases encryptionCert: (NSData *) encryptionCert signingCert: (NSData *) signingCert devices: (NSArray<RTDeviceInfo *> *) devices avatar: (RTImage *) avatar
{
  self = [super init];
  if (self)  {
    _id = id;
    _idIsSet = YES;
    _aliases = [aliases mutableCopy];
    _aliasesIsSet = YES;
    _encryptionCert = encryptionCert;
    _encryptionCertIsSet = YES;
    _signingCert = signingCert;
    _signingCertIsSet = YES;
    _devices = [devices mutableCopy];
    _devicesIsSet = YES;
    _avatar = avatar;
    _avatarIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"id"])
    {
      _id = [decoder decodeObjectForKey: @"id"];
      _idIsSet = YES;
    }
    if ([decoder containsValueForKey: @"aliases"])
    {
      _aliases = [decoder decodeObjectForKey: @"aliases"];
      _aliasesIsSet = YES;
    }
    if ([decoder containsValueForKey: @"encryptionCert"])
    {
      _encryptionCert = [decoder decodeObjectForKey: @"encryptionCert"];
      _encryptionCertIsSet = YES;
    }
    if ([decoder containsValueForKey: @"signingCert"])
    {
      _signingCert = [decoder decodeObjectForKey: @"signingCert"];
      _signingCertIsSet = YES;
    }
    if ([decoder containsValueForKey: @"devices"])
    {
      _devices = [decoder decodeObjectForKey: @"devices"];
      _devicesIsSet = YES;
    }
    if ([decoder containsValueForKey: @"avatar"])
    {
      _avatar = [decoder decodeObjectForKey: @"avatar"];
      _avatarIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_idIsSet)
  {
    [encoder encodeObject: _id forKey: @"id"];
  }
  if (_aliasesIsSet)
  {
    [encoder encodeObject: _aliases forKey: @"aliases"];
  }
  if (_encryptionCertIsSet)
  {
    [encoder encodeObject: _encryptionCert forKey: @"encryptionCert"];
  }
  if (_signingCertIsSet)
  {
    [encoder encodeObject: _signingCert forKey: @"signingCert"];
  }
  if (_devicesIsSet)
  {
    [encoder encodeObject: _devices forKey: @"devices"];
  }
  if (_avatarIsSet)
  {
    [encoder encodeObject: _avatar forKey: @"avatar"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _idIsSet ? 2654435761 : 0;
  if (_idIsSet)
  {
    hash = (hash * 31) ^ [_id hash];
  }
  hash = (hash * 31) ^ _aliasesIsSet ? 2654435761 : 0;
  if (_aliasesIsSet)
  {
    hash = (hash * 31) ^ [_aliases hash];
  }
  hash = (hash * 31) ^ _encryptionCertIsSet ? 2654435761 : 0;
  if (_encryptionCertIsSet)
  {
    hash = (hash * 31) ^ [_encryptionCert hash];
  }
  hash = (hash * 31) ^ _signingCertIsSet ? 2654435761 : 0;
  if (_signingCertIsSet)
  {
    hash = (hash * 31) ^ [_signingCert hash];
  }
  hash = (hash * 31) ^ _devicesIsSet ? 2654435761 : 0;
  if (_devicesIsSet)
  {
    hash = (hash * 31) ^ [_devices hash];
  }
  hash = (hash * 31) ^ _avatarIsSet ? 2654435761 : 0;
  if (_avatarIsSet)
  {
    hash = (hash * 31) ^ [_avatar hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTUserProfile class]]) {
    return NO;
  }
  RTUserProfile *other = (RTUserProfile *)anObject;
  if ((_idIsSet != other->_idIsSet) ||
      (_idIsSet && ((_id || other->_id) && ![_id isEqual:other->_id]))) {
    return NO;
  }
  if ((_aliasesIsSet != other->_aliasesIsSet) ||
      (_aliasesIsSet && ((_aliases || other->_aliases) && ![_aliases isEqual:other->_aliases]))) {
    return NO;
  }
  if ((_encryptionCertIsSet != other->_encryptionCertIsSet) ||
      (_encryptionCertIsSet && ((_encryptionCert || other->_encryptionCert) && ![_encryptionCert isEqual:other->_encryptionCert]))) {
    return NO;
  }
  if ((_signingCertIsSet != other->_signingCertIsSet) ||
      (_signingCertIsSet && ((_signingCert || other->_signingCert) && ![_signingCert isEqual:other->_signingCert]))) {
    return NO;
  }
  if ((_devicesIsSet != other->_devicesIsSet) ||
      (_devicesIsSet && ((_devices || other->_devices) && ![_devices isEqual:other->_devices]))) {
    return NO;
  }
  if ((_avatarIsSet != other->_avatarIsSet) ||
      (_avatarIsSet && ((_avatar || other->_avatar) && ![_avatar isEqual:other->_avatar]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTUserProfile * val = [RTUserProfile new];
  val.id = [self.id copy];
  val.aliases = [self.aliases copy];
  val.encryptionCert = [self.encryptionCert copy];
  val.signingCert = [self.signingCert copy];
  val.devices = [self.devices copy];
  val.avatar = [self.avatar copy];
  return val;
}

- (void) setId: (RTId *) id {
  _id = id;
  _idIsSet = YES;
}

- (void) unsetId {
  _id = nil;
  _idIsSet = NO;
}

- (void) setAliases: (NSMutableSet<RTAlias> *) aliases {
  _aliases = aliases;
  _aliasesIsSet = YES;
}

- (void) unsetAliases {
  _aliases = nil;
  _aliasesIsSet = NO;
}

- (void) setEncryptionCert: (NSData *) encryptionCert {
  _encryptionCert = encryptionCert;
  _encryptionCertIsSet = YES;
}

- (void) unsetEncryptionCert {
  _encryptionCert = nil;
  _encryptionCertIsSet = NO;
}

- (void) setSigningCert: (NSData *) signingCert {
  _signingCert = signingCert;
  _signingCertIsSet = YES;
}

- (void) unsetSigningCert {
  _signingCert = nil;
  _signingCertIsSet = NO;
}

- (void) setDevices: (NSMutableArray<RTDeviceInfo *> *) devices {
  _devices = devices;
  _devicesIsSet = YES;
}

- (void) unsetDevices {
  _devices = nil;
  _devicesIsSet = NO;
}

- (void) setAvatar: (RTImage *) avatar {
  _avatar = avatar;
  _avatarIsSet = YES;
}

- (void) unsetAvatar {
  _avatar = nil;
  _avatarIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          RTId *fieldValue = [[RTId alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.id = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSET) {
          SInt32 _size32;
          if (![inProtocol readSetBeginReturningElementType: NULL size: &_size32 error: __thriftError]) return NO;
          NSMutableSet * fieldValue = [[NSMutableSet alloc] initWithCapacity: _size32];
          int _i33;
          for (_i33 = 0; _i33 < _size32; ++_i33)
          {
            NSString * _elem34;
            if (![inProtocol readString:&_elem34 error: __thriftError]) return NO;
            [fieldValue addObject: _elem34];
          }
          if (![inProtocol readSetEnd: __thriftError]) return NO;
          self.aliases = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSData * fieldValue;
          if (![inProtocol readBinary:&fieldValue error: __thriftError]) return NO;
          self.encryptionCert = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRING) {
          NSData * fieldValue;
          if (![inProtocol readBinary:&fieldValue error: __thriftError]) return NO;
          self.signingCert = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeLIST) {
          SInt32 _size35;
          if (![inProtocol readListBeginReturningElementType: NULL size: &_size35 error: __thriftError]) return NO;
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size35];
          int _i36;
          for (_i36 = 0; _i36 < _size35; ++_i36)
          {
            RTDeviceInfo *_elem37 = [[RTDeviceInfo alloc] init];
            if (![_elem37 read: inProtocol error: __thriftError]) return NO;
            [fieldValue addObject: _elem37];
          }
          if (![inProtocol readListEnd: __thriftError]) return NO;
          self.devices = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 6:
        if (fieldType == TTypeSTRUCT) {
          RTImage *fieldValue = [[RTImage alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.avatar = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"UserProfile" error: __thriftError]) return NO;
  if (_idIsSet) {
    if (_id != nil) {
      if (![outProtocol writeFieldBeginWithName: @"id" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_id write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_aliasesIsSet) {
    if (_aliases != nil) {
      if (![outProtocol writeFieldBeginWithName: @"aliases" type: TTypeSET fieldID: 2 error: __thriftError]) return NO;
      {
        if (![outProtocol writeSetBeginWithElementType: TTypeSTRING size: (SInt32)[_aliases count] error: __thriftError]) return NO;
        NSEnumerator * _iter38 = [_aliases objectEnumerator];
        id obj39;
        while ((obj39 = [_iter38 nextObject]))
        {
          if (![outProtocol writeString: obj39 error: __thriftError]) return NO;
        }
        if (![outProtocol writeSetEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_encryptionCertIsSet) {
    if (_encryptionCert != nil) {
      if (![outProtocol writeFieldBeginWithName: @"encryptionCert" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeBinary: _encryptionCert error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_signingCertIsSet) {
    if (_signingCert != nil) {
      if (![outProtocol writeFieldBeginWithName: @"signingCert" type: TTypeSTRING fieldID: 4 error: __thriftError]) return NO;
      if (![outProtocol writeBinary: _signingCert error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_devicesIsSet) {
    if (_devices != nil) {
      if (![outProtocol writeFieldBeginWithName: @"devices" type: TTypeLIST fieldID: 5 error: __thriftError]) return NO;
      {
        if (![outProtocol writeListBeginWithElementType: TTypeSTRUCT size: (SInt32)[_devices count] error: __thriftError]) return NO;
        int idx41;
        for (idx41 = 0; idx41 < [_devices count]; idx41++)
        {
          if (![[_devices objectAtIndex: idx41] write: outProtocol error: __thriftError]) return NO;
        }
        if (![outProtocol writeListEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_avatarIsSet) {
    if (_avatar != nil) {
      if (![outProtocol writeFieldBeginWithName: @"avatar" type: TTypeSTRUCT fieldID: 6 error: __thriftError]) return NO;
      if (![_avatar write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTUserProfile("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%@", _id];
  [ms appendString: @",aliases:"];
  [ms appendFormat: @"%@", _aliases];
  [ms appendString: @",encryptionCert:"];
  [ms appendFormat: @"\"%@\"", _encryptionCert];
  [ms appendString: @",signingCert:"];
  [ms appendFormat: @"\"%@\"", _signingCert];
  [ms appendString: @",devices:"];
  [ms appendFormat: @"%@", _devices];
  [ms appendString: @",avatar:"];
  [ms appendFormat: @"%@", _avatar];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RTInvalidUser

- (instancetype) init
{
  return [super initWithDomain: RTMessagesErrorDomain
                          code: RTMessagesErrorInvalidUser
                      userInfo: nil];
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super initWithCoder: decoder];
  if (self)   {
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  [super encodeWithCoder: encoder];
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![super isEqual:anObject]) {
    return NO;
  }

  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTInvalidUser * val = [RTInvalidUser errorWithDomain: self.domain code: self.code userInfo: self.userInfo];
  return val;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"InvalidUser" error: __thriftError]) return NO;
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTInvalidUser("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RTInvalidDevice

- (instancetype) init
{
  return [super initWithDomain: RTMessagesErrorDomain
                          code: RTMessagesErrorInvalidDevice
                      userInfo: nil];
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super initWithCoder: decoder];
  if (self)   {
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  [super encodeWithCoder: encoder];
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![super isEqual:anObject]) {
    return NO;
  }

  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTInvalidDevice * val = [RTInvalidDevice errorWithDomain: self.domain code: self.code userInfo: self.userInfo];
  return val;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"InvalidDevice" error: __thriftError]) return NO;
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTInvalidDevice("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RTInvalidSender

- (instancetype) init
{
  return [super initWithDomain: RTMessagesErrorDomain
                          code: RTMessagesErrorInvalidSender
                      userInfo: nil];
}

- (instancetype) initWithOffender: (RTAlias) offender
{
  self = [self init];
  if (self)  {
    _offender = offender;
    _offenderIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super initWithCoder: decoder];
  if (self)   {
    if ([decoder containsValueForKey: @"offender"])
    {
      _offender = [decoder decodeObjectForKey: @"offender"];
      _offenderIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  [super encodeWithCoder: encoder];
  if (_offenderIsSet)
  {
    [encoder encodeObject: _offender forKey: @"offender"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _offenderIsSet ? 2654435761 : 0;
  if (_offenderIsSet)
  {
    hash = (hash * 31) ^ [_offender hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![super isEqual:anObject]) {
    return NO;
  }

  RTInvalidSender *other = (RTInvalidSender *)anObject;
  if ((_offenderIsSet != other->_offenderIsSet) ||
      (_offenderIsSet && ((_offender || other->_offender) && ![_offender isEqual:other->_offender]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTInvalidSender * val = [RTInvalidSender errorWithDomain: self.domain code: self.code userInfo: self.userInfo];
  val.offender = [self.offender copy];
  return val;
}

- (void) setOffender: (NSString *) offender {
  _offender = offender;
  _offenderIsSet = YES;
}

- (void) unsetOffender {
  _offender = nil;
  _offenderIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.offender = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"InvalidSender" error: __thriftError]) return NO;
  if (_offenderIsSet) {
    if (_offender != nil) {
      if (![outProtocol writeFieldBeginWithName: @"offender" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _offender error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTInvalidSender("];
  [ms appendString: @"offender:"];
  [ms appendFormat: @"\"%@\"", _offender];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RTInvalidRecipient

- (instancetype) init
{
  return [super initWithDomain: RTMessagesErrorDomain
                          code: RTMessagesErrorInvalidRecipient
                      userInfo: nil];
}

- (instancetype) initWithOffender: (RTAlias) offender
{
  self = [self init];
  if (self)  {
    _offender = offender;
    _offenderIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super initWithCoder: decoder];
  if (self)   {
    if ([decoder containsValueForKey: @"offender"])
    {
      _offender = [decoder decodeObjectForKey: @"offender"];
      _offenderIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  [super encodeWithCoder: encoder];
  if (_offenderIsSet)
  {
    [encoder encodeObject: _offender forKey: @"offender"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _offenderIsSet ? 2654435761 : 0;
  if (_offenderIsSet)
  {
    hash = (hash * 31) ^ [_offender hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![super isEqual:anObject]) {
    return NO;
  }

  RTInvalidRecipient *other = (RTInvalidRecipient *)anObject;
  if ((_offenderIsSet != other->_offenderIsSet) ||
      (_offenderIsSet && ((_offender || other->_offender) && ![_offender isEqual:other->_offender]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTInvalidRecipient * val = [RTInvalidRecipient errorWithDomain: self.domain code: self.code userInfo: self.userInfo];
  val.offender = [self.offender copy];
  return val;
}

- (void) setOffender: (NSString *) offender {
  _offender = offender;
  _offenderIsSet = YES;
}

- (void) unsetOffender {
  _offender = nil;
  _offenderIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.offender = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"InvalidRecipient" error: __thriftError]) return NO;
  if (_offenderIsSet) {
    if (_offender != nil) {
      if (![outProtocol writeFieldBeginWithName: @"offender" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _offender error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTInvalidRecipient("];
  [ms appendString: @"offender:"];
  [ms appendFormat: @"\"%@\"", _offender];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RTInvalidAlias

- (instancetype) init
{
  return [super initWithDomain: RTMessagesErrorDomain
                          code: RTMessagesErrorInvalidAlias
                      userInfo: nil];
}

- (instancetype) initWithOffender: (RTAlias) offender
{
  self = [self init];
  if (self)  {
    _offender = offender;
    _offenderIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super initWithCoder: decoder];
  if (self)   {
    if ([decoder containsValueForKey: @"offender"])
    {
      _offender = [decoder decodeObjectForKey: @"offender"];
      _offenderIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  [super encodeWithCoder: encoder];
  if (_offenderIsSet)
  {
    [encoder encodeObject: _offender forKey: @"offender"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _offenderIsSet ? 2654435761 : 0;
  if (_offenderIsSet)
  {
    hash = (hash * 31) ^ [_offender hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![super isEqual:anObject]) {
    return NO;
  }

  RTInvalidAlias *other = (RTInvalidAlias *)anObject;
  if ((_offenderIsSet != other->_offenderIsSet) ||
      (_offenderIsSet && ((_offender || other->_offender) && ![_offender isEqual:other->_offender]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTInvalidAlias * val = [RTInvalidAlias errorWithDomain: self.domain code: self.code userInfo: self.userInfo];
  val.offender = [self.offender copy];
  return val;
}

- (void) setOffender: (NSString *) offender {
  _offender = offender;
  _offenderIsSet = YES;
}

- (void) unsetOffender {
  _offender = nil;
  _offenderIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.offender = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"InvalidAlias" error: __thriftError]) return NO;
  if (_offenderIsSet) {
    if (_offender != nil) {
      if (![outProtocol writeFieldBeginWithName: @"offender" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _offender error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTInvalidAlias("];
  [ms appendString: @"offender:"];
  [ms appendFormat: @"\"%@\"", _offender];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RTInvalidCredentials

- (instancetype) init
{
  return [super initWithDomain: RTMessagesErrorDomain
                          code: RTMessagesErrorInvalidCredentials
                      userInfo: nil];
}

- (instancetype) initWithRecipient: (RTAlias) recipient
{
  self = [self init];
  if (self)  {
    _recipient = recipient;
    _recipientIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super initWithCoder: decoder];
  if (self)   {
    if ([decoder containsValueForKey: @"recipient"])
    {
      _recipient = [decoder decodeObjectForKey: @"recipient"];
      _recipientIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  [super encodeWithCoder: encoder];
  if (_recipientIsSet)
  {
    [encoder encodeObject: _recipient forKey: @"recipient"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _recipientIsSet ? 2654435761 : 0;
  if (_recipientIsSet)
  {
    hash = (hash * 31) ^ [_recipient hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![super isEqual:anObject]) {
    return NO;
  }

  RTInvalidCredentials *other = (RTInvalidCredentials *)anObject;
  if ((_recipientIsSet != other->_recipientIsSet) ||
      (_recipientIsSet && ((_recipient || other->_recipient) && ![_recipient isEqual:other->_recipient]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTInvalidCredentials * val = [RTInvalidCredentials errorWithDomain: self.domain code: self.code userInfo: self.userInfo];
  val.recipient = [self.recipient copy];
  return val;
}

- (void) setRecipient: (NSString *) recipient {
  _recipient = recipient;
  _recipientIsSet = YES;
}

- (void) unsetRecipient {
  _recipient = nil;
  _recipientIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.recipient = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"InvalidCredentials" error: __thriftError]) return NO;
  if (_recipientIsSet) {
    if (_recipient != nil) {
      if (![outProtocol writeFieldBeginWithName: @"recipient" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _recipient error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTInvalidCredentials("];
  [ms appendString: @"recipient:"];
  [ms appendFormat: @"\"%@\"", _recipient];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RTDeviceInUse

- (instancetype) init
{
  return [super initWithDomain: RTMessagesErrorDomain
                          code: RTMessagesErrorDeviceInUse
                      userInfo: nil];
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super initWithCoder: decoder];
  if (self)   {
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  [super encodeWithCoder: encoder];
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![super isEqual:anObject]) {
    return NO;
  }

  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTDeviceInUse * val = [RTDeviceInUse errorWithDomain: self.domain code: self.code userInfo: self.userInfo];
  return val;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"DeviceInUse" error: __thriftError]) return NO;
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTDeviceInUse("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RTMessageUndeliverable

- (instancetype) init
{
  return [super initWithDomain: RTMessagesErrorDomain
                          code: RTMessagesErrorMessageUndeliverable
                      userInfo: nil];
}

- (instancetype) initWithReason: (NSString *) reason
{
  self = [self init];
  if (self)  {
    _reason = reason;
    _reasonIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super initWithCoder: decoder];
  if (self)   {
    if ([decoder containsValueForKey: @"reason"])
    {
      _reason = [decoder decodeObjectForKey: @"reason"];
      _reasonIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  [super encodeWithCoder: encoder];
  if (_reasonIsSet)
  {
    [encoder encodeObject: _reason forKey: @"reason"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _reasonIsSet ? 2654435761 : 0;
  if (_reasonIsSet)
  {
    hash = (hash * 31) ^ [_reason hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![super isEqual:anObject]) {
    return NO;
  }

  RTMessageUndeliverable *other = (RTMessageUndeliverable *)anObject;
  if ((_reasonIsSet != other->_reasonIsSet) ||
      (_reasonIsSet && ((_reason || other->_reason) && ![_reason isEqual:other->_reason]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTMessageUndeliverable * val = [RTMessageUndeliverable errorWithDomain: self.domain code: self.code userInfo: self.userInfo];
  val.reason = [self.reason copy];
  return val;
}

- (void) setReason: (NSString *) reason {
  _reason = reason;
  _reasonIsSet = YES;
}

- (void) unsetReason {
  _reason = nil;
  _reasonIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.reason = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"MessageUndeliverable" error: __thriftError]) return NO;
  if (_reasonIsSet) {
    if (_reason != nil) {
      if (![outProtocol writeFieldBeginWithName: @"reason" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _reason error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTMessageUndeliverable("];
  [ms appendString: @"reason:"];
  [ms appendFormat: @"\"%@\"", _reason];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RTAuthenticatedAlias

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithName: (NSString *) name pin: (NSString *) pin
{
  self = [super init];
  if (self)  {
    _name = name;
    _nameIsSet = YES;
    _pin = pin;
    _pinIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"name"])
    {
      _name = [decoder decodeObjectForKey: @"name"];
      _nameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"pin"])
    {
      _pin = [decoder decodeObjectForKey: @"pin"];
      _pinIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_nameIsSet)
  {
    [encoder encodeObject: _name forKey: @"name"];
  }
  if (_pinIsSet)
  {
    [encoder encodeObject: _pin forKey: @"pin"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _nameIsSet ? 2654435761 : 0;
  if (_nameIsSet)
  {
    hash = (hash * 31) ^ [_name hash];
  }
  hash = (hash * 31) ^ _pinIsSet ? 2654435761 : 0;
  if (_pinIsSet)
  {
    hash = (hash * 31) ^ [_pin hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTAuthenticatedAlias class]]) {
    return NO;
  }
  RTAuthenticatedAlias *other = (RTAuthenticatedAlias *)anObject;
  if ((_nameIsSet != other->_nameIsSet) ||
      (_nameIsSet && ((_name || other->_name) && ![_name isEqual:other->_name]))) {
    return NO;
  }
  if ((_pinIsSet != other->_pinIsSet) ||
      (_pinIsSet && ((_pin || other->_pin) && ![_pin isEqual:other->_pin]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTAuthenticatedAlias * val = [RTAuthenticatedAlias new];
  val.name = [self.name copy];
  val.pin = [self.pin copy];
  return val;
}

- (void) setName: (NSString *) name {
  _name = name;
  _nameIsSet = YES;
}

- (void) unsetName {
  _name = nil;
  _nameIsSet = NO;
}

- (void) setPin: (NSString *) pin {
  _pin = pin;
  _pinIsSet = YES;
}

- (void) unsetPin {
  _pin = nil;
  _pinIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.name = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.pin = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AuthenticatedAlias" error: __thriftError]) return NO;
  if (_nameIsSet) {
    if (_name != nil) {
      if (![outProtocol writeFieldBeginWithName: @"name" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _name error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_pinIsSet) {
    if (_pin != nil) {
      if (![outProtocol writeFieldBeginWithName: @"pin" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _pin error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTAuthenticatedAlias("];
  [ms appendString: @"name:"];
  [ms appendFormat: @"\"%@\"", _name];
  [ms appendString: @",pin:"];
  [ms appendFormat: @"\"%@\"", _pin];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RTAliasInUse

- (instancetype) init
{
  return [super initWithDomain: RTMessagesErrorDomain
                          code: RTMessagesErrorAliasInUse
                      userInfo: nil];
}

- (instancetype) initWithProblemAlias: (RTAlias) problemAlias
{
  self = [self init];
  if (self)  {
    _problemAlias = problemAlias;
    _problemAliasIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super initWithCoder: decoder];
  if (self)   {
    if ([decoder containsValueForKey: @"problemAlias"])
    {
      _problemAlias = [decoder decodeObjectForKey: @"problemAlias"];
      _problemAliasIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  [super encodeWithCoder: encoder];
  if (_problemAliasIsSet)
  {
    [encoder encodeObject: _problemAlias forKey: @"problemAlias"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _problemAliasIsSet ? 2654435761 : 0;
  if (_problemAliasIsSet)
  {
    hash = (hash * 31) ^ [_problemAlias hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![super isEqual:anObject]) {
    return NO;
  }

  RTAliasInUse *other = (RTAliasInUse *)anObject;
  if ((_problemAliasIsSet != other->_problemAliasIsSet) ||
      (_problemAliasIsSet && ((_problemAlias || other->_problemAlias) && ![_problemAlias isEqual:other->_problemAlias]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTAliasInUse * val = [RTAliasInUse errorWithDomain: self.domain code: self.code userInfo: self.userInfo];
  val.problemAlias = [self.problemAlias copy];
  return val;
}

- (void) setProblemAlias: (NSString *) problemAlias {
  _problemAlias = problemAlias;
  _problemAliasIsSet = YES;
}

- (void) unsetProblemAlias {
  _problemAlias = nil;
  _problemAliasIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.problemAlias = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AliasInUse" error: __thriftError]) return NO;
  if (_problemAliasIsSet) {
    if (_problemAlias != nil) {
      if (![outProtocol writeFieldBeginWithName: @"problemAlias" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _problemAlias error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTAliasInUse("];
  [ms appendString: @"problemAlias:"];
  [ms appendFormat: @"\"%@\"", _problemAlias];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RTAliasPinInvalid

- (instancetype) init
{
  return [super initWithDomain: RTMessagesErrorDomain
                          code: RTMessagesErrorAliasPinInvalid
                      userInfo: nil];
}

- (instancetype) initWithProblemAlias: (RTAlias) problemAlias
{
  self = [self init];
  if (self)  {
    _problemAlias = problemAlias;
    _problemAliasIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super initWithCoder: decoder];
  if (self)   {
    if ([decoder containsValueForKey: @"problemAlias"])
    {
      _problemAlias = [decoder decodeObjectForKey: @"problemAlias"];
      _problemAliasIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  [super encodeWithCoder: encoder];
  if (_problemAliasIsSet)
  {
    [encoder encodeObject: _problemAlias forKey: @"problemAlias"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _problemAliasIsSet ? 2654435761 : 0;
  if (_problemAliasIsSet)
  {
    hash = (hash * 31) ^ [_problemAlias hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![super isEqual:anObject]) {
    return NO;
  }

  RTAliasPinInvalid *other = (RTAliasPinInvalid *)anObject;
  if ((_problemAliasIsSet != other->_problemAliasIsSet) ||
      (_problemAliasIsSet && ((_problemAlias || other->_problemAlias) && ![_problemAlias isEqual:other->_problemAlias]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTAliasPinInvalid * val = [RTAliasPinInvalid errorWithDomain: self.domain code: self.code userInfo: self.userInfo];
  val.problemAlias = [self.problemAlias copy];
  return val;
}

- (void) setProblemAlias: (NSString *) problemAlias {
  _problemAlias = problemAlias;
  _problemAliasIsSet = YES;
}

- (void) unsetProblemAlias {
  _problemAlias = nil;
  _problemAliasIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.problemAlias = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AliasPinInvalid" error: __thriftError]) return NO;
  if (_problemAliasIsSet) {
    if (_problemAlias != nil) {
      if (![outProtocol writeFieldBeginWithName: @"problemAlias" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _problemAlias error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTAliasPinInvalid("];
  [ms appendString: @"problemAlias:"];
  [ms appendFormat: @"\"%@\"", _problemAlias];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RTAliasNotAuthenticated

- (instancetype) init
{
  return [super initWithDomain: RTMessagesErrorDomain
                          code: RTMessagesErrorAliasNotAuthenticated
                      userInfo: nil];
}

- (instancetype) initWithProblemAlias: (RTAlias) problemAlias
{
  self = [self init];
  if (self)  {
    _problemAlias = problemAlias;
    _problemAliasIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super initWithCoder: decoder];
  if (self)   {
    if ([decoder containsValueForKey: @"problemAlias"])
    {
      _problemAlias = [decoder decodeObjectForKey: @"problemAlias"];
      _problemAliasIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  [super encodeWithCoder: encoder];
  if (_problemAliasIsSet)
  {
    [encoder encodeObject: _problemAlias forKey: @"problemAlias"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _problemAliasIsSet ? 2654435761 : 0;
  if (_problemAliasIsSet)
  {
    hash = (hash * 31) ^ [_problemAlias hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![super isEqual:anObject]) {
    return NO;
  }

  RTAliasNotAuthenticated *other = (RTAliasNotAuthenticated *)anObject;
  if ((_problemAliasIsSet != other->_problemAliasIsSet) ||
      (_problemAliasIsSet && ((_problemAlias || other->_problemAlias) && ![_problemAlias isEqual:other->_problemAlias]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTAliasNotAuthenticated * val = [RTAliasNotAuthenticated errorWithDomain: self.domain code: self.code userInfo: self.userInfo];
  val.problemAlias = [self.problemAlias copy];
  return val;
}

- (void) setProblemAlias: (NSString *) problemAlias {
  _problemAlias = problemAlias;
  _problemAliasIsSet = YES;
}

- (void) unsetProblemAlias {
  _problemAlias = nil;
  _problemAliasIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.problemAlias = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AliasNotAuthenticated" error: __thriftError]) return NO;
  if (_problemAliasIsSet) {
    if (_problemAlias != nil) {
      if (![outProtocol writeFieldBeginWithName: @"problemAlias" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _problemAlias error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTAliasNotAuthenticated("];
  [ms appendString: @"problemAlias:"];
  [ms appendFormat: @"\"%@\"", _problemAlias];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RTUnableToAuthenticate

- (instancetype) init
{
  return [super initWithDomain: RTMessagesErrorDomain
                          code: RTMessagesErrorUnableToAuthenticate
                      userInfo: nil];
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super initWithCoder: decoder];
  if (self)   {
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  [super encodeWithCoder: encoder];
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![super isEqual:anObject]) {
    return NO;
  }

  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTUnableToAuthenticate * val = [RTUnableToAuthenticate errorWithDomain: self.domain code: self.code userInfo: self.userInfo];
  return val;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"UnableToAuthenticate" error: __thriftError]) return NO;
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTUnableToAuthenticate("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RTSignInDisallowed

- (instancetype) init
{
  return [super initWithDomain: RTMessagesErrorDomain
                          code: RTMessagesErrorSignInDisallowed
                      userInfo: nil];
}

- (instancetype) initWithMessage: (NSString *) message
{
  self = [self init];
  if (self)  {
    _message = message;
    _messageIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super initWithCoder: decoder];
  if (self)   {
    if ([decoder containsValueForKey: @"message"])
    {
      _message = [decoder decodeObjectForKey: @"message"];
      _messageIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  [super encodeWithCoder: encoder];
  if (_messageIsSet)
  {
    [encoder encodeObject: _message forKey: @"message"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _messageIsSet ? 2654435761 : 0;
  if (_messageIsSet)
  {
    hash = (hash * 31) ^ [_message hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![super isEqual:anObject]) {
    return NO;
  }

  RTSignInDisallowed *other = (RTSignInDisallowed *)anObject;
  if ((_messageIsSet != other->_messageIsSet) ||
      (_messageIsSet && ((_message || other->_message) && ![_message isEqual:other->_message]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTSignInDisallowed * val = [RTSignInDisallowed errorWithDomain: self.domain code: self.code userInfo: self.userInfo];
  val.message = [self.message copy];
  return val;
}

- (void) setMessage: (NSString *) message {
  _message = message;
  _messageIsSet = YES;
}

- (void) unsetMessage {
  _message = nil;
  _messageIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.message = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"SignInDisallowed" error: __thriftError]) return NO;
  if (_messageIsSet) {
    if (_message != nil) {
      if (![outProtocol writeFieldBeginWithName: @"message" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _message error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTSignInDisallowed("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", _message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RTInvite

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithBodyText: (NSString *) bodyText bodyHtml: (NSString *) bodyHtml subject: (NSString *) subject
{
  self = [super init];
  if (self)  {
    _bodyText = bodyText;
    _bodyTextIsSet = YES;
    _bodyHtml = bodyHtml;
    _bodyHtmlIsSet = YES;
    _subject = subject;
    _subjectIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"bodyText"])
    {
      _bodyText = [decoder decodeObjectForKey: @"bodyText"];
      _bodyTextIsSet = YES;
    }
    if ([decoder containsValueForKey: @"bodyHtml"])
    {
      _bodyHtml = [decoder decodeObjectForKey: @"bodyHtml"];
      _bodyHtmlIsSet = YES;
    }
    if ([decoder containsValueForKey: @"subject"])
    {
      _subject = [decoder decodeObjectForKey: @"subject"];
      _subjectIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_bodyTextIsSet)
  {
    [encoder encodeObject: _bodyText forKey: @"bodyText"];
  }
  if (_bodyHtmlIsSet)
  {
    [encoder encodeObject: _bodyHtml forKey: @"bodyHtml"];
  }
  if (_subjectIsSet)
  {
    [encoder encodeObject: _subject forKey: @"subject"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _bodyTextIsSet ? 2654435761 : 0;
  if (_bodyTextIsSet)
  {
    hash = (hash * 31) ^ [_bodyText hash];
  }
  hash = (hash * 31) ^ _bodyHtmlIsSet ? 2654435761 : 0;
  if (_bodyHtmlIsSet)
  {
    hash = (hash * 31) ^ [_bodyHtml hash];
  }
  hash = (hash * 31) ^ _subjectIsSet ? 2654435761 : 0;
  if (_subjectIsSet)
  {
    hash = (hash * 31) ^ [_subject hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTInvite class]]) {
    return NO;
  }
  RTInvite *other = (RTInvite *)anObject;
  if ((_bodyTextIsSet != other->_bodyTextIsSet) ||
      (_bodyTextIsSet && ((_bodyText || other->_bodyText) && ![_bodyText isEqual:other->_bodyText]))) {
    return NO;
  }
  if ((_bodyHtmlIsSet != other->_bodyHtmlIsSet) ||
      (_bodyHtmlIsSet && ((_bodyHtml || other->_bodyHtml) && ![_bodyHtml isEqual:other->_bodyHtml]))) {
    return NO;
  }
  if ((_subjectIsSet != other->_subjectIsSet) ||
      (_subjectIsSet && ((_subject || other->_subject) && ![_subject isEqual:other->_subject]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTInvite * val = [RTInvite new];
  val.bodyText = [self.bodyText copy];
  val.bodyHtml = [self.bodyHtml copy];
  val.subject = [self.subject copy];
  return val;
}

- (void) setBodyText: (NSString *) bodyText {
  _bodyText = bodyText;
  _bodyTextIsSet = YES;
}

- (void) unsetBodyText {
  _bodyText = nil;
  _bodyTextIsSet = NO;
}

- (void) setBodyHtml: (NSString *) bodyHtml {
  _bodyHtml = bodyHtml;
  _bodyHtmlIsSet = YES;
}

- (void) unsetBodyHtml {
  _bodyHtml = nil;
  _bodyHtmlIsSet = NO;
}

- (void) setSubject: (NSString *) subject {
  _subject = subject;
  _subjectIsSet = YES;
}

- (void) unsetSubject {
  _subject = nil;
  _subjectIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.bodyText = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.bodyHtml = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.subject = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"Invite" error: __thriftError]) return NO;
  if (_bodyTextIsSet) {
    if (_bodyText != nil) {
      if (![outProtocol writeFieldBeginWithName: @"bodyText" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _bodyText error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_bodyHtmlIsSet) {
    if (_bodyHtml != nil) {
      if (![outProtocol writeFieldBeginWithName: @"bodyHtml" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _bodyHtml error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_subjectIsSet) {
    if (_subject != nil) {
      if (![outProtocol writeFieldBeginWithName: @"subject" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeString: _subject error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  if (!_bodyTextIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"bodyText"}];
    }
  }
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTInvite("];
  [ms appendString: @"bodyText:"];
  [ms appendFormat: @"\"%@\"", _bodyText];
  [ms appendString: @",bodyHtml:"];
  [ms appendFormat: @"\"%@\"", _bodyHtml];
  [ms appendString: @",subject:"];
  [ms appendFormat: @"\"%@\"", _subject];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RTAliasAlreadyInvited

- (instancetype) init
{
  return [super initWithDomain: RTMessagesErrorDomain
                          code: RTMessagesErrorAliasAlreadyInvited
                      userInfo: nil];
}

- (instancetype) initWithProblemAlias: (NSString *) problemAlias
{
  self = [self init];
  if (self)  {
    _problemAlias = problemAlias;
    _problemAliasIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super initWithCoder: decoder];
  if (self)   {
    if ([decoder containsValueForKey: @"problemAlias"])
    {
      _problemAlias = [decoder decodeObjectForKey: @"problemAlias"];
      _problemAliasIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  [super encodeWithCoder: encoder];
  if (_problemAliasIsSet)
  {
    [encoder encodeObject: _problemAlias forKey: @"problemAlias"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _problemAliasIsSet ? 2654435761 : 0;
  if (_problemAliasIsSet)
  {
    hash = (hash * 31) ^ [_problemAlias hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![super isEqual:anObject]) {
    return NO;
  }

  RTAliasAlreadyInvited *other = (RTAliasAlreadyInvited *)anObject;
  if ((_problemAliasIsSet != other->_problemAliasIsSet) ||
      (_problemAliasIsSet && ((_problemAlias || other->_problemAlias) && ![_problemAlias isEqual:other->_problemAlias]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTAliasAlreadyInvited * val = [RTAliasAlreadyInvited errorWithDomain: self.domain code: self.code userInfo: self.userInfo];
  val.problemAlias = [self.problemAlias copy];
  return val;
}

- (void) setProblemAlias: (NSString *) problemAlias {
  _problemAlias = problemAlias;
  _problemAliasIsSet = YES;
}

- (void) unsetProblemAlias {
  _problemAlias = nil;
  _problemAliasIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.problemAlias = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AliasAlreadyInvited" error: __thriftError]) return NO;
  if (_problemAliasIsSet) {
    if (_problemAlias != nil) {
      if (![outProtocol writeFieldBeginWithName: @"problemAlias" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _problemAlias error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTAliasAlreadyInvited("];
  [ms appendString: @"problemAlias:"];
  [ms appendFormat: @"\"%@\"", _problemAlias];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RTCertificateSet

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithEncryptionCert: (NSData *) encryptionCert signingCert: (NSData *) signingCert
{
  self = [super init];
  if (self)  {
    _encryptionCert = encryptionCert;
    _encryptionCertIsSet = YES;
    _signingCert = signingCert;
    _signingCertIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"encryptionCert"])
    {
      _encryptionCert = [decoder decodeObjectForKey: @"encryptionCert"];
      _encryptionCertIsSet = YES;
    }
    if ([decoder containsValueForKey: @"signingCert"])
    {
      _signingCert = [decoder decodeObjectForKey: @"signingCert"];
      _signingCertIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_encryptionCertIsSet)
  {
    [encoder encodeObject: _encryptionCert forKey: @"encryptionCert"];
  }
  if (_signingCertIsSet)
  {
    [encoder encodeObject: _signingCert forKey: @"signingCert"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _encryptionCertIsSet ? 2654435761 : 0;
  if (_encryptionCertIsSet)
  {
    hash = (hash * 31) ^ [_encryptionCert hash];
  }
  hash = (hash * 31) ^ _signingCertIsSet ? 2654435761 : 0;
  if (_signingCertIsSet)
  {
    hash = (hash * 31) ^ [_signingCert hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTCertificateSet class]]) {
    return NO;
  }
  RTCertificateSet *other = (RTCertificateSet *)anObject;
  if ((_encryptionCertIsSet != other->_encryptionCertIsSet) ||
      (_encryptionCertIsSet && ((_encryptionCert || other->_encryptionCert) && ![_encryptionCert isEqual:other->_encryptionCert]))) {
    return NO;
  }
  if ((_signingCertIsSet != other->_signingCertIsSet) ||
      (_signingCertIsSet && ((_signingCert || other->_signingCert) && ![_signingCert isEqual:other->_signingCert]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTCertificateSet * val = [RTCertificateSet new];
  val.encryptionCert = [self.encryptionCert copy];
  val.signingCert = [self.signingCert copy];
  return val;
}

- (void) setEncryptionCert: (NSData *) encryptionCert {
  _encryptionCert = encryptionCert;
  _encryptionCertIsSet = YES;
}

- (void) unsetEncryptionCert {
  _encryptionCert = nil;
  _encryptionCertIsSet = NO;
}

- (void) setSigningCert: (NSData *) signingCert {
  _signingCert = signingCert;
  _signingCertIsSet = YES;
}

- (void) unsetSigningCert {
  _signingCert = nil;
  _signingCertIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSData * fieldValue;
          if (![inProtocol readBinary:&fieldValue error: __thriftError]) return NO;
          self.encryptionCert = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSData * fieldValue;
          if (![inProtocol readBinary:&fieldValue error: __thriftError]) return NO;
          self.signingCert = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"CertificateSet" error: __thriftError]) return NO;
  if (_encryptionCertIsSet) {
    if (_encryptionCert != nil) {
      if (![outProtocol writeFieldBeginWithName: @"encryptionCert" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeBinary: _encryptionCert error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_signingCertIsSet) {
    if (_signingCert != nil) {
      if (![outProtocol writeFieldBeginWithName: @"signingCert" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeBinary: _signingCert error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTCertificateSet("];
  [ms appendString: @"encryptionCert:"];
  [ms appendFormat: @"\"%@\"", _encryptionCert];
  [ms appendString: @",signingCert:"];
  [ms appendFormat: @"\"%@\"", _signingCert];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RTLocation

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithTitle: (NSString *) title longitude: (double) longitude latitude: (double) latitude
{
  self = [super init];
  if (self)  {
    _title = title;
    _titleIsSet = YES;
    _longitude = longitude;
    _longitudeIsSet = YES;
    _latitude = latitude;
    _latitudeIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"title"])
    {
      _title = [decoder decodeObjectForKey: @"title"];
      _titleIsSet = YES;
    }
    if ([decoder containsValueForKey: @"longitude"])
    {
      _longitude = [decoder decodeDoubleForKey: @"longitude"];
      _longitudeIsSet = YES;
    }
    if ([decoder containsValueForKey: @"latitude"])
    {
      _latitude = [decoder decodeDoubleForKey: @"latitude"];
      _latitudeIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_titleIsSet)
  {
    [encoder encodeObject: _title forKey: @"title"];
  }
  if (_longitudeIsSet)
  {
    [encoder encodeDouble: _longitude forKey: @"longitude"];
  }
  if (_latitudeIsSet)
  {
    [encoder encodeDouble: _latitude forKey: @"latitude"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _titleIsSet ? 2654435761 : 0;
  if (_titleIsSet)
  {
    hash = (hash * 31) ^ [_title hash];
  }
  hash = (hash * 31) ^ _longitudeIsSet ? 2654435761 : 0;
  if (_longitudeIsSet)
  {
    hash = (hash * 31) ^ [@(_longitude) hash];
  }
  hash = (hash * 31) ^ _latitudeIsSet ? 2654435761 : 0;
  if (_latitudeIsSet)
  {
    hash = (hash * 31) ^ [@(_latitude) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTLocation class]]) {
    return NO;
  }
  RTLocation *other = (RTLocation *)anObject;
  if ((_titleIsSet != other->_titleIsSet) ||
      (_titleIsSet && ((_title || other->_title) && ![_title isEqual:other->_title]))) {
    return NO;
  }
  if ((_longitudeIsSet != other->_longitudeIsSet) ||
      (_longitudeIsSet && (_longitude != other->_longitude))) {
    return NO;
  }
  if ((_latitudeIsSet != other->_latitudeIsSet) ||
      (_latitudeIsSet && (_latitude != other->_latitude))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTLocation * val = [RTLocation new];
  val.title = [self.title copy];
  val.longitude = self.longitude;
  val.latitude = self.latitude;
  return val;
}

- (void) setTitle: (NSString *) title {
  _title = title;
  _titleIsSet = YES;
}

- (void) unsetTitle {
  _title = nil;
  _titleIsSet = NO;
}

- (void) setLongitude: (double) longitude {
  _longitude = longitude;
  _longitudeIsSet = YES;
}

- (void) unsetLongitude {
  _longitudeIsSet = NO;
}

- (void) setLatitude: (double) latitude {
  _latitude = latitude;
  _latitudeIsSet = YES;
}

- (void) unsetLatitude {
  _latitudeIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.title = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeDOUBLE) {
          double fieldValue;
          if (![inProtocol readDouble:&fieldValue error: __thriftError]) return NO;
          self.longitude = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeDOUBLE) {
          double fieldValue;
          if (![inProtocol readDouble:&fieldValue error: __thriftError]) return NO;
          self.latitude = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"Location" error: __thriftError]) return NO;
  if (_titleIsSet) {
    if (_title != nil) {
      if (![outProtocol writeFieldBeginWithName: @"title" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _title error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_longitudeIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"longitude" type: TTypeDOUBLE fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeDouble: _longitude error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_latitudeIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"latitude" type: TTypeDOUBLE fieldID: 3 error: __thriftError]) return NO;
    if (![outProtocol writeDouble: _latitude error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTLocation("];
  [ms appendString: @"title:"];
  [ms appendFormat: @"\"%@\"", _title];
  [ms appendString: @",longitude:"];
  [ms appendFormat: @"%f", _longitude];
  [ms appendString: @",latitude:"];
  [ms appendFormat: @"%f", _latitude];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RTConference

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithCallingDeviceId: (RTId *) callingDeviceId status: (RTConferenceStatus) status message: (NSString *) message
{
  self = [super init];
  if (self)  {
    _callingDeviceId = callingDeviceId;
    _callingDeviceIdIsSet = YES;
    _status = status;
    _statusIsSet = YES;
    _message = message;
    _messageIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"callingDeviceId"])
    {
      _callingDeviceId = [decoder decodeObjectForKey: @"callingDeviceId"];
      _callingDeviceIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"status"])
    {
      _status = [decoder decodeIntForKey: @"status"];
      _statusIsSet = YES;
    }
    if ([decoder containsValueForKey: @"message"])
    {
      _message = [decoder decodeObjectForKey: @"message"];
      _messageIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_callingDeviceIdIsSet)
  {
    [encoder encodeObject: _callingDeviceId forKey: @"callingDeviceId"];
  }
  if (_statusIsSet)
  {
    [encoder encodeInt: _status forKey: @"status"];
  }
  if (_messageIsSet)
  {
    [encoder encodeObject: _message forKey: @"message"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _callingDeviceIdIsSet ? 2654435761 : 0;
  if (_callingDeviceIdIsSet)
  {
    hash = (hash * 31) ^ [_callingDeviceId hash];
  }
  hash = (hash * 31) ^ _statusIsSet ? 2654435761 : 0;
  if (_statusIsSet)
  {
    hash = (hash * 31) ^ [@(_status) hash];
  }
  hash = (hash * 31) ^ _messageIsSet ? 2654435761 : 0;
  if (_messageIsSet)
  {
    hash = (hash * 31) ^ [_message hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTConference class]]) {
    return NO;
  }
  RTConference *other = (RTConference *)anObject;
  if ((_callingDeviceIdIsSet != other->_callingDeviceIdIsSet) ||
      (_callingDeviceIdIsSet && ((_callingDeviceId || other->_callingDeviceId) && ![_callingDeviceId isEqual:other->_callingDeviceId]))) {
    return NO;
  }
  if ((_statusIsSet != other->_statusIsSet) ||
      (_statusIsSet && (_status != other->_status))) {
    return NO;
  }
  if ((_messageIsSet != other->_messageIsSet) ||
      (_messageIsSet && ((_message || other->_message) && ![_message isEqual:other->_message]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTConference * val = [RTConference new];
  val.callingDeviceId = [self.callingDeviceId copy];
  val.status = self.status;
  val.message = [self.message copy];
  return val;
}

- (void) setCallingDeviceId: (RTId *) callingDeviceId {
  _callingDeviceId = callingDeviceId;
  _callingDeviceIdIsSet = YES;
}

- (void) unsetCallingDeviceId {
  _callingDeviceId = nil;
  _callingDeviceIdIsSet = NO;
}

- (void) setStatus: (RTConferenceStatus) status {
  _status = status;
  _statusIsSet = YES;
}

- (void) unsetStatus {
  _statusIsSet = NO;
}

- (void) setMessage: (NSString *) message {
  _message = message;
  _messageIsSet = YES;
}

- (void) unsetMessage {
  _message = nil;
  _messageIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          RTId *fieldValue = [[RTId alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.callingDeviceId = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeI32) {
          RTConferenceStatus fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.status = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.message = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"Conference" error: __thriftError]) return NO;
  if (_callingDeviceIdIsSet) {
    if (_callingDeviceId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"callingDeviceId" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_callingDeviceId write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_statusIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"status" type: TTypeI32 fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _status error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_messageIsSet) {
    if (_message != nil) {
      if (![outProtocol writeFieldBeginWithName: @"message" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeString: _message error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  if (!_callingDeviceIdIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"callingDeviceId"}];
    }
  }
  if (!_statusIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"status"}];
    }
  }
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTConference("];
  [ms appendString: @"callingDeviceId:"];
  [ms appendFormat: @"%@", _callingDeviceId];
  [ms appendString: @",status:"];
  [ms appendFormat: @"%i", (int)_status];
  [ms appendString: @",message:"];
  [ms appendFormat: @"\"%@\"", _message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RTAuthorizeRequest

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithDeviceId: (RTId *) deviceId deviceName: (NSString *) deviceName deviceEncryptionCert: (NSData *) deviceEncryptionCert deviceSigningCert: (NSData *) deviceSigningCert requestor: (NSString *) requestor
{
  self = [super init];
  if (self)  {
    _deviceId = deviceId;
    _deviceIdIsSet = YES;
    _deviceName = deviceName;
    _deviceNameIsSet = YES;
    _deviceEncryptionCert = deviceEncryptionCert;
    _deviceEncryptionCertIsSet = YES;
    _deviceSigningCert = deviceSigningCert;
    _deviceSigningCertIsSet = YES;
    _requestor = requestor;
    _requestorIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"deviceId"])
    {
      _deviceId = [decoder decodeObjectForKey: @"deviceId"];
      _deviceIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"deviceName"])
    {
      _deviceName = [decoder decodeObjectForKey: @"deviceName"];
      _deviceNameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"deviceEncryptionCert"])
    {
      _deviceEncryptionCert = [decoder decodeObjectForKey: @"deviceEncryptionCert"];
      _deviceEncryptionCertIsSet = YES;
    }
    if ([decoder containsValueForKey: @"deviceSigningCert"])
    {
      _deviceSigningCert = [decoder decodeObjectForKey: @"deviceSigningCert"];
      _deviceSigningCertIsSet = YES;
    }
    if ([decoder containsValueForKey: @"requestor"])
    {
      _requestor = [decoder decodeObjectForKey: @"requestor"];
      _requestorIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_deviceIdIsSet)
  {
    [encoder encodeObject: _deviceId forKey: @"deviceId"];
  }
  if (_deviceNameIsSet)
  {
    [encoder encodeObject: _deviceName forKey: @"deviceName"];
  }
  if (_deviceEncryptionCertIsSet)
  {
    [encoder encodeObject: _deviceEncryptionCert forKey: @"deviceEncryptionCert"];
  }
  if (_deviceSigningCertIsSet)
  {
    [encoder encodeObject: _deviceSigningCert forKey: @"deviceSigningCert"];
  }
  if (_requestorIsSet)
  {
    [encoder encodeObject: _requestor forKey: @"requestor"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _deviceIdIsSet ? 2654435761 : 0;
  if (_deviceIdIsSet)
  {
    hash = (hash * 31) ^ [_deviceId hash];
  }
  hash = (hash * 31) ^ _deviceNameIsSet ? 2654435761 : 0;
  if (_deviceNameIsSet)
  {
    hash = (hash * 31) ^ [_deviceName hash];
  }
  hash = (hash * 31) ^ _deviceEncryptionCertIsSet ? 2654435761 : 0;
  if (_deviceEncryptionCertIsSet)
  {
    hash = (hash * 31) ^ [_deviceEncryptionCert hash];
  }
  hash = (hash * 31) ^ _deviceSigningCertIsSet ? 2654435761 : 0;
  if (_deviceSigningCertIsSet)
  {
    hash = (hash * 31) ^ [_deviceSigningCert hash];
  }
  hash = (hash * 31) ^ _requestorIsSet ? 2654435761 : 0;
  if (_requestorIsSet)
  {
    hash = (hash * 31) ^ [_requestor hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTAuthorizeRequest class]]) {
    return NO;
  }
  RTAuthorizeRequest *other = (RTAuthorizeRequest *)anObject;
  if ((_deviceIdIsSet != other->_deviceIdIsSet) ||
      (_deviceIdIsSet && ((_deviceId || other->_deviceId) && ![_deviceId isEqual:other->_deviceId]))) {
    return NO;
  }
  if ((_deviceNameIsSet != other->_deviceNameIsSet) ||
      (_deviceNameIsSet && ((_deviceName || other->_deviceName) && ![_deviceName isEqual:other->_deviceName]))) {
    return NO;
  }
  if ((_deviceEncryptionCertIsSet != other->_deviceEncryptionCertIsSet) ||
      (_deviceEncryptionCertIsSet && ((_deviceEncryptionCert || other->_deviceEncryptionCert) && ![_deviceEncryptionCert isEqual:other->_deviceEncryptionCert]))) {
    return NO;
  }
  if ((_deviceSigningCertIsSet != other->_deviceSigningCertIsSet) ||
      (_deviceSigningCertIsSet && ((_deviceSigningCert || other->_deviceSigningCert) && ![_deviceSigningCert isEqual:other->_deviceSigningCert]))) {
    return NO;
  }
  if ((_requestorIsSet != other->_requestorIsSet) ||
      (_requestorIsSet && ((_requestor || other->_requestor) && ![_requestor isEqual:other->_requestor]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTAuthorizeRequest * val = [RTAuthorizeRequest new];
  val.deviceId = [self.deviceId copy];
  val.deviceName = [self.deviceName copy];
  val.deviceEncryptionCert = [self.deviceEncryptionCert copy];
  val.deviceSigningCert = [self.deviceSigningCert copy];
  val.requestor = [self.requestor copy];
  return val;
}

- (void) setDeviceId: (RTId *) deviceId {
  _deviceId = deviceId;
  _deviceIdIsSet = YES;
}

- (void) unsetDeviceId {
  _deviceId = nil;
  _deviceIdIsSet = NO;
}

- (void) setDeviceName: (NSString *) deviceName {
  _deviceName = deviceName;
  _deviceNameIsSet = YES;
}

- (void) unsetDeviceName {
  _deviceName = nil;
  _deviceNameIsSet = NO;
}

- (void) setDeviceEncryptionCert: (NSData *) deviceEncryptionCert {
  _deviceEncryptionCert = deviceEncryptionCert;
  _deviceEncryptionCertIsSet = YES;
}

- (void) unsetDeviceEncryptionCert {
  _deviceEncryptionCert = nil;
  _deviceEncryptionCertIsSet = NO;
}

- (void) setDeviceSigningCert: (NSData *) deviceSigningCert {
  _deviceSigningCert = deviceSigningCert;
  _deviceSigningCertIsSet = YES;
}

- (void) unsetDeviceSigningCert {
  _deviceSigningCert = nil;
  _deviceSigningCertIsSet = NO;
}

- (void) setRequestor: (NSString *) requestor {
  _requestor = requestor;
  _requestorIsSet = YES;
}

- (void) unsetRequestor {
  _requestor = nil;
  _requestorIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          RTId *fieldValue = [[RTId alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.deviceId = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.deviceName = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSData * fieldValue;
          if (![inProtocol readBinary:&fieldValue error: __thriftError]) return NO;
          self.deviceEncryptionCert = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRING) {
          NSData * fieldValue;
          if (![inProtocol readBinary:&fieldValue error: __thriftError]) return NO;
          self.deviceSigningCert = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.requestor = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"AuthorizeRequest" error: __thriftError]) return NO;
  if (_deviceIdIsSet) {
    if (_deviceId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"deviceId" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_deviceId write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_deviceNameIsSet) {
    if (_deviceName != nil) {
      if (![outProtocol writeFieldBeginWithName: @"deviceName" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _deviceName error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_deviceEncryptionCertIsSet) {
    if (_deviceEncryptionCert != nil) {
      if (![outProtocol writeFieldBeginWithName: @"deviceEncryptionCert" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeBinary: _deviceEncryptionCert error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_deviceSigningCertIsSet) {
    if (_deviceSigningCert != nil) {
      if (![outProtocol writeFieldBeginWithName: @"deviceSigningCert" type: TTypeSTRING fieldID: 4 error: __thriftError]) return NO;
      if (![outProtocol writeBinary: _deviceSigningCert error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_requestorIsSet) {
    if (_requestor != nil) {
      if (![outProtocol writeFieldBeginWithName: @"requestor" type: TTypeSTRING fieldID: 5 error: __thriftError]) return NO;
      if (![outProtocol writeString: _requestor error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTAuthorizeRequest("];
  [ms appendString: @"deviceId:"];
  [ms appendFormat: @"%@", _deviceId];
  [ms appendString: @",deviceName:"];
  [ms appendFormat: @"\"%@\"", _deviceName];
  [ms appendString: @",deviceEncryptionCert:"];
  [ms appendFormat: @"\"%@\"", _deviceEncryptionCert];
  [ms appendString: @",deviceSigningCert:"];
  [ms appendFormat: @"\"%@\"", _deviceSigningCert];
  [ms appendString: @",requestor:"];
  [ms appendFormat: @"\"%@\"", _requestor];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RTKeySet

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithEncryptionKeyPair: (NSData *) encryptionKeyPair signingKeyPair: (NSData *) signingKeyPair
{
  self = [super init];
  if (self)  {
    _encryptionKeyPair = encryptionKeyPair;
    _encryptionKeyPairIsSet = YES;
    _signingKeyPair = signingKeyPair;
    _signingKeyPairIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"encryptionKeyPair"])
    {
      _encryptionKeyPair = [decoder decodeObjectForKey: @"encryptionKeyPair"];
      _encryptionKeyPairIsSet = YES;
    }
    if ([decoder containsValueForKey: @"signingKeyPair"])
    {
      _signingKeyPair = [decoder decodeObjectForKey: @"signingKeyPair"];
      _signingKeyPairIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_encryptionKeyPairIsSet)
  {
    [encoder encodeObject: _encryptionKeyPair forKey: @"encryptionKeyPair"];
  }
  if (_signingKeyPairIsSet)
  {
    [encoder encodeObject: _signingKeyPair forKey: @"signingKeyPair"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _encryptionKeyPairIsSet ? 2654435761 : 0;
  if (_encryptionKeyPairIsSet)
  {
    hash = (hash * 31) ^ [_encryptionKeyPair hash];
  }
  hash = (hash * 31) ^ _signingKeyPairIsSet ? 2654435761 : 0;
  if (_signingKeyPairIsSet)
  {
    hash = (hash * 31) ^ [_signingKeyPair hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTKeySet class]]) {
    return NO;
  }
  RTKeySet *other = (RTKeySet *)anObject;
  if ((_encryptionKeyPairIsSet != other->_encryptionKeyPairIsSet) ||
      (_encryptionKeyPairIsSet && ((_encryptionKeyPair || other->_encryptionKeyPair) && ![_encryptionKeyPair isEqual:other->_encryptionKeyPair]))) {
    return NO;
  }
  if ((_signingKeyPairIsSet != other->_signingKeyPairIsSet) ||
      (_signingKeyPairIsSet && ((_signingKeyPair || other->_signingKeyPair) && ![_signingKeyPair isEqual:other->_signingKeyPair]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTKeySet * val = [RTKeySet new];
  val.encryptionKeyPair = [self.encryptionKeyPair copy];
  val.signingKeyPair = [self.signingKeyPair copy];
  return val;
}

- (void) setEncryptionKeyPair: (NSData *) encryptionKeyPair {
  _encryptionKeyPair = encryptionKeyPair;
  _encryptionKeyPairIsSet = YES;
}

- (void) unsetEncryptionKeyPair {
  _encryptionKeyPair = nil;
  _encryptionKeyPairIsSet = NO;
}

- (void) setSigningKeyPair: (NSData *) signingKeyPair {
  _signingKeyPair = signingKeyPair;
  _signingKeyPairIsSet = YES;
}

- (void) unsetSigningKeyPair {
  _signingKeyPair = nil;
  _signingKeyPairIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSData * fieldValue;
          if (![inProtocol readBinary:&fieldValue error: __thriftError]) return NO;
          self.encryptionKeyPair = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSData * fieldValue;
          if (![inProtocol readBinary:&fieldValue error: __thriftError]) return NO;
          self.signingKeyPair = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"KeySet" error: __thriftError]) return NO;
  if (_encryptionKeyPairIsSet) {
    if (_encryptionKeyPair != nil) {
      if (![outProtocol writeFieldBeginWithName: @"encryptionKeyPair" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeBinary: _encryptionKeyPair error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_signingKeyPairIsSet) {
    if (_signingKeyPair != nil) {
      if (![outProtocol writeFieldBeginWithName: @"signingKeyPair" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeBinary: _signingKeyPair error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTKeySet("];
  [ms appendString: @"encryptionKeyPair:"];
  [ms appendFormat: @"\"%@\"", _encryptionKeyPair];
  [ms appendString: @",signingKeyPair:"];
  [ms appendFormat: @"\"%@\"", _signingKeyPair];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

NSString *RTMessagesErrorDomain = @"RTMessagesErrorDomain";

SInt8 RTMsgFlagCC = 1;
SInt8 RTMsgFlagSilent = 2;
NSString * RTMetaDataKey_MimeType = @"mime-type";
NSString * RTMetaDataKey_Title = @"title";
NSString * RTMetaDataKey_ThumbnailFrameTime = @"thumbnail-frame-time";
NSString * RTVideoType_MP4 = @"video/mp4";
NSString * RTAudioType_WAV = @"audio/wav";
NSString * RTAudioType_MP3 = @"audio/mpeg";
NSString * RTAudioType_MP4 = @"audio/mp4";
NSString * RTImageType_PNG = @"image/png";
NSString * RTImageType_JPG = @"image/jpeg";
NSString * RTMetaDataKey_TargetMessageId = @"msgId";
NSString * RTMetaDataKey_DeleteType = @"type";
NSString * RTDeleteType_Message = @"message";
NSString * RTDeleteType_Chat = @"chat";

@interface RTUserAPI_registerNotifications_args : NSObject <TBase, NSCoding, NSCopying> 

@property (assign, nonatomic) RTNotificationType type;
@property (assign, nonatomic) BOOL typeIsSet;
- (void) unsetType;

@property (strong, nonatomic) NSString * platform;
@property (assign, nonatomic) BOOL platformIsSet;
- (void) unsetPlatform;

@property (strong, nonatomic) NSData * token;
@property (assign, nonatomic) BOOL tokenIsSet;
- (void) unsetToken;


- (instancetype) initWithType: (RTNotificationType) type platform: (NSString *) platform token: (NSData *) token;

@end

@implementation RTUserAPI_registerNotifications_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithType: (RTNotificationType) type platform: (NSString *) platform token: (NSData *) token
{
  self = [super init];
  if (self)  {
    _type = type;
    _typeIsSet = YES;
    _platform = platform;
    _platformIsSet = YES;
    _token = token;
    _tokenIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"type"])
    {
      _type = [decoder decodeIntForKey: @"type"];
      _typeIsSet = YES;
    }
    if ([decoder containsValueForKey: @"platform"])
    {
      _platform = [decoder decodeObjectForKey: @"platform"];
      _platformIsSet = YES;
    }
    if ([decoder containsValueForKey: @"token"])
    {
      _token = [decoder decodeObjectForKey: @"token"];
      _tokenIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_typeIsSet)
  {
    [encoder encodeInt: _type forKey: @"type"];
  }
  if (_platformIsSet)
  {
    [encoder encodeObject: _platform forKey: @"platform"];
  }
  if (_tokenIsSet)
  {
    [encoder encodeObject: _token forKey: @"token"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _typeIsSet ? 2654435761 : 0;
  if (_typeIsSet)
  {
    hash = (hash * 31) ^ [@(_type) hash];
  }
  hash = (hash * 31) ^ _platformIsSet ? 2654435761 : 0;
  if (_platformIsSet)
  {
    hash = (hash * 31) ^ [_platform hash];
  }
  hash = (hash * 31) ^ _tokenIsSet ? 2654435761 : 0;
  if (_tokenIsSet)
  {
    hash = (hash * 31) ^ [_token hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTUserAPI_registerNotifications_args class]]) {
    return NO;
  }
  RTUserAPI_registerNotifications_args *other = (RTUserAPI_registerNotifications_args *)anObject;
  if ((_typeIsSet != other->_typeIsSet) ||
      (_typeIsSet && (_type != other->_type))) {
    return NO;
  }
  if ((_platformIsSet != other->_platformIsSet) ||
      (_platformIsSet && ((_platform || other->_platform) && ![_platform isEqual:other->_platform]))) {
    return NO;
  }
  if ((_tokenIsSet != other->_tokenIsSet) ||
      (_tokenIsSet && ((_token || other->_token) && ![_token isEqual:other->_token]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTUserAPI_registerNotifications_args * val = [RTUserAPI_registerNotifications_args new];
  val.type = self.type;
  val.platform = [self.platform copy];
  val.token = [self.token copy];
  return val;
}

- (void) setType: (RTNotificationType) type {
  _type = type;
  _typeIsSet = YES;
}

- (void) unsetType {
  _typeIsSet = NO;
}

- (void) setPlatform: (NSString *) platform {
  _platform = platform;
  _platformIsSet = YES;
}

- (void) unsetPlatform {
  _platform = nil;
  _platformIsSet = NO;
}

- (void) setToken: (NSData *) token {
  _token = token;
  _tokenIsSet = YES;
}

- (void) unsetToken {
  _token = nil;
  _tokenIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeI32) {
          RTNotificationType fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.type = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.platform = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSData * fieldValue;
          if (![inProtocol readBinary:&fieldValue error: __thriftError]) return NO;
          self.token = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"UserAPI_registerNotifications_args" error: __thriftError]) return NO;
  if (_typeIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"type" type: TTypeI32 fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _type error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_platformIsSet) {
    if (_platform != nil) {
      if (![outProtocol writeFieldBeginWithName: @"platform" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _platform error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_tokenIsSet) {
    if (_token != nil) {
      if (![outProtocol writeFieldBeginWithName: @"token" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeBinary: _token error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTUserAPI_registerNotifications_args("];
  [ms appendString: @"type:"];
  [ms appendFormat: @"%i", (int)_type];
  [ms appendString: @",platform:"];
  [ms appendFormat: @"\"%@\"", _platform];
  [ms appendString: @",token:"];
  [ms appendFormat: @"\"%@\"", _token];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTUserAPI_registerNotifications_result : NSObject <TBase, NSCoding, NSCopying> 



@end

@implementation RTUserAPI_registerNotifications_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTUserAPI_registerNotifications_result class]]) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTUserAPI_registerNotifications_result * val = [RTUserAPI_registerNotifications_result new];
  return val;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"UserAPI_registerNotifications_result" error: __thriftError]) return NO;

  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTUserAPI_registerNotifications_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTUserAPI_updateCertificates_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) NSData * encryptionCSR;
@property (assign, nonatomic) BOOL encryptionCSRIsSet;
- (void) unsetEncryptionCSR;

@property (strong, nonatomic) NSData * signingCSR;
@property (assign, nonatomic) BOOL signingCSRIsSet;
- (void) unsetSigningCSR;


- (instancetype) initWithEncryptionCSR: (NSData *) encryptionCSR signingCSR: (NSData *) signingCSR;

@end

@implementation RTUserAPI_updateCertificates_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithEncryptionCSR: (NSData *) encryptionCSR signingCSR: (NSData *) signingCSR
{
  self = [super init];
  if (self)  {
    _encryptionCSR = encryptionCSR;
    _encryptionCSRIsSet = YES;
    _signingCSR = signingCSR;
    _signingCSRIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"encryptionCSR"])
    {
      _encryptionCSR = [decoder decodeObjectForKey: @"encryptionCSR"];
      _encryptionCSRIsSet = YES;
    }
    if ([decoder containsValueForKey: @"signingCSR"])
    {
      _signingCSR = [decoder decodeObjectForKey: @"signingCSR"];
      _signingCSRIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_encryptionCSRIsSet)
  {
    [encoder encodeObject: _encryptionCSR forKey: @"encryptionCSR"];
  }
  if (_signingCSRIsSet)
  {
    [encoder encodeObject: _signingCSR forKey: @"signingCSR"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _encryptionCSRIsSet ? 2654435761 : 0;
  if (_encryptionCSRIsSet)
  {
    hash = (hash * 31) ^ [_encryptionCSR hash];
  }
  hash = (hash * 31) ^ _signingCSRIsSet ? 2654435761 : 0;
  if (_signingCSRIsSet)
  {
    hash = (hash * 31) ^ [_signingCSR hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTUserAPI_updateCertificates_args class]]) {
    return NO;
  }
  RTUserAPI_updateCertificates_args *other = (RTUserAPI_updateCertificates_args *)anObject;
  if ((_encryptionCSRIsSet != other->_encryptionCSRIsSet) ||
      (_encryptionCSRIsSet && ((_encryptionCSR || other->_encryptionCSR) && ![_encryptionCSR isEqual:other->_encryptionCSR]))) {
    return NO;
  }
  if ((_signingCSRIsSet != other->_signingCSRIsSet) ||
      (_signingCSRIsSet && ((_signingCSR || other->_signingCSR) && ![_signingCSR isEqual:other->_signingCSR]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTUserAPI_updateCertificates_args * val = [RTUserAPI_updateCertificates_args new];
  val.encryptionCSR = [self.encryptionCSR copy];
  val.signingCSR = [self.signingCSR copy];
  return val;
}

- (void) setEncryptionCSR: (NSData *) encryptionCSR {
  _encryptionCSR = encryptionCSR;
  _encryptionCSRIsSet = YES;
}

- (void) unsetEncryptionCSR {
  _encryptionCSR = nil;
  _encryptionCSRIsSet = NO;
}

- (void) setSigningCSR: (NSData *) signingCSR {
  _signingCSR = signingCSR;
  _signingCSRIsSet = YES;
}

- (void) unsetSigningCSR {
  _signingCSR = nil;
  _signingCSRIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSData * fieldValue;
          if (![inProtocol readBinary:&fieldValue error: __thriftError]) return NO;
          self.encryptionCSR = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSData * fieldValue;
          if (![inProtocol readBinary:&fieldValue error: __thriftError]) return NO;
          self.signingCSR = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"UserAPI_updateCertificates_args" error: __thriftError]) return NO;
  if (_encryptionCSRIsSet) {
    if (_encryptionCSR != nil) {
      if (![outProtocol writeFieldBeginWithName: @"encryptionCSR" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeBinary: _encryptionCSR error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_signingCSRIsSet) {
    if (_signingCSR != nil) {
      if (![outProtocol writeFieldBeginWithName: @"signingCSR" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeBinary: _signingCSR error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTUserAPI_updateCertificates_args("];
  [ms appendString: @"encryptionCSR:"];
  [ms appendFormat: @"\"%@\"", _encryptionCSR];
  [ms appendString: @",signingCSR:"];
  [ms appendFormat: @"\"%@\"", _signingCSR];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTUserAPI_updateCertificates_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RTCertificateSet * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;


- (instancetype) initWithSuccess: (RTCertificateSet *) success;

@end

@implementation RTUserAPI_updateCertificates_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (RTCertificateSet *) success
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTUserAPI_updateCertificates_result class]]) {
    return NO;
  }
  RTUserAPI_updateCertificates_result *other = (RTUserAPI_updateCertificates_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTUserAPI_updateCertificates_result * val = [RTUserAPI_updateCertificates_result new];
  val.success = [self.success copy];
  return val;
}

- (void) setSuccess: (RTCertificateSet *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSTRUCT) {
          RTCertificateSet *fieldValue = [[RTCertificateSet alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"UserAPI_updateCertificates_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSTRUCT fieldID: 0 error: __thriftError]) return NO;
      if (![_success write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTUserAPI_updateCertificates_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTUserAPI_updateAvatar_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RTImage * avatar;
@property (assign, nonatomic) BOOL avatarIsSet;
- (void) unsetAvatar;


- (instancetype) initWithAvatar: (RTImage *) avatar;

@end

@implementation RTUserAPI_updateAvatar_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithAvatar: (RTImage *) avatar
{
  self = [super init];
  if (self)  {
    _avatar = avatar;
    _avatarIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"avatar"])
    {
      _avatar = [decoder decodeObjectForKey: @"avatar"];
      _avatarIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_avatarIsSet)
  {
    [encoder encodeObject: _avatar forKey: @"avatar"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _avatarIsSet ? 2654435761 : 0;
  if (_avatarIsSet)
  {
    hash = (hash * 31) ^ [_avatar hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTUserAPI_updateAvatar_args class]]) {
    return NO;
  }
  RTUserAPI_updateAvatar_args *other = (RTUserAPI_updateAvatar_args *)anObject;
  if ((_avatarIsSet != other->_avatarIsSet) ||
      (_avatarIsSet && ((_avatar || other->_avatar) && ![_avatar isEqual:other->_avatar]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTUserAPI_updateAvatar_args * val = [RTUserAPI_updateAvatar_args new];
  val.avatar = [self.avatar copy];
  return val;
}

- (void) setAvatar: (RTImage *) avatar {
  _avatar = avatar;
  _avatarIsSet = YES;
}

- (void) unsetAvatar {
  _avatar = nil;
  _avatarIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          RTImage *fieldValue = [[RTImage alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.avatar = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"UserAPI_updateAvatar_args" error: __thriftError]) return NO;
  if (_avatarIsSet) {
    if (_avatar != nil) {
      if (![outProtocol writeFieldBeginWithName: @"avatar" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_avatar write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTUserAPI_updateAvatar_args("];
  [ms appendString: @"avatar:"];
  [ms appendFormat: @"%@", _avatar];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTUserAPI_updateAvatar_result : NSObject <TBase, NSCoding, NSCopying> 



@end

@implementation RTUserAPI_updateAvatar_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTUserAPI_updateAvatar_result class]]) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTUserAPI_updateAvatar_result * val = [RTUserAPI_updateAvatar_result new];
  return val;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"UserAPI_updateAvatar_result" error: __thriftError]) return NO;

  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTUserAPI_updateAvatar_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTUserAPI_listAliases_args : NSObject <TBase, NSCoding, NSCopying> 



@end

@implementation RTUserAPI_listAliases_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTUserAPI_listAliases_args class]]) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTUserAPI_listAliases_args * val = [RTUserAPI_listAliases_args new];
  return val;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"UserAPI_listAliases_args" error: __thriftError]) return NO;
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTUserAPI_listAliases_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTUserAPI_listAliases_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RTMutableAliasSet success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;


- (instancetype) initWithSuccess: (RTAliasSet) success;

@end

@implementation RTUserAPI_listAliases_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (RTAliasSet) success
{
  self = [super init];
  if (self)  {
    _success = [success mutableCopy];
    _successIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTUserAPI_listAliases_result class]]) {
    return NO;
  }
  RTUserAPI_listAliases_result *other = (RTUserAPI_listAliases_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTUserAPI_listAliases_result * val = [RTUserAPI_listAliases_result new];
  val.success = [self.success copy];
  return val;
}

- (void) setSuccess: (NSMutableSet<RTAlias> *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSET) {
          SInt32 _size42;
          if (![inProtocol readSetBeginReturningElementType: NULL size: &_size42 error: __thriftError]) return NO;
          NSMutableSet * fieldValue = [[NSMutableSet alloc] initWithCapacity: _size42];
          int _i43;
          for (_i43 = 0; _i43 < _size42; ++_i43)
          {
            NSString * _elem44;
            if (![inProtocol readString:&_elem44 error: __thriftError]) return NO;
            [fieldValue addObject: _elem44];
          }
          if (![inProtocol readSetEnd: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"UserAPI_listAliases_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSET fieldID: 0 error: __thriftError]) return NO;
      {
        if (![outProtocol writeSetBeginWithElementType: TTypeSTRING size: (SInt32)[_success count] error: __thriftError]) return NO;
        NSEnumerator * _iter45 = [_success objectEnumerator];
        id obj46;
        while ((obj46 = [_iter45 nextObject]))
        {
          if (![outProtocol writeString: obj46 error: __thriftError]) return NO;
        }
        if (![outProtocol writeSetEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTUserAPI_listAliases_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTUserAPI_registerAlias_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RTAuthenticatedAlias * authenticatedAlias;
@property (assign, nonatomic) BOOL authenticatedAliasIsSet;
- (void) unsetAuthenticatedAlias;


- (instancetype) initWithAuthenticatedAlias: (RTAuthenticatedAlias *) authenticatedAlias;

@end

@implementation RTUserAPI_registerAlias_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithAuthenticatedAlias: (RTAuthenticatedAlias *) authenticatedAlias
{
  self = [super init];
  if (self)  {
    _authenticatedAlias = authenticatedAlias;
    _authenticatedAliasIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"authenticatedAlias"])
    {
      _authenticatedAlias = [decoder decodeObjectForKey: @"authenticatedAlias"];
      _authenticatedAliasIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_authenticatedAliasIsSet)
  {
    [encoder encodeObject: _authenticatedAlias forKey: @"authenticatedAlias"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _authenticatedAliasIsSet ? 2654435761 : 0;
  if (_authenticatedAliasIsSet)
  {
    hash = (hash * 31) ^ [_authenticatedAlias hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTUserAPI_registerAlias_args class]]) {
    return NO;
  }
  RTUserAPI_registerAlias_args *other = (RTUserAPI_registerAlias_args *)anObject;
  if ((_authenticatedAliasIsSet != other->_authenticatedAliasIsSet) ||
      (_authenticatedAliasIsSet && ((_authenticatedAlias || other->_authenticatedAlias) && ![_authenticatedAlias isEqual:other->_authenticatedAlias]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTUserAPI_registerAlias_args * val = [RTUserAPI_registerAlias_args new];
  val.authenticatedAlias = [self.authenticatedAlias copy];
  return val;
}

- (void) setAuthenticatedAlias: (RTAuthenticatedAlias *) authenticatedAlias {
  _authenticatedAlias = authenticatedAlias;
  _authenticatedAliasIsSet = YES;
}

- (void) unsetAuthenticatedAlias {
  _authenticatedAlias = nil;
  _authenticatedAliasIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          RTAuthenticatedAlias *fieldValue = [[RTAuthenticatedAlias alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.authenticatedAlias = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"UserAPI_registerAlias_args" error: __thriftError]) return NO;
  if (_authenticatedAliasIsSet) {
    if (_authenticatedAlias != nil) {
      if (![outProtocol writeFieldBeginWithName: @"authenticatedAlias" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_authenticatedAlias write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTUserAPI_registerAlias_args("];
  [ms appendString: @"authenticatedAlias:"];
  [ms appendFormat: @"%@", _authenticatedAlias];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTUserAPI_registerAlias_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RTAliasInUse * aliasInUse;
@property (assign, nonatomic) BOOL aliasInUseIsSet;
- (void) unsetAliasInUse;

@property (strong, nonatomic) RTAliasPinInvalid * aliasPinInvalid;
@property (assign, nonatomic) BOOL aliasPinInvalidIsSet;
- (void) unsetAliasPinInvalid;

@property (strong, nonatomic) RTAliasNotAuthenticated * aliasNoAuth;
@property (assign, nonatomic) BOOL aliasNoAuthIsSet;
- (void) unsetAliasNoAuth;


- (instancetype) initWithAliasInUse: (RTAliasInUse *) aliasInUse aliasPinInvalid: (RTAliasPinInvalid *) aliasPinInvalid aliasNoAuth: (RTAliasNotAuthenticated *) aliasNoAuth;

@end

@implementation RTUserAPI_registerAlias_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithAliasInUse: (RTAliasInUse *) aliasInUse aliasPinInvalid: (RTAliasPinInvalid *) aliasPinInvalid aliasNoAuth: (RTAliasNotAuthenticated *) aliasNoAuth
{
  self = [super init];
  if (self)  {
    _aliasInUse = aliasInUse;
    _aliasInUseIsSet = YES;
    _aliasPinInvalid = aliasPinInvalid;
    _aliasPinInvalidIsSet = YES;
    _aliasNoAuth = aliasNoAuth;
    _aliasNoAuthIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"aliasInUse"])
    {
      _aliasInUse = [decoder decodeObjectForKey: @"aliasInUse"];
      _aliasInUseIsSet = YES;
    }
    if ([decoder containsValueForKey: @"aliasPinInvalid"])
    {
      _aliasPinInvalid = [decoder decodeObjectForKey: @"aliasPinInvalid"];
      _aliasPinInvalidIsSet = YES;
    }
    if ([decoder containsValueForKey: @"aliasNoAuth"])
    {
      _aliasNoAuth = [decoder decodeObjectForKey: @"aliasNoAuth"];
      _aliasNoAuthIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_aliasInUseIsSet)
  {
    [encoder encodeObject: _aliasInUse forKey: @"aliasInUse"];
  }
  if (_aliasPinInvalidIsSet)
  {
    [encoder encodeObject: _aliasPinInvalid forKey: @"aliasPinInvalid"];
  }
  if (_aliasNoAuthIsSet)
  {
    [encoder encodeObject: _aliasNoAuth forKey: @"aliasNoAuth"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _aliasInUseIsSet ? 2654435761 : 0;
  if (_aliasInUseIsSet)
  {
    hash = (hash * 31) ^ [_aliasInUse hash];
  }
  hash = (hash * 31) ^ _aliasPinInvalidIsSet ? 2654435761 : 0;
  if (_aliasPinInvalidIsSet)
  {
    hash = (hash * 31) ^ [_aliasPinInvalid hash];
  }
  hash = (hash * 31) ^ _aliasNoAuthIsSet ? 2654435761 : 0;
  if (_aliasNoAuthIsSet)
  {
    hash = (hash * 31) ^ [_aliasNoAuth hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTUserAPI_registerAlias_result class]]) {
    return NO;
  }
  RTUserAPI_registerAlias_result *other = (RTUserAPI_registerAlias_result *)anObject;
  if ((_aliasInUseIsSet != other->_aliasInUseIsSet) ||
      (_aliasInUseIsSet && ((_aliasInUse || other->_aliasInUse) && ![_aliasInUse isEqual:other->_aliasInUse]))) {
    return NO;
  }
  if ((_aliasPinInvalidIsSet != other->_aliasPinInvalidIsSet) ||
      (_aliasPinInvalidIsSet && ((_aliasPinInvalid || other->_aliasPinInvalid) && ![_aliasPinInvalid isEqual:other->_aliasPinInvalid]))) {
    return NO;
  }
  if ((_aliasNoAuthIsSet != other->_aliasNoAuthIsSet) ||
      (_aliasNoAuthIsSet && ((_aliasNoAuth || other->_aliasNoAuth) && ![_aliasNoAuth isEqual:other->_aliasNoAuth]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTUserAPI_registerAlias_result * val = [RTUserAPI_registerAlias_result new];
  val.aliasInUse = [self.aliasInUse copy];
  val.aliasPinInvalid = [self.aliasPinInvalid copy];
  val.aliasNoAuth = [self.aliasNoAuth copy];
  return val;
}

- (void) setAliasInUse: (RTAliasInUse *) aliasInUse {
  _aliasInUse = aliasInUse;
  _aliasInUseIsSet = YES;
}

- (void) unsetAliasInUse {
  _aliasInUse = nil;
  _aliasInUseIsSet = NO;
}

- (void) setAliasPinInvalid: (RTAliasPinInvalid *) aliasPinInvalid {
  _aliasPinInvalid = aliasPinInvalid;
  _aliasPinInvalidIsSet = YES;
}

- (void) unsetAliasPinInvalid {
  _aliasPinInvalid = nil;
  _aliasPinInvalidIsSet = NO;
}

- (void) setAliasNoAuth: (RTAliasNotAuthenticated *) aliasNoAuth {
  _aliasNoAuth = aliasNoAuth;
  _aliasNoAuthIsSet = YES;
}

- (void) unsetAliasNoAuth {
  _aliasNoAuth = nil;
  _aliasNoAuthIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 2:
        if (fieldType == TTypeSTRUCT) {
          RTAliasInUse *fieldValue = [[RTAliasInUse alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.aliasInUse = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          RTAliasPinInvalid *fieldValue = [[RTAliasPinInvalid alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.aliasPinInvalid = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRUCT) {
          RTAliasNotAuthenticated *fieldValue = [[RTAliasNotAuthenticated alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.aliasNoAuth = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"UserAPI_registerAlias_result" error: __thriftError]) return NO;

  if (_aliasInUseIsSet) {
    if (_aliasInUse != nil) {
      if (![outProtocol writeFieldBeginWithName: @"aliasInUse" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_aliasInUse write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_aliasPinInvalidIsSet) {
    if (_aliasPinInvalid != nil) {
      if (![outProtocol writeFieldBeginWithName: @"aliasPinInvalid" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_aliasPinInvalid write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_aliasNoAuthIsSet) {
    if (_aliasNoAuth != nil) {
      if (![outProtocol writeFieldBeginWithName: @"aliasNoAuth" type: TTypeSTRUCT fieldID: 4 error: __thriftError]) return NO;
      if (![_aliasNoAuth write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTUserAPI_registerAlias_result("];
  [ms appendString: @"aliasInUse:"];
  [ms appendFormat: @"%@", _aliasInUse];
  [ms appendString: @",aliasPinInvalid:"];
  [ms appendFormat: @"%@", _aliasPinInvalid];
  [ms appendString: @",aliasNoAuth:"];
  [ms appendFormat: @"%@", _aliasNoAuth];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTUserAPI_unregisterAlias_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RTAlias name;
@property (assign, nonatomic) BOOL nameIsSet;
- (void) unsetName;


- (instancetype) initWithName: (RTAlias) name;

@end

@implementation RTUserAPI_unregisterAlias_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithName: (RTAlias) name
{
  self = [super init];
  if (self)  {
    _name = name;
    _nameIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"name"])
    {
      _name = [decoder decodeObjectForKey: @"name"];
      _nameIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_nameIsSet)
  {
    [encoder encodeObject: _name forKey: @"name"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _nameIsSet ? 2654435761 : 0;
  if (_nameIsSet)
  {
    hash = (hash * 31) ^ [_name hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTUserAPI_unregisterAlias_args class]]) {
    return NO;
  }
  RTUserAPI_unregisterAlias_args *other = (RTUserAPI_unregisterAlias_args *)anObject;
  if ((_nameIsSet != other->_nameIsSet) ||
      (_nameIsSet && ((_name || other->_name) && ![_name isEqual:other->_name]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTUserAPI_unregisterAlias_args * val = [RTUserAPI_unregisterAlias_args new];
  val.name = [self.name copy];
  return val;
}

- (void) setName: (NSString *) name {
  _name = name;
  _nameIsSet = YES;
}

- (void) unsetName {
  _name = nil;
  _nameIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.name = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"UserAPI_unregisterAlias_args" error: __thriftError]) return NO;
  if (_nameIsSet) {
    if (_name != nil) {
      if (![outProtocol writeFieldBeginWithName: @"name" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _name error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTUserAPI_unregisterAlias_args("];
  [ms appendString: @"name:"];
  [ms appendFormat: @"\"%@\"", _name];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTUserAPI_unregisterAlias_result : NSObject <TBase, NSCoding, NSCopying> 



@end

@implementation RTUserAPI_unregisterAlias_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTUserAPI_unregisterAlias_result class]]) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTUserAPI_unregisterAlias_result * val = [RTUserAPI_unregisterAlias_result new];
  return val;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"UserAPI_unregisterAlias_result" error: __thriftError]) return NO;

  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTUserAPI_unregisterAlias_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTUserAPI_listDevices_args : NSObject <TBase, NSCoding, NSCopying> 



@end

@implementation RTUserAPI_listDevices_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTUserAPI_listDevices_args class]]) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTUserAPI_listDevices_args * val = [RTUserAPI_listDevices_args new];
  return val;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"UserAPI_listDevices_args" error: __thriftError]) return NO;
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTUserAPI_listDevices_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTUserAPI_listDevices_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) NSMutableArray<RTDeviceInfo *> * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;


- (instancetype) initWithSuccess: (NSArray<RTDeviceInfo *> *) success;

@end

@implementation RTUserAPI_listDevices_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (NSArray<RTDeviceInfo *> *) success
{
  self = [super init];
  if (self)  {
    _success = [success mutableCopy];
    _successIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTUserAPI_listDevices_result class]]) {
    return NO;
  }
  RTUserAPI_listDevices_result *other = (RTUserAPI_listDevices_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTUserAPI_listDevices_result * val = [RTUserAPI_listDevices_result new];
  val.success = [self.success copy];
  return val;
}

- (void) setSuccess: (NSMutableArray<RTDeviceInfo *> *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeLIST) {
          SInt32 _size47;
          if (![inProtocol readListBeginReturningElementType: NULL size: &_size47 error: __thriftError]) return NO;
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size47];
          int _i48;
          for (_i48 = 0; _i48 < _size47; ++_i48)
          {
            RTDeviceInfo *_elem49 = [[RTDeviceInfo alloc] init];
            if (![_elem49 read: inProtocol error: __thriftError]) return NO;
            [fieldValue addObject: _elem49];
          }
          if (![inProtocol readListEnd: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"UserAPI_listDevices_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeLIST fieldID: 0 error: __thriftError]) return NO;
      {
        if (![outProtocol writeListBeginWithElementType: TTypeSTRUCT size: (SInt32)[_success count] error: __thriftError]) return NO;
        int idx51;
        for (idx51 = 0; idx51 < [_success count]; idx51++)
        {
          if (![[_success objectAtIndex: idx51] write: outProtocol error: __thriftError]) return NO;
        }
        if (![outProtocol writeListEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTUserAPI_listDevices_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTUserAPI_updateDeviceActiveAliases_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RTId * deviceId;
@property (assign, nonatomic) BOOL deviceIdIsSet;
- (void) unsetDeviceId;

@property (strong, nonatomic) RTMutableAliasSet activeAliases;
@property (assign, nonatomic) BOOL activeAliasesIsSet;
- (void) unsetActiveAliases;


- (instancetype) initWithDeviceId: (RTId *) deviceId activeAliases: (RTAliasSet) activeAliases;

@end

@implementation RTUserAPI_updateDeviceActiveAliases_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithDeviceId: (RTId *) deviceId activeAliases: (RTAliasSet) activeAliases
{
  self = [super init];
  if (self)  {
    _deviceId = deviceId;
    _deviceIdIsSet = YES;
    _activeAliases = [activeAliases mutableCopy];
    _activeAliasesIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"deviceId"])
    {
      _deviceId = [decoder decodeObjectForKey: @"deviceId"];
      _deviceIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"activeAliases"])
    {
      _activeAliases = [decoder decodeObjectForKey: @"activeAliases"];
      _activeAliasesIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_deviceIdIsSet)
  {
    [encoder encodeObject: _deviceId forKey: @"deviceId"];
  }
  if (_activeAliasesIsSet)
  {
    [encoder encodeObject: _activeAliases forKey: @"activeAliases"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _deviceIdIsSet ? 2654435761 : 0;
  if (_deviceIdIsSet)
  {
    hash = (hash * 31) ^ [_deviceId hash];
  }
  hash = (hash * 31) ^ _activeAliasesIsSet ? 2654435761 : 0;
  if (_activeAliasesIsSet)
  {
    hash = (hash * 31) ^ [_activeAliases hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTUserAPI_updateDeviceActiveAliases_args class]]) {
    return NO;
  }
  RTUserAPI_updateDeviceActiveAliases_args *other = (RTUserAPI_updateDeviceActiveAliases_args *)anObject;
  if ((_deviceIdIsSet != other->_deviceIdIsSet) ||
      (_deviceIdIsSet && ((_deviceId || other->_deviceId) && ![_deviceId isEqual:other->_deviceId]))) {
    return NO;
  }
  if ((_activeAliasesIsSet != other->_activeAliasesIsSet) ||
      (_activeAliasesIsSet && ((_activeAliases || other->_activeAliases) && ![_activeAliases isEqual:other->_activeAliases]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTUserAPI_updateDeviceActiveAliases_args * val = [RTUserAPI_updateDeviceActiveAliases_args new];
  val.deviceId = [self.deviceId copy];
  val.activeAliases = [self.activeAliases copy];
  return val;
}

- (void) setDeviceId: (RTId *) deviceId {
  _deviceId = deviceId;
  _deviceIdIsSet = YES;
}

- (void) unsetDeviceId {
  _deviceId = nil;
  _deviceIdIsSet = NO;
}

- (void) setActiveAliases: (NSMutableSet<RTAlias> *) activeAliases {
  _activeAliases = activeAliases;
  _activeAliasesIsSet = YES;
}

- (void) unsetActiveAliases {
  _activeAliases = nil;
  _activeAliasesIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          RTId *fieldValue = [[RTId alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.deviceId = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSET) {
          SInt32 _size52;
          if (![inProtocol readSetBeginReturningElementType: NULL size: &_size52 error: __thriftError]) return NO;
          NSMutableSet * fieldValue = [[NSMutableSet alloc] initWithCapacity: _size52];
          int _i53;
          for (_i53 = 0; _i53 < _size52; ++_i53)
          {
            NSString * _elem54;
            if (![inProtocol readString:&_elem54 error: __thriftError]) return NO;
            [fieldValue addObject: _elem54];
          }
          if (![inProtocol readSetEnd: __thriftError]) return NO;
          self.activeAliases = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"UserAPI_updateDeviceActiveAliases_args" error: __thriftError]) return NO;
  if (_deviceIdIsSet) {
    if (_deviceId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"deviceId" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_deviceId write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_activeAliasesIsSet) {
    if (_activeAliases != nil) {
      if (![outProtocol writeFieldBeginWithName: @"activeAliases" type: TTypeSET fieldID: 2 error: __thriftError]) return NO;
      {
        if (![outProtocol writeSetBeginWithElementType: TTypeSTRING size: (SInt32)[_activeAliases count] error: __thriftError]) return NO;
        NSEnumerator * _iter55 = [_activeAliases objectEnumerator];
        id obj56;
        while ((obj56 = [_iter55 nextObject]))
        {
          if (![outProtocol writeString: obj56 error: __thriftError]) return NO;
        }
        if (![outProtocol writeSetEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTUserAPI_updateDeviceActiveAliases_args("];
  [ms appendString: @"deviceId:"];
  [ms appendFormat: @"%@", _deviceId];
  [ms appendString: @",activeAliases:"];
  [ms appendFormat: @"%@", _activeAliases];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTUserAPI_updateDeviceActiveAliases_result : NSObject <TBase, NSCoding, NSCopying> 



@end

@implementation RTUserAPI_updateDeviceActiveAliases_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTUserAPI_updateDeviceActiveAliases_result class]]) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTUserAPI_updateDeviceActiveAliases_result * val = [RTUserAPI_updateDeviceActiveAliases_result new];
  return val;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"UserAPI_updateDeviceActiveAliases_result" error: __thriftError]) return NO;

  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTUserAPI_updateDeviceActiveAliases_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTUserAPI_fetchWaiting_args : NSObject <TBase, NSCoding, NSCopying> 



@end

@implementation RTUserAPI_fetchWaiting_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTUserAPI_fetchWaiting_args class]]) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTUserAPI_fetchWaiting_args * val = [RTUserAPI_fetchWaiting_args new];
  return val;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"UserAPI_fetchWaiting_args" error: __thriftError]) return NO;
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTUserAPI_fetchWaiting_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTUserAPI_fetchWaiting_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) NSMutableArray<RTMsgHdr *> * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;


- (instancetype) initWithSuccess: (NSArray<RTMsgHdr *> *) success;

@end

@implementation RTUserAPI_fetchWaiting_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (NSArray<RTMsgHdr *> *) success
{
  self = [super init];
  if (self)  {
    _success = [success mutableCopy];
    _successIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTUserAPI_fetchWaiting_result class]]) {
    return NO;
  }
  RTUserAPI_fetchWaiting_result *other = (RTUserAPI_fetchWaiting_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTUserAPI_fetchWaiting_result * val = [RTUserAPI_fetchWaiting_result new];
  val.success = [self.success copy];
  return val;
}

- (void) setSuccess: (NSMutableArray<RTMsgHdr *> *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeLIST) {
          SInt32 _size57;
          if (![inProtocol readListBeginReturningElementType: NULL size: &_size57 error: __thriftError]) return NO;
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size57];
          int _i58;
          for (_i58 = 0; _i58 < _size57; ++_i58)
          {
            RTMsgHdr *_elem59 = [[RTMsgHdr alloc] init];
            if (![_elem59 read: inProtocol error: __thriftError]) return NO;
            [fieldValue addObject: _elem59];
          }
          if (![inProtocol readListEnd: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"UserAPI_fetchWaiting_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeLIST fieldID: 0 error: __thriftError]) return NO;
      {
        if (![outProtocol writeListBeginWithElementType: TTypeSTRUCT size: (SInt32)[_success count] error: __thriftError]) return NO;
        int idx61;
        for (idx61 = 0; idx61 < [_success count]; idx61++)
        {
          if (![[_success objectAtIndex: idx61] write: outProtocol error: __thriftError]) return NO;
        }
        if (![outProtocol writeListEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTUserAPI_fetchWaiting_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTUserAPI_fetch_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RTId * msgId;
@property (assign, nonatomic) BOOL msgIdIsSet;
- (void) unsetMsgId;


- (instancetype) initWithMsgId: (RTId *) msgId;

@end

@implementation RTUserAPI_fetch_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithMsgId: (RTId *) msgId
{
  self = [super init];
  if (self)  {
    _msgId = msgId;
    _msgIdIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"msgId"])
    {
      _msgId = [decoder decodeObjectForKey: @"msgId"];
      _msgIdIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_msgIdIsSet)
  {
    [encoder encodeObject: _msgId forKey: @"msgId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _msgIdIsSet ? 2654435761 : 0;
  if (_msgIdIsSet)
  {
    hash = (hash * 31) ^ [_msgId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTUserAPI_fetch_args class]]) {
    return NO;
  }
  RTUserAPI_fetch_args *other = (RTUserAPI_fetch_args *)anObject;
  if ((_msgIdIsSet != other->_msgIdIsSet) ||
      (_msgIdIsSet && ((_msgId || other->_msgId) && ![_msgId isEqual:other->_msgId]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTUserAPI_fetch_args * val = [RTUserAPI_fetch_args new];
  val.msgId = [self.msgId copy];
  return val;
}

- (void) setMsgId: (RTId *) msgId {
  _msgId = msgId;
  _msgIdIsSet = YES;
}

- (void) unsetMsgId {
  _msgId = nil;
  _msgIdIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          RTId *fieldValue = [[RTId alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.msgId = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"UserAPI_fetch_args" error: __thriftError]) return NO;
  if (_msgIdIsSet) {
    if (_msgId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"msgId" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_msgId write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTUserAPI_fetch_args("];
  [ms appendString: @"msgId:"];
  [ms appendFormat: @"%@", _msgId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTUserAPI_fetch_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RTMsg * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;


- (instancetype) initWithSuccess: (RTMsg *) success;

@end

@implementation RTUserAPI_fetch_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (RTMsg *) success
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTUserAPI_fetch_result class]]) {
    return NO;
  }
  RTUserAPI_fetch_result *other = (RTUserAPI_fetch_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTUserAPI_fetch_result * val = [RTUserAPI_fetch_result new];
  val.success = [self.success copy];
  return val;
}

- (void) setSuccess: (RTMsg *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSTRUCT) {
          RTMsg *fieldValue = [[RTMsg alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"UserAPI_fetch_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSTRUCT fieldID: 0 error: __thriftError]) return NO;
      if (![_success write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTUserAPI_fetch_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTUserAPI_ack_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RTId * msgId;
@property (assign, nonatomic) BOOL msgIdIsSet;
- (void) unsetMsgId;

@property (assign, nonatomic) RTTimeStamp sent;
@property (assign, nonatomic) BOOL sentIsSet;
- (void) unsetSent;


- (instancetype) initWithMsgId: (RTId *) msgId sent: (RTTimeStamp) sent;

@end

@implementation RTUserAPI_ack_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithMsgId: (RTId *) msgId sent: (RTTimeStamp) sent
{
  self = [super init];
  if (self)  {
    _msgId = msgId;
    _msgIdIsSet = YES;
    _sent = sent;
    _sentIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"msgId"])
    {
      _msgId = [decoder decodeObjectForKey: @"msgId"];
      _msgIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"sent"])
    {
      _sent = [decoder decodeInt64ForKey: @"sent"];
      _sentIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_msgIdIsSet)
  {
    [encoder encodeObject: _msgId forKey: @"msgId"];
  }
  if (_sentIsSet)
  {
    [encoder encodeInt64: _sent forKey: @"sent"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _msgIdIsSet ? 2654435761 : 0;
  if (_msgIdIsSet)
  {
    hash = (hash * 31) ^ [_msgId hash];
  }
  hash = (hash * 31) ^ _sentIsSet ? 2654435761 : 0;
  if (_sentIsSet)
  {
    hash = (hash * 31) ^ [@(_sent) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTUserAPI_ack_args class]]) {
    return NO;
  }
  RTUserAPI_ack_args *other = (RTUserAPI_ack_args *)anObject;
  if ((_msgIdIsSet != other->_msgIdIsSet) ||
      (_msgIdIsSet && ((_msgId || other->_msgId) && ![_msgId isEqual:other->_msgId]))) {
    return NO;
  }
  if ((_sentIsSet != other->_sentIsSet) ||
      (_sentIsSet && (_sent != other->_sent))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTUserAPI_ack_args * val = [RTUserAPI_ack_args new];
  val.msgId = [self.msgId copy];
  val.sent = self.sent;
  return val;
}

- (void) setMsgId: (RTId *) msgId {
  _msgId = msgId;
  _msgIdIsSet = YES;
}

- (void) unsetMsgId {
  _msgId = nil;
  _msgIdIsSet = NO;
}

- (void) setSent: (SInt64) sent {
  _sent = sent;
  _sentIsSet = YES;
}

- (void) unsetSent {
  _sentIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          RTId *fieldValue = [[RTId alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.msgId = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.sent = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"UserAPI_ack_args" error: __thriftError]) return NO;
  if (_msgIdIsSet) {
    if (_msgId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"msgId" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_msgId write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_sentIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"sent" type: TTypeI64 fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _sent error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTUserAPI_ack_args("];
  [ms appendString: @"msgId:"];
  [ms appendFormat: @"%@", _msgId];
  [ms appendString: @",sent:"];
  [ms appendFormat: @"%qi", _sent];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTUserAPI_send_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RTMsgPack * msgPack;
@property (assign, nonatomic) BOOL msgPackIsSet;
- (void) unsetMsgPack;


- (instancetype) initWithMsgPack: (RTMsgPack *) msgPack;

@end

@implementation RTUserAPI_send_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithMsgPack: (RTMsgPack *) msgPack
{
  self = [super init];
  if (self)  {
    _msgPack = msgPack;
    _msgPackIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"msgPack"])
    {
      _msgPack = [decoder decodeObjectForKey: @"msgPack"];
      _msgPackIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_msgPackIsSet)
  {
    [encoder encodeObject: _msgPack forKey: @"msgPack"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _msgPackIsSet ? 2654435761 : 0;
  if (_msgPackIsSet)
  {
    hash = (hash * 31) ^ [_msgPack hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTUserAPI_send_args class]]) {
    return NO;
  }
  RTUserAPI_send_args *other = (RTUserAPI_send_args *)anObject;
  if ((_msgPackIsSet != other->_msgPackIsSet) ||
      (_msgPackIsSet && ((_msgPack || other->_msgPack) && ![_msgPack isEqual:other->_msgPack]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTUserAPI_send_args * val = [RTUserAPI_send_args new];
  val.msgPack = [self.msgPack copy];
  return val;
}

- (void) setMsgPack: (RTMsgPack *) msgPack {
  _msgPack = msgPack;
  _msgPackIsSet = YES;
}

- (void) unsetMsgPack {
  _msgPack = nil;
  _msgPackIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          RTMsgPack *fieldValue = [[RTMsgPack alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.msgPack = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"UserAPI_send_args" error: __thriftError]) return NO;
  if (_msgPackIsSet) {
    if (_msgPack != nil) {
      if (![outProtocol writeFieldBeginWithName: @"msgPack" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_msgPack write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTUserAPI_send_args("];
  [ms appendString: @"msgPack:"];
  [ms appendFormat: @"%@", _msgPack];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTUserAPI_send_result : NSObject <TBase, NSCoding, NSCopying> 

@property (assign, nonatomic) RTTimeStamp success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;

@property (strong, nonatomic) RTInvalidSender * invalidSender;
@property (assign, nonatomic) BOOL invalidSenderIsSet;
- (void) unsetInvalidSender;

@property (strong, nonatomic) RTInvalidRecipient * invalidRecipient;
@property (assign, nonatomic) BOOL invalidRecipientIsSet;
- (void) unsetInvalidRecipient;

@property (strong, nonatomic) RTInvalidCredentials * invalidCredentials;
@property (assign, nonatomic) BOOL invalidCredentialsIsSet;
- (void) unsetInvalidCredentials;


- (instancetype) initWithSuccess: (RTTimeStamp) success invalidSender: (RTInvalidSender *) invalidSender invalidRecipient: (RTInvalidRecipient *) invalidRecipient invalidCredentials: (RTInvalidCredentials *) invalidCredentials;

@end

@implementation RTUserAPI_send_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (RTTimeStamp) success invalidSender: (RTInvalidSender *) invalidSender invalidRecipient: (RTInvalidRecipient *) invalidRecipient invalidCredentials: (RTInvalidCredentials *) invalidCredentials
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
    _invalidSender = invalidSender;
    _invalidSenderIsSet = YES;
    _invalidRecipient = invalidRecipient;
    _invalidRecipientIsSet = YES;
    _invalidCredentials = invalidCredentials;
    _invalidCredentialsIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeInt64ForKey: @"success"];
      _successIsSet = YES;
    }
    if ([decoder containsValueForKey: @"invalidSender"])
    {
      _invalidSender = [decoder decodeObjectForKey: @"invalidSender"];
      _invalidSenderIsSet = YES;
    }
    if ([decoder containsValueForKey: @"invalidRecipient"])
    {
      _invalidRecipient = [decoder decodeObjectForKey: @"invalidRecipient"];
      _invalidRecipientIsSet = YES;
    }
    if ([decoder containsValueForKey: @"invalidCredentials"])
    {
      _invalidCredentials = [decoder decodeObjectForKey: @"invalidCredentials"];
      _invalidCredentialsIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeInt64: _success forKey: @"success"];
  }
  if (_invalidSenderIsSet)
  {
    [encoder encodeObject: _invalidSender forKey: @"invalidSender"];
  }
  if (_invalidRecipientIsSet)
  {
    [encoder encodeObject: _invalidRecipient forKey: @"invalidRecipient"];
  }
  if (_invalidCredentialsIsSet)
  {
    [encoder encodeObject: _invalidCredentials forKey: @"invalidCredentials"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [@(_success) hash];
  }
  hash = (hash * 31) ^ _invalidSenderIsSet ? 2654435761 : 0;
  if (_invalidSenderIsSet)
  {
    hash = (hash * 31) ^ [_invalidSender hash];
  }
  hash = (hash * 31) ^ _invalidRecipientIsSet ? 2654435761 : 0;
  if (_invalidRecipientIsSet)
  {
    hash = (hash * 31) ^ [_invalidRecipient hash];
  }
  hash = (hash * 31) ^ _invalidCredentialsIsSet ? 2654435761 : 0;
  if (_invalidCredentialsIsSet)
  {
    hash = (hash * 31) ^ [_invalidCredentials hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTUserAPI_send_result class]]) {
    return NO;
  }
  RTUserAPI_send_result *other = (RTUserAPI_send_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && (_success != other->_success))) {
    return NO;
  }
  if ((_invalidSenderIsSet != other->_invalidSenderIsSet) ||
      (_invalidSenderIsSet && ((_invalidSender || other->_invalidSender) && ![_invalidSender isEqual:other->_invalidSender]))) {
    return NO;
  }
  if ((_invalidRecipientIsSet != other->_invalidRecipientIsSet) ||
      (_invalidRecipientIsSet && ((_invalidRecipient || other->_invalidRecipient) && ![_invalidRecipient isEqual:other->_invalidRecipient]))) {
    return NO;
  }
  if ((_invalidCredentialsIsSet != other->_invalidCredentialsIsSet) ||
      (_invalidCredentialsIsSet && ((_invalidCredentials || other->_invalidCredentials) && ![_invalidCredentials isEqual:other->_invalidCredentials]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTUserAPI_send_result * val = [RTUserAPI_send_result new];
  val.success = self.success;
  val.invalidSender = [self.invalidSender copy];
  val.invalidRecipient = [self.invalidRecipient copy];
  val.invalidCredentials = [self.invalidCredentials copy];
  return val;
}

- (void) setSuccess: (SInt64) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _successIsSet = NO;
}

- (void) setInvalidSender: (RTInvalidSender *) invalidSender {
  _invalidSender = invalidSender;
  _invalidSenderIsSet = YES;
}

- (void) unsetInvalidSender {
  _invalidSender = nil;
  _invalidSenderIsSet = NO;
}

- (void) setInvalidRecipient: (RTInvalidRecipient *) invalidRecipient {
  _invalidRecipient = invalidRecipient;
  _invalidRecipientIsSet = YES;
}

- (void) unsetInvalidRecipient {
  _invalidRecipient = nil;
  _invalidRecipientIsSet = NO;
}

- (void) setInvalidCredentials: (RTInvalidCredentials *) invalidCredentials {
  _invalidCredentials = invalidCredentials;
  _invalidCredentialsIsSet = YES;
}

- (void) unsetInvalidCredentials {
  _invalidCredentials = nil;
  _invalidCredentialsIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          RTInvalidSender *fieldValue = [[RTInvalidSender alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.invalidSender = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          RTInvalidRecipient *fieldValue = [[RTInvalidRecipient alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.invalidRecipient = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRUCT) {
          RTInvalidCredentials *fieldValue = [[RTInvalidCredentials alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.invalidCredentials = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"UserAPI_send_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeI64 fieldID: 0 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _success error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  } else if (_invalidSenderIsSet) {
    if (_invalidSender != nil) {
      if (![outProtocol writeFieldBeginWithName: @"invalidSender" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_invalidSender write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_invalidRecipientIsSet) {
    if (_invalidRecipient != nil) {
      if (![outProtocol writeFieldBeginWithName: @"invalidRecipient" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_invalidRecipient write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_invalidCredentialsIsSet) {
    if (_invalidCredentials != nil) {
      if (![outProtocol writeFieldBeginWithName: @"invalidCredentials" type: TTypeSTRUCT fieldID: 4 error: __thriftError]) return NO;
      if (![_invalidCredentials write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTUserAPI_send_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%qi", _success];
  [ms appendString: @",invalidSender:"];
  [ms appendFormat: @"%@", _invalidSender];
  [ms appendString: @",invalidRecipient:"];
  [ms appendFormat: @"%@", _invalidRecipient];
  [ms appendString: @",invalidCredentials:"];
  [ms appendFormat: @"%@", _invalidCredentials];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTUserAPI_sendUserStatus_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RTAlias sender;
@property (assign, nonatomic) BOOL senderIsSet;
- (void) unsetSender;

@property (strong, nonatomic) RTAlias recipient;
@property (assign, nonatomic) BOOL recipientIsSet;
- (void) unsetRecipient;

@property (assign, nonatomic) RTUserStatus status;
@property (assign, nonatomic) BOOL statusIsSet;
- (void) unsetStatus;


- (instancetype) initWithSender: (RTAlias) sender recipient: (RTAlias) recipient status: (RTUserStatus) status;

@end

@implementation RTUserAPI_sendUserStatus_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSender: (RTAlias) sender recipient: (RTAlias) recipient status: (RTUserStatus) status
{
  self = [super init];
  if (self)  {
    _sender = sender;
    _senderIsSet = YES;
    _recipient = recipient;
    _recipientIsSet = YES;
    _status = status;
    _statusIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"sender"])
    {
      _sender = [decoder decodeObjectForKey: @"sender"];
      _senderIsSet = YES;
    }
    if ([decoder containsValueForKey: @"recipient"])
    {
      _recipient = [decoder decodeObjectForKey: @"recipient"];
      _recipientIsSet = YES;
    }
    if ([decoder containsValueForKey: @"status"])
    {
      _status = [decoder decodeIntForKey: @"status"];
      _statusIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_senderIsSet)
  {
    [encoder encodeObject: _sender forKey: @"sender"];
  }
  if (_recipientIsSet)
  {
    [encoder encodeObject: _recipient forKey: @"recipient"];
  }
  if (_statusIsSet)
  {
    [encoder encodeInt: _status forKey: @"status"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _senderIsSet ? 2654435761 : 0;
  if (_senderIsSet)
  {
    hash = (hash * 31) ^ [_sender hash];
  }
  hash = (hash * 31) ^ _recipientIsSet ? 2654435761 : 0;
  if (_recipientIsSet)
  {
    hash = (hash * 31) ^ [_recipient hash];
  }
  hash = (hash * 31) ^ _statusIsSet ? 2654435761 : 0;
  if (_statusIsSet)
  {
    hash = (hash * 31) ^ [@(_status) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTUserAPI_sendUserStatus_args class]]) {
    return NO;
  }
  RTUserAPI_sendUserStatus_args *other = (RTUserAPI_sendUserStatus_args *)anObject;
  if ((_senderIsSet != other->_senderIsSet) ||
      (_senderIsSet && ((_sender || other->_sender) && ![_sender isEqual:other->_sender]))) {
    return NO;
  }
  if ((_recipientIsSet != other->_recipientIsSet) ||
      (_recipientIsSet && ((_recipient || other->_recipient) && ![_recipient isEqual:other->_recipient]))) {
    return NO;
  }
  if ((_statusIsSet != other->_statusIsSet) ||
      (_statusIsSet && (_status != other->_status))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTUserAPI_sendUserStatus_args * val = [RTUserAPI_sendUserStatus_args new];
  val.sender = [self.sender copy];
  val.recipient = [self.recipient copy];
  val.status = self.status;
  return val;
}

- (void) setSender: (NSString *) sender {
  _sender = sender;
  _senderIsSet = YES;
}

- (void) unsetSender {
  _sender = nil;
  _senderIsSet = NO;
}

- (void) setRecipient: (NSString *) recipient {
  _recipient = recipient;
  _recipientIsSet = YES;
}

- (void) unsetRecipient {
  _recipient = nil;
  _recipientIsSet = NO;
}

- (void) setStatus: (RTUserStatus) status {
  _status = status;
  _statusIsSet = YES;
}

- (void) unsetStatus {
  _statusIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.sender = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.recipient = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeI32) {
          RTUserStatus fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.status = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"UserAPI_sendUserStatus_args" error: __thriftError]) return NO;
  if (_senderIsSet) {
    if (_sender != nil) {
      if (![outProtocol writeFieldBeginWithName: @"sender" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _sender error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_recipientIsSet) {
    if (_recipient != nil) {
      if (![outProtocol writeFieldBeginWithName: @"recipient" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _recipient error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_statusIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"status" type: TTypeI32 fieldID: 3 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _status error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTUserAPI_sendUserStatus_args("];
  [ms appendString: @"sender:"];
  [ms appendFormat: @"\"%@\"", _sender];
  [ms appendString: @",recipient:"];
  [ms appendFormat: @"\"%@\"", _recipient];
  [ms appendString: @",status:"];
  [ms appendFormat: @"%i", (int)_status];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTUserAPI_sendGroupStatus_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RTAlias sender;
@property (assign, nonatomic) BOOL senderIsSet;
- (void) unsetSender;

@property (strong, nonatomic) RTGroup * group;
@property (assign, nonatomic) BOOL groupIsSet;
- (void) unsetGroup;

@property (assign, nonatomic) RTUserStatus status;
@property (assign, nonatomic) BOOL statusIsSet;
- (void) unsetStatus;


- (instancetype) initWithSender: (RTAlias) sender group: (RTGroup *) group status: (RTUserStatus) status;

@end

@implementation RTUserAPI_sendGroupStatus_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSender: (RTAlias) sender group: (RTGroup *) group status: (RTUserStatus) status
{
  self = [super init];
  if (self)  {
    _sender = sender;
    _senderIsSet = YES;
    _group = group;
    _groupIsSet = YES;
    _status = status;
    _statusIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"sender"])
    {
      _sender = [decoder decodeObjectForKey: @"sender"];
      _senderIsSet = YES;
    }
    if ([decoder containsValueForKey: @"group"])
    {
      _group = [decoder decodeObjectForKey: @"group"];
      _groupIsSet = YES;
    }
    if ([decoder containsValueForKey: @"status"])
    {
      _status = [decoder decodeIntForKey: @"status"];
      _statusIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_senderIsSet)
  {
    [encoder encodeObject: _sender forKey: @"sender"];
  }
  if (_groupIsSet)
  {
    [encoder encodeObject: _group forKey: @"group"];
  }
  if (_statusIsSet)
  {
    [encoder encodeInt: _status forKey: @"status"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _senderIsSet ? 2654435761 : 0;
  if (_senderIsSet)
  {
    hash = (hash * 31) ^ [_sender hash];
  }
  hash = (hash * 31) ^ _groupIsSet ? 2654435761 : 0;
  if (_groupIsSet)
  {
    hash = (hash * 31) ^ [_group hash];
  }
  hash = (hash * 31) ^ _statusIsSet ? 2654435761 : 0;
  if (_statusIsSet)
  {
    hash = (hash * 31) ^ [@(_status) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTUserAPI_sendGroupStatus_args class]]) {
    return NO;
  }
  RTUserAPI_sendGroupStatus_args *other = (RTUserAPI_sendGroupStatus_args *)anObject;
  if ((_senderIsSet != other->_senderIsSet) ||
      (_senderIsSet && ((_sender || other->_sender) && ![_sender isEqual:other->_sender]))) {
    return NO;
  }
  if ((_groupIsSet != other->_groupIsSet) ||
      (_groupIsSet && ((_group || other->_group) && ![_group isEqual:other->_group]))) {
    return NO;
  }
  if ((_statusIsSet != other->_statusIsSet) ||
      (_statusIsSet && (_status != other->_status))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTUserAPI_sendGroupStatus_args * val = [RTUserAPI_sendGroupStatus_args new];
  val.sender = [self.sender copy];
  val.group = [self.group copy];
  val.status = self.status;
  return val;
}

- (void) setSender: (NSString *) sender {
  _sender = sender;
  _senderIsSet = YES;
}

- (void) unsetSender {
  _sender = nil;
  _senderIsSet = NO;
}

- (void) setGroup: (RTGroup *) group {
  _group = group;
  _groupIsSet = YES;
}

- (void) unsetGroup {
  _group = nil;
  _groupIsSet = NO;
}

- (void) setStatus: (RTUserStatus) status {
  _status = status;
  _statusIsSet = YES;
}

- (void) unsetStatus {
  _statusIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.sender = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          RTGroup *fieldValue = [[RTGroup alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.group = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeI32) {
          RTUserStatus fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.status = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"UserAPI_sendGroupStatus_args" error: __thriftError]) return NO;
  if (_senderIsSet) {
    if (_sender != nil) {
      if (![outProtocol writeFieldBeginWithName: @"sender" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _sender error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_groupIsSet) {
    if (_group != nil) {
      if (![outProtocol writeFieldBeginWithName: @"group" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_group write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_statusIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"status" type: TTypeI32 fieldID: 3 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _status error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTUserAPI_sendGroupStatus_args("];
  [ms appendString: @"sender:"];
  [ms appendFormat: @"\"%@\"", _sender];
  [ms appendString: @",group:"];
  [ms appendFormat: @"%@", _group];
  [ms appendString: @",status:"];
  [ms appendFormat: @"%i", (int)_status];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTUserAPI_sendDirect_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RTId * msgId;
@property (assign, nonatomic) BOOL msgIdIsSet;
- (void) unsetMsgId;

@property (strong, nonatomic) NSString * msgType;
@property (assign, nonatomic) BOOL msgTypeIsSet;
- (void) unsetMsgType;

@property (strong, nonatomic) NSData * msgData;
@property (assign, nonatomic) BOOL msgDataIsSet;
- (void) unsetMsgData;

@property (strong, nonatomic) NSString * sender;
@property (assign, nonatomic) BOOL senderIsSet;
- (void) unsetSender;

@property (strong, nonatomic) RTMutableDirectEnvelopeList envelopes;
@property (assign, nonatomic) BOOL envelopesIsSet;
- (void) unsetEnvelopes;


- (instancetype) initWithMsgId: (RTId *) msgId msgType: (NSString *) msgType msgData: (NSData *) msgData sender: (NSString *) sender envelopes: (RTDirectEnvelopeList) envelopes;

@end

@implementation RTUserAPI_sendDirect_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithMsgId: (RTId *) msgId msgType: (NSString *) msgType msgData: (NSData *) msgData sender: (NSString *) sender envelopes: (RTDirectEnvelopeList) envelopes
{
  self = [super init];
  if (self)  {
    _msgId = msgId;
    _msgIdIsSet = YES;
    _msgType = msgType;
    _msgTypeIsSet = YES;
    _msgData = msgData;
    _msgDataIsSet = YES;
    _sender = sender;
    _senderIsSet = YES;
    _envelopes = [envelopes mutableCopy];
    _envelopesIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"msgId"])
    {
      _msgId = [decoder decodeObjectForKey: @"msgId"];
      _msgIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"msgType"])
    {
      _msgType = [decoder decodeObjectForKey: @"msgType"];
      _msgTypeIsSet = YES;
    }
    if ([decoder containsValueForKey: @"msgData"])
    {
      _msgData = [decoder decodeObjectForKey: @"msgData"];
      _msgDataIsSet = YES;
    }
    if ([decoder containsValueForKey: @"sender"])
    {
      _sender = [decoder decodeObjectForKey: @"sender"];
      _senderIsSet = YES;
    }
    if ([decoder containsValueForKey: @"envelopes"])
    {
      _envelopes = [decoder decodeObjectForKey: @"envelopes"];
      _envelopesIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_msgIdIsSet)
  {
    [encoder encodeObject: _msgId forKey: @"msgId"];
  }
  if (_msgTypeIsSet)
  {
    [encoder encodeObject: _msgType forKey: @"msgType"];
  }
  if (_msgDataIsSet)
  {
    [encoder encodeObject: _msgData forKey: @"msgData"];
  }
  if (_senderIsSet)
  {
    [encoder encodeObject: _sender forKey: @"sender"];
  }
  if (_envelopesIsSet)
  {
    [encoder encodeObject: _envelopes forKey: @"envelopes"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _msgIdIsSet ? 2654435761 : 0;
  if (_msgIdIsSet)
  {
    hash = (hash * 31) ^ [_msgId hash];
  }
  hash = (hash * 31) ^ _msgTypeIsSet ? 2654435761 : 0;
  if (_msgTypeIsSet)
  {
    hash = (hash * 31) ^ [_msgType hash];
  }
  hash = (hash * 31) ^ _msgDataIsSet ? 2654435761 : 0;
  if (_msgDataIsSet)
  {
    hash = (hash * 31) ^ [_msgData hash];
  }
  hash = (hash * 31) ^ _senderIsSet ? 2654435761 : 0;
  if (_senderIsSet)
  {
    hash = (hash * 31) ^ [_sender hash];
  }
  hash = (hash * 31) ^ _envelopesIsSet ? 2654435761 : 0;
  if (_envelopesIsSet)
  {
    hash = (hash * 31) ^ [_envelopes hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTUserAPI_sendDirect_args class]]) {
    return NO;
  }
  RTUserAPI_sendDirect_args *other = (RTUserAPI_sendDirect_args *)anObject;
  if ((_msgIdIsSet != other->_msgIdIsSet) ||
      (_msgIdIsSet && ((_msgId || other->_msgId) && ![_msgId isEqual:other->_msgId]))) {
    return NO;
  }
  if ((_msgTypeIsSet != other->_msgTypeIsSet) ||
      (_msgTypeIsSet && ((_msgType || other->_msgType) && ![_msgType isEqual:other->_msgType]))) {
    return NO;
  }
  if ((_msgDataIsSet != other->_msgDataIsSet) ||
      (_msgDataIsSet && ((_msgData || other->_msgData) && ![_msgData isEqual:other->_msgData]))) {
    return NO;
  }
  if ((_senderIsSet != other->_senderIsSet) ||
      (_senderIsSet && ((_sender || other->_sender) && ![_sender isEqual:other->_sender]))) {
    return NO;
  }
  if ((_envelopesIsSet != other->_envelopesIsSet) ||
      (_envelopesIsSet && ((_envelopes || other->_envelopes) && ![_envelopes isEqual:other->_envelopes]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTUserAPI_sendDirect_args * val = [RTUserAPI_sendDirect_args new];
  val.msgId = [self.msgId copy];
  val.msgType = [self.msgType copy];
  val.msgData = [self.msgData copy];
  val.sender = [self.sender copy];
  val.envelopes = [self.envelopes copy];
  return val;
}

- (void) setMsgId: (RTId *) msgId {
  _msgId = msgId;
  _msgIdIsSet = YES;
}

- (void) unsetMsgId {
  _msgId = nil;
  _msgIdIsSet = NO;
}

- (void) setMsgType: (NSString *) msgType {
  _msgType = msgType;
  _msgTypeIsSet = YES;
}

- (void) unsetMsgType {
  _msgType = nil;
  _msgTypeIsSet = NO;
}

- (void) setMsgData: (NSData *) msgData {
  _msgData = msgData;
  _msgDataIsSet = YES;
}

- (void) unsetMsgData {
  _msgData = nil;
  _msgDataIsSet = NO;
}

- (void) setSender: (NSString *) sender {
  _sender = sender;
  _senderIsSet = YES;
}

- (void) unsetSender {
  _sender = nil;
  _senderIsSet = NO;
}

- (void) setEnvelopes: (NSMutableArray<RTDirectEnvelope *> *) envelopes {
  _envelopes = envelopes;
  _envelopesIsSet = YES;
}

- (void) unsetEnvelopes {
  _envelopes = nil;
  _envelopesIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          RTId *fieldValue = [[RTId alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.msgId = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.msgType = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSData * fieldValue;
          if (![inProtocol readBinary:&fieldValue error: __thriftError]) return NO;
          self.msgData = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.sender = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeLIST) {
          SInt32 _size62;
          if (![inProtocol readListBeginReturningElementType: NULL size: &_size62 error: __thriftError]) return NO;
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size62];
          int _i63;
          for (_i63 = 0; _i63 < _size62; ++_i63)
          {
            RTDirectEnvelope *_elem64 = [[RTDirectEnvelope alloc] init];
            if (![_elem64 read: inProtocol error: __thriftError]) return NO;
            [fieldValue addObject: _elem64];
          }
          if (![inProtocol readListEnd: __thriftError]) return NO;
          self.envelopes = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"UserAPI_sendDirect_args" error: __thriftError]) return NO;
  if (_msgIdIsSet) {
    if (_msgId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"msgId" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_msgId write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_msgTypeIsSet) {
    if (_msgType != nil) {
      if (![outProtocol writeFieldBeginWithName: @"msgType" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _msgType error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_msgDataIsSet) {
    if (_msgData != nil) {
      if (![outProtocol writeFieldBeginWithName: @"msgData" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeBinary: _msgData error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_senderIsSet) {
    if (_sender != nil) {
      if (![outProtocol writeFieldBeginWithName: @"sender" type: TTypeSTRING fieldID: 4 error: __thriftError]) return NO;
      if (![outProtocol writeString: _sender error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_envelopesIsSet) {
    if (_envelopes != nil) {
      if (![outProtocol writeFieldBeginWithName: @"envelopes" type: TTypeLIST fieldID: 5 error: __thriftError]) return NO;
      {
        if (![outProtocol writeListBeginWithElementType: TTypeSTRUCT size: (SInt32)[_envelopes count] error: __thriftError]) return NO;
        int idx66;
        for (idx66 = 0; idx66 < [_envelopes count]; idx66++)
        {
          if (![[_envelopes objectAtIndex: idx66] write: outProtocol error: __thriftError]) return NO;
        }
        if (![outProtocol writeListEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTUserAPI_sendDirect_args("];
  [ms appendString: @"msgId:"];
  [ms appendFormat: @"%@", _msgId];
  [ms appendString: @",msgType:"];
  [ms appendFormat: @"\"%@\"", _msgType];
  [ms appendString: @",msgData:"];
  [ms appendFormat: @"\"%@\"", _msgData];
  [ms appendString: @",sender:"];
  [ms appendFormat: @"\"%@\"", _sender];
  [ms appendString: @",envelopes:"];
  [ms appendFormat: @"%@", _envelopes];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTUserAPI_sendDirect_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RTInvalidSender * invalidSender;
@property (assign, nonatomic) BOOL invalidSenderIsSet;
- (void) unsetInvalidSender;

@property (strong, nonatomic) RTInvalidRecipient * invalidRecipient;
@property (assign, nonatomic) BOOL invalidRecipientIsSet;
- (void) unsetInvalidRecipient;

@property (strong, nonatomic) RTInvalidCredentials * invalidCredentials;
@property (assign, nonatomic) BOOL invalidCredentialsIsSet;
- (void) unsetInvalidCredentials;


- (instancetype) initWithInvalidSender: (RTInvalidSender *) invalidSender invalidRecipient: (RTInvalidRecipient *) invalidRecipient invalidCredentials: (RTInvalidCredentials *) invalidCredentials;

@end

@implementation RTUserAPI_sendDirect_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithInvalidSender: (RTInvalidSender *) invalidSender invalidRecipient: (RTInvalidRecipient *) invalidRecipient invalidCredentials: (RTInvalidCredentials *) invalidCredentials
{
  self = [super init];
  if (self)  {
    _invalidSender = invalidSender;
    _invalidSenderIsSet = YES;
    _invalidRecipient = invalidRecipient;
    _invalidRecipientIsSet = YES;
    _invalidCredentials = invalidCredentials;
    _invalidCredentialsIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"invalidSender"])
    {
      _invalidSender = [decoder decodeObjectForKey: @"invalidSender"];
      _invalidSenderIsSet = YES;
    }
    if ([decoder containsValueForKey: @"invalidRecipient"])
    {
      _invalidRecipient = [decoder decodeObjectForKey: @"invalidRecipient"];
      _invalidRecipientIsSet = YES;
    }
    if ([decoder containsValueForKey: @"invalidCredentials"])
    {
      _invalidCredentials = [decoder decodeObjectForKey: @"invalidCredentials"];
      _invalidCredentialsIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_invalidSenderIsSet)
  {
    [encoder encodeObject: _invalidSender forKey: @"invalidSender"];
  }
  if (_invalidRecipientIsSet)
  {
    [encoder encodeObject: _invalidRecipient forKey: @"invalidRecipient"];
  }
  if (_invalidCredentialsIsSet)
  {
    [encoder encodeObject: _invalidCredentials forKey: @"invalidCredentials"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _invalidSenderIsSet ? 2654435761 : 0;
  if (_invalidSenderIsSet)
  {
    hash = (hash * 31) ^ [_invalidSender hash];
  }
  hash = (hash * 31) ^ _invalidRecipientIsSet ? 2654435761 : 0;
  if (_invalidRecipientIsSet)
  {
    hash = (hash * 31) ^ [_invalidRecipient hash];
  }
  hash = (hash * 31) ^ _invalidCredentialsIsSet ? 2654435761 : 0;
  if (_invalidCredentialsIsSet)
  {
    hash = (hash * 31) ^ [_invalidCredentials hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTUserAPI_sendDirect_result class]]) {
    return NO;
  }
  RTUserAPI_sendDirect_result *other = (RTUserAPI_sendDirect_result *)anObject;
  if ((_invalidSenderIsSet != other->_invalidSenderIsSet) ||
      (_invalidSenderIsSet && ((_invalidSender || other->_invalidSender) && ![_invalidSender isEqual:other->_invalidSender]))) {
    return NO;
  }
  if ((_invalidRecipientIsSet != other->_invalidRecipientIsSet) ||
      (_invalidRecipientIsSet && ((_invalidRecipient || other->_invalidRecipient) && ![_invalidRecipient isEqual:other->_invalidRecipient]))) {
    return NO;
  }
  if ((_invalidCredentialsIsSet != other->_invalidCredentialsIsSet) ||
      (_invalidCredentialsIsSet && ((_invalidCredentials || other->_invalidCredentials) && ![_invalidCredentials isEqual:other->_invalidCredentials]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTUserAPI_sendDirect_result * val = [RTUserAPI_sendDirect_result new];
  val.invalidSender = [self.invalidSender copy];
  val.invalidRecipient = [self.invalidRecipient copy];
  val.invalidCredentials = [self.invalidCredentials copy];
  return val;
}

- (void) setInvalidSender: (RTInvalidSender *) invalidSender {
  _invalidSender = invalidSender;
  _invalidSenderIsSet = YES;
}

- (void) unsetInvalidSender {
  _invalidSender = nil;
  _invalidSenderIsSet = NO;
}

- (void) setInvalidRecipient: (RTInvalidRecipient *) invalidRecipient {
  _invalidRecipient = invalidRecipient;
  _invalidRecipientIsSet = YES;
}

- (void) unsetInvalidRecipient {
  _invalidRecipient = nil;
  _invalidRecipientIsSet = NO;
}

- (void) setInvalidCredentials: (RTInvalidCredentials *) invalidCredentials {
  _invalidCredentials = invalidCredentials;
  _invalidCredentialsIsSet = YES;
}

- (void) unsetInvalidCredentials {
  _invalidCredentials = nil;
  _invalidCredentialsIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 6:
        if (fieldType == TTypeSTRUCT) {
          RTInvalidSender *fieldValue = [[RTInvalidSender alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.invalidSender = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 7:
        if (fieldType == TTypeSTRUCT) {
          RTInvalidRecipient *fieldValue = [[RTInvalidRecipient alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.invalidRecipient = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 8:
        if (fieldType == TTypeSTRUCT) {
          RTInvalidCredentials *fieldValue = [[RTInvalidCredentials alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.invalidCredentials = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"UserAPI_sendDirect_result" error: __thriftError]) return NO;

  if (_invalidSenderIsSet) {
    if (_invalidSender != nil) {
      if (![outProtocol writeFieldBeginWithName: @"invalidSender" type: TTypeSTRUCT fieldID: 6 error: __thriftError]) return NO;
      if (![_invalidSender write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_invalidRecipientIsSet) {
    if (_invalidRecipient != nil) {
      if (![outProtocol writeFieldBeginWithName: @"invalidRecipient" type: TTypeSTRUCT fieldID: 7 error: __thriftError]) return NO;
      if (![_invalidRecipient write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_invalidCredentialsIsSet) {
    if (_invalidCredentials != nil) {
      if (![outProtocol writeFieldBeginWithName: @"invalidCredentials" type: TTypeSTRUCT fieldID: 8 error: __thriftError]) return NO;
      if (![_invalidCredentials write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTUserAPI_sendDirect_result("];
  [ms appendString: @"invalidSender:"];
  [ms appendFormat: @"%@", _invalidSender];
  [ms appendString: @",invalidRecipient:"];
  [ms appendFormat: @"%@", _invalidRecipient];
  [ms appendString: @",invalidCredentials:"];
  [ms appendFormat: @"%@", _invalidCredentials];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTUserAPI_updateConnections_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) NSMutableSet<NSData *> * newPeers;
- (NSSet<NSData *> *) newPeers __attribute__((objc_method_family(none)));
@property (assign, nonatomic) BOOL newPeersIsSet;
- (void) unsetNewPeers;

@property (strong, nonatomic) NSMutableSet<NSData *> * oldPeers;
@property (assign, nonatomic) BOOL oldPeersIsSet;
- (void) unsetOldPeers;


- (instancetype) initWithNewPeers: (NSSet<NSData *> *) newPeers oldPeers: (NSSet<NSData *> *) oldPeers;

@end

@implementation RTUserAPI_updateConnections_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithNewPeers: (NSSet<NSData *> *) newPeers oldPeers: (NSSet<NSData *> *) oldPeers
{
  self = [super init];
  if (self)  {
    _newPeers = [newPeers mutableCopy];
    _newPeersIsSet = YES;
    _oldPeers = [oldPeers mutableCopy];
    _oldPeersIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"newPeers"])
    {
      _newPeers = [decoder decodeObjectForKey: @"newPeers"];
      _newPeersIsSet = YES;
    }
    if ([decoder containsValueForKey: @"oldPeers"])
    {
      _oldPeers = [decoder decodeObjectForKey: @"oldPeers"];
      _oldPeersIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_newPeersIsSet)
  {
    [encoder encodeObject: _newPeers forKey: @"newPeers"];
  }
  if (_oldPeersIsSet)
  {
    [encoder encodeObject: _oldPeers forKey: @"oldPeers"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _newPeersIsSet ? 2654435761 : 0;
  if (_newPeersIsSet)
  {
    hash = (hash * 31) ^ [_newPeers hash];
  }
  hash = (hash * 31) ^ _oldPeersIsSet ? 2654435761 : 0;
  if (_oldPeersIsSet)
  {
    hash = (hash * 31) ^ [_oldPeers hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTUserAPI_updateConnections_args class]]) {
    return NO;
  }
  RTUserAPI_updateConnections_args *other = (RTUserAPI_updateConnections_args *)anObject;
  if ((_newPeersIsSet != other->_newPeersIsSet) ||
      (_newPeersIsSet && ((_newPeers || other->_newPeers) && ![_newPeers isEqual:other->_newPeers]))) {
    return NO;
  }
  if ((_oldPeersIsSet != other->_oldPeersIsSet) ||
      (_oldPeersIsSet && ((_oldPeers || other->_oldPeers) && ![_oldPeers isEqual:other->_oldPeers]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTUserAPI_updateConnections_args * val = [RTUserAPI_updateConnections_args new];
  val.newPeers = [self.newPeers copy];
  val.oldPeers = [self.oldPeers copy];
  return val;
}

- (void) setNewPeers: (NSMutableSet<NSData *> *) newPeers {
  _newPeers = newPeers;
  _newPeersIsSet = YES;
}

- (void) unsetNewPeers {
  _newPeers = nil;
  _newPeersIsSet = NO;
}

- (void) setOldPeers: (NSMutableSet<NSData *> *) oldPeers {
  _oldPeers = oldPeers;
  _oldPeersIsSet = YES;
}

- (void) unsetOldPeers {
  _oldPeers = nil;
  _oldPeersIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSET) {
          SInt32 _size67;
          if (![inProtocol readSetBeginReturningElementType: NULL size: &_size67 error: __thriftError]) return NO;
          NSMutableSet * fieldValue = [[NSMutableSet alloc] initWithCapacity: _size67];
          int _i68;
          for (_i68 = 0; _i68 < _size67; ++_i68)
          {
            NSData * _elem69;
            if (![inProtocol readBinary:&_elem69 error: __thriftError]) return NO;
            [fieldValue addObject: _elem69];
          }
          if (![inProtocol readSetEnd: __thriftError]) return NO;
          self.newPeers = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSET) {
          SInt32 _size70;
          if (![inProtocol readSetBeginReturningElementType: NULL size: &_size70 error: __thriftError]) return NO;
          NSMutableSet * fieldValue = [[NSMutableSet alloc] initWithCapacity: _size70];
          int _i71;
          for (_i71 = 0; _i71 < _size70; ++_i71)
          {
            NSData * _elem72;
            if (![inProtocol readBinary:&_elem72 error: __thriftError]) return NO;
            [fieldValue addObject: _elem72];
          }
          if (![inProtocol readSetEnd: __thriftError]) return NO;
          self.oldPeers = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"UserAPI_updateConnections_args" error: __thriftError]) return NO;
  if (_newPeersIsSet) {
    if (_newPeers != nil) {
      if (![outProtocol writeFieldBeginWithName: @"newPeers" type: TTypeSET fieldID: 1 error: __thriftError]) return NO;
      {
        if (![outProtocol writeSetBeginWithElementType: TTypeSTRING size: (SInt32)[_newPeers count] error: __thriftError]) return NO;
        NSEnumerator * _iter73 = [_newPeers objectEnumerator];
        id obj74;
        while ((obj74 = [_iter73 nextObject]))
        {
          if (![outProtocol writeBinary: obj74 error: __thriftError]) return NO;
        }
        if (![outProtocol writeSetEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_oldPeersIsSet) {
    if (_oldPeers != nil) {
      if (![outProtocol writeFieldBeginWithName: @"oldPeers" type: TTypeSET fieldID: 2 error: __thriftError]) return NO;
      {
        if (![outProtocol writeSetBeginWithElementType: TTypeSTRING size: (SInt32)[_oldPeers count] error: __thriftError]) return NO;
        NSEnumerator * _iter75 = [_oldPeers objectEnumerator];
        id obj76;
        while ((obj76 = [_iter75 nextObject]))
        {
          if (![outProtocol writeBinary: obj76 error: __thriftError]) return NO;
        }
        if (![outProtocol writeSetEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTUserAPI_updateConnections_args("];
  [ms appendString: @"newPeers:"];
  [ms appendFormat: @"%@", _newPeers];
  [ms appendString: @",oldPeers:"];
  [ms appendFormat: @"%@", _oldPeers];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTUserAPI_updateConnections_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RTMutableAliasSet success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;


- (instancetype) initWithSuccess: (RTAliasSet) success;

@end

@implementation RTUserAPI_updateConnections_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (RTAliasSet) success
{
  self = [super init];
  if (self)  {
    _success = [success mutableCopy];
    _successIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTUserAPI_updateConnections_result class]]) {
    return NO;
  }
  RTUserAPI_updateConnections_result *other = (RTUserAPI_updateConnections_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTUserAPI_updateConnections_result * val = [RTUserAPI_updateConnections_result new];
  val.success = [self.success copy];
  return val;
}

- (void) setSuccess: (NSMutableSet<RTAlias> *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSET) {
          SInt32 _size77;
          if (![inProtocol readSetBeginReturningElementType: NULL size: &_size77 error: __thriftError]) return NO;
          NSMutableSet * fieldValue = [[NSMutableSet alloc] initWithCapacity: _size77];
          int _i78;
          for (_i78 = 0; _i78 < _size77; ++_i78)
          {
            NSString * _elem79;
            if (![inProtocol readString:&_elem79 error: __thriftError]) return NO;
            [fieldValue addObject: _elem79];
          }
          if (![inProtocol readSetEnd: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"UserAPI_updateConnections_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSET fieldID: 0 error: __thriftError]) return NO;
      {
        if (![outProtocol writeSetBeginWithElementType: TTypeSTRING size: (SInt32)[_success count] error: __thriftError]) return NO;
        NSEnumerator * _iter80 = [_success objectEnumerator];
        id obj81;
        while ((obj81 = [_iter80 nextObject]))
        {
          if (![outProtocol writeString: obj81 error: __thriftError]) return NO;
        }
        if (![outProtocol writeSetEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTUserAPI_updateConnections_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTUserAPI_clearConnections_args : NSObject <TBase, NSCoding, NSCopying> 



@end

@implementation RTUserAPI_clearConnections_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTUserAPI_clearConnections_args class]]) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTUserAPI_clearConnections_args * val = [RTUserAPI_clearConnections_args new];
  return val;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"UserAPI_clearConnections_args" error: __thriftError]) return NO;
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTUserAPI_clearConnections_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTUserAPI_clearConnections_result : NSObject <TBase, NSCoding, NSCopying> 



@end

@implementation RTUserAPI_clearConnections_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTUserAPI_clearConnections_result class]]) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTUserAPI_clearConnections_result * val = [RTUserAPI_clearConnections_result new];
  return val;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"UserAPI_clearConnections_result" error: __thriftError]) return NO;

  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTUserAPI_clearConnections_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTUserAPI_generateInvite_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) NSString * inviteeAlias;
@property (assign, nonatomic) BOOL inviteeAliasIsSet;
- (void) unsetInviteeAlias;

@property (strong, nonatomic) NSString * inviteeName;
@property (assign, nonatomic) BOOL inviteeNameIsSet;
- (void) unsetInviteeName;

@property (strong, nonatomic) NSMutableDictionary<NSString *, NSString *> * params;
@property (assign, nonatomic) BOOL paramsIsSet;
- (void) unsetParams;


- (instancetype) initWithInviteeAlias: (NSString *) inviteeAlias inviteeName: (NSString *) inviteeName params: (NSDictionary<NSString *, NSString *> *) params;

@end

@implementation RTUserAPI_generateInvite_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithInviteeAlias: (NSString *) inviteeAlias inviteeName: (NSString *) inviteeName params: (NSDictionary<NSString *, NSString *> *) params
{
  self = [super init];
  if (self)  {
    _inviteeAlias = inviteeAlias;
    _inviteeAliasIsSet = YES;
    _inviteeName = inviteeName;
    _inviteeNameIsSet = YES;
    _params = [params mutableCopy];
    _paramsIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"inviteeAlias"])
    {
      _inviteeAlias = [decoder decodeObjectForKey: @"inviteeAlias"];
      _inviteeAliasIsSet = YES;
    }
    if ([decoder containsValueForKey: @"inviteeName"])
    {
      _inviteeName = [decoder decodeObjectForKey: @"inviteeName"];
      _inviteeNameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"params"])
    {
      _params = [decoder decodeObjectForKey: @"params"];
      _paramsIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_inviteeAliasIsSet)
  {
    [encoder encodeObject: _inviteeAlias forKey: @"inviteeAlias"];
  }
  if (_inviteeNameIsSet)
  {
    [encoder encodeObject: _inviteeName forKey: @"inviteeName"];
  }
  if (_paramsIsSet)
  {
    [encoder encodeObject: _params forKey: @"params"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _inviteeAliasIsSet ? 2654435761 : 0;
  if (_inviteeAliasIsSet)
  {
    hash = (hash * 31) ^ [_inviteeAlias hash];
  }
  hash = (hash * 31) ^ _inviteeNameIsSet ? 2654435761 : 0;
  if (_inviteeNameIsSet)
  {
    hash = (hash * 31) ^ [_inviteeName hash];
  }
  hash = (hash * 31) ^ _paramsIsSet ? 2654435761 : 0;
  if (_paramsIsSet)
  {
    hash = (hash * 31) ^ [_params hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTUserAPI_generateInvite_args class]]) {
    return NO;
  }
  RTUserAPI_generateInvite_args *other = (RTUserAPI_generateInvite_args *)anObject;
  if ((_inviteeAliasIsSet != other->_inviteeAliasIsSet) ||
      (_inviteeAliasIsSet && ((_inviteeAlias || other->_inviteeAlias) && ![_inviteeAlias isEqual:other->_inviteeAlias]))) {
    return NO;
  }
  if ((_inviteeNameIsSet != other->_inviteeNameIsSet) ||
      (_inviteeNameIsSet && ((_inviteeName || other->_inviteeName) && ![_inviteeName isEqual:other->_inviteeName]))) {
    return NO;
  }
  if ((_paramsIsSet != other->_paramsIsSet) ||
      (_paramsIsSet && ((_params || other->_params) && ![_params isEqual:other->_params]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTUserAPI_generateInvite_args * val = [RTUserAPI_generateInvite_args new];
  val.inviteeAlias = [self.inviteeAlias copy];
  val.inviteeName = [self.inviteeName copy];
  val.params = [self.params copy];
  return val;
}

- (void) setInviteeAlias: (NSString *) inviteeAlias {
  _inviteeAlias = inviteeAlias;
  _inviteeAliasIsSet = YES;
}

- (void) unsetInviteeAlias {
  _inviteeAlias = nil;
  _inviteeAliasIsSet = NO;
}

- (void) setInviteeName: (NSString *) inviteeName {
  _inviteeName = inviteeName;
  _inviteeNameIsSet = YES;
}

- (void) unsetInviteeName {
  _inviteeName = nil;
  _inviteeNameIsSet = NO;
}

- (void) setParams: (NSMutableDictionary<NSString *, NSString *> *) params {
  _params = params;
  _paramsIsSet = YES;
}

- (void) unsetParams {
  _params = nil;
  _paramsIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.inviteeAlias = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.inviteeName = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeMAP) {
          SInt32 _size82;
          if (![inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size82 error: __thriftError]) return NO;
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size82];
          int _i83;
          for (_i83 = 0; _i83 < _size82; ++_i83)
          {
            NSString * _key84;
            if (![inProtocol readString:&_key84 error: __thriftError]) return NO;
            NSString * _val85;
            if (![inProtocol readString:&_val85 error: __thriftError]) return NO;
            [fieldValue setObject: _val85 forKey: _key84];
          }
          if (![inProtocol readMapEnd: __thriftError]) return NO;
          self.params = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"UserAPI_generateInvite_args" error: __thriftError]) return NO;
  if (_inviteeAliasIsSet) {
    if (_inviteeAlias != nil) {
      if (![outProtocol writeFieldBeginWithName: @"inviteeAlias" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _inviteeAlias error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_inviteeNameIsSet) {
    if (_inviteeName != nil) {
      if (![outProtocol writeFieldBeginWithName: @"inviteeName" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _inviteeName error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_paramsIsSet) {
    if (_params != nil) {
      if (![outProtocol writeFieldBeginWithName: @"params" type: TTypeMAP fieldID: 3 error: __thriftError]) return NO;
      {
        if (![outProtocol writeMapBeginWithKeyType: TTypeSTRING valueType: TTypeSTRING size: (SInt32)[_params count] error: __thriftError]) return NO;
        NSEnumerator * _iter86 = [_params keyEnumerator];
        id key87;
        while ((key87 = [_iter86 nextObject]))
        {
          if (![outProtocol writeString: key87 error: __thriftError]) return NO;
          if (![outProtocol writeString: [_params objectForKey: key87] error: __thriftError]) return NO;
        }
        if (![outProtocol writeMapEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTUserAPI_generateInvite_args("];
  [ms appendString: @"inviteeAlias:"];
  [ms appendFormat: @"\"%@\"", _inviteeAlias];
  [ms appendString: @",inviteeName:"];
  [ms appendFormat: @"\"%@\"", _inviteeName];
  [ms appendString: @",params:"];
  [ms appendFormat: @"%@", _params];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTUserAPI_generateInvite_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RTInvite * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;

@property (strong, nonatomic) RTAliasInUse * aliasInUse;
@property (assign, nonatomic) BOOL aliasInUseIsSet;
- (void) unsetAliasInUse;

@property (strong, nonatomic) RTAliasAlreadyInvited * aliasAlreadyInvited;
@property (assign, nonatomic) BOOL aliasAlreadyInvitedIsSet;
- (void) unsetAliasAlreadyInvited;

@property (strong, nonatomic) RTInvalidAlias * invalidAlias;
@property (assign, nonatomic) BOOL invalidAliasIsSet;
- (void) unsetInvalidAlias;


- (instancetype) initWithSuccess: (RTInvite *) success aliasInUse: (RTAliasInUse *) aliasInUse aliasAlreadyInvited: (RTAliasAlreadyInvited *) aliasAlreadyInvited invalidAlias: (RTInvalidAlias *) invalidAlias;

@end

@implementation RTUserAPI_generateInvite_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (RTInvite *) success aliasInUse: (RTAliasInUse *) aliasInUse aliasAlreadyInvited: (RTAliasAlreadyInvited *) aliasAlreadyInvited invalidAlias: (RTInvalidAlias *) invalidAlias
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
    _aliasInUse = aliasInUse;
    _aliasInUseIsSet = YES;
    _aliasAlreadyInvited = aliasAlreadyInvited;
    _aliasAlreadyInvitedIsSet = YES;
    _invalidAlias = invalidAlias;
    _invalidAliasIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
    if ([decoder containsValueForKey: @"aliasInUse"])
    {
      _aliasInUse = [decoder decodeObjectForKey: @"aliasInUse"];
      _aliasInUseIsSet = YES;
    }
    if ([decoder containsValueForKey: @"aliasAlreadyInvited"])
    {
      _aliasAlreadyInvited = [decoder decodeObjectForKey: @"aliasAlreadyInvited"];
      _aliasAlreadyInvitedIsSet = YES;
    }
    if ([decoder containsValueForKey: @"invalidAlias"])
    {
      _invalidAlias = [decoder decodeObjectForKey: @"invalidAlias"];
      _invalidAliasIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
  if (_aliasInUseIsSet)
  {
    [encoder encodeObject: _aliasInUse forKey: @"aliasInUse"];
  }
  if (_aliasAlreadyInvitedIsSet)
  {
    [encoder encodeObject: _aliasAlreadyInvited forKey: @"aliasAlreadyInvited"];
  }
  if (_invalidAliasIsSet)
  {
    [encoder encodeObject: _invalidAlias forKey: @"invalidAlias"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  hash = (hash * 31) ^ _aliasInUseIsSet ? 2654435761 : 0;
  if (_aliasInUseIsSet)
  {
    hash = (hash * 31) ^ [_aliasInUse hash];
  }
  hash = (hash * 31) ^ _aliasAlreadyInvitedIsSet ? 2654435761 : 0;
  if (_aliasAlreadyInvitedIsSet)
  {
    hash = (hash * 31) ^ [_aliasAlreadyInvited hash];
  }
  hash = (hash * 31) ^ _invalidAliasIsSet ? 2654435761 : 0;
  if (_invalidAliasIsSet)
  {
    hash = (hash * 31) ^ [_invalidAlias hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTUserAPI_generateInvite_result class]]) {
    return NO;
  }
  RTUserAPI_generateInvite_result *other = (RTUserAPI_generateInvite_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  if ((_aliasInUseIsSet != other->_aliasInUseIsSet) ||
      (_aliasInUseIsSet && ((_aliasInUse || other->_aliasInUse) && ![_aliasInUse isEqual:other->_aliasInUse]))) {
    return NO;
  }
  if ((_aliasAlreadyInvitedIsSet != other->_aliasAlreadyInvitedIsSet) ||
      (_aliasAlreadyInvitedIsSet && ((_aliasAlreadyInvited || other->_aliasAlreadyInvited) && ![_aliasAlreadyInvited isEqual:other->_aliasAlreadyInvited]))) {
    return NO;
  }
  if ((_invalidAliasIsSet != other->_invalidAliasIsSet) ||
      (_invalidAliasIsSet && ((_invalidAlias || other->_invalidAlias) && ![_invalidAlias isEqual:other->_invalidAlias]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTUserAPI_generateInvite_result * val = [RTUserAPI_generateInvite_result new];
  val.success = [self.success copy];
  val.aliasInUse = [self.aliasInUse copy];
  val.aliasAlreadyInvited = [self.aliasAlreadyInvited copy];
  val.invalidAlias = [self.invalidAlias copy];
  return val;
}

- (void) setSuccess: (RTInvite *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (void) setAliasInUse: (RTAliasInUse *) aliasInUse {
  _aliasInUse = aliasInUse;
  _aliasInUseIsSet = YES;
}

- (void) unsetAliasInUse {
  _aliasInUse = nil;
  _aliasInUseIsSet = NO;
}

- (void) setAliasAlreadyInvited: (RTAliasAlreadyInvited *) aliasAlreadyInvited {
  _aliasAlreadyInvited = aliasAlreadyInvited;
  _aliasAlreadyInvitedIsSet = YES;
}

- (void) unsetAliasAlreadyInvited {
  _aliasAlreadyInvited = nil;
  _aliasAlreadyInvitedIsSet = NO;
}

- (void) setInvalidAlias: (RTInvalidAlias *) invalidAlias {
  _invalidAlias = invalidAlias;
  _invalidAliasIsSet = YES;
}

- (void) unsetInvalidAlias {
  _invalidAlias = nil;
  _invalidAliasIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSTRUCT) {
          RTInvite *fieldValue = [[RTInvite alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeSTRUCT) {
          RTAliasInUse *fieldValue = [[RTAliasInUse alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.aliasInUse = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 6:
        if (fieldType == TTypeSTRUCT) {
          RTAliasAlreadyInvited *fieldValue = [[RTAliasAlreadyInvited alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.aliasAlreadyInvited = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 7:
        if (fieldType == TTypeSTRUCT) {
          RTInvalidAlias *fieldValue = [[RTInvalidAlias alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.invalidAlias = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"UserAPI_generateInvite_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSTRUCT fieldID: 0 error: __thriftError]) return NO;
      if (![_success write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_aliasInUseIsSet) {
    if (_aliasInUse != nil) {
      if (![outProtocol writeFieldBeginWithName: @"aliasInUse" type: TTypeSTRUCT fieldID: 5 error: __thriftError]) return NO;
      if (![_aliasInUse write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_aliasAlreadyInvitedIsSet) {
    if (_aliasAlreadyInvited != nil) {
      if (![outProtocol writeFieldBeginWithName: @"aliasAlreadyInvited" type: TTypeSTRUCT fieldID: 6 error: __thriftError]) return NO;
      if (![_aliasAlreadyInvited write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_invalidAliasIsSet) {
    if (_invalidAlias != nil) {
      if (![outProtocol writeFieldBeginWithName: @"invalidAlias" type: TTypeSTRUCT fieldID: 7 error: __thriftError]) return NO;
      if (![_invalidAlias write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTUserAPI_generateInvite_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @",aliasInUse:"];
  [ms appendFormat: @"%@", _aliasInUse];
  [ms appendString: @",aliasAlreadyInvited:"];
  [ms appendFormat: @"%@", _aliasAlreadyInvited];
  [ms appendString: @",invalidAlias:"];
  [ms appendFormat: @"%@", _invalidAlias];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTUserAPIClient () {

  id<TProtocol> inProtocol;
  id<TProtocol> outProtocol;

}

@end

@implementation RTUserAPIClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  if (self)   {
    inProtocol = anInProtocol;
    outProtocol = anOutProtocol;
  }
  return self;
}

- (BOOL) send_registerNotifications: (RTNotificationType) type platform: (NSString *) platform token: (NSData *) token error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"registerNotifications" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"UserAPI_registerNotifications_args" error: __thriftError]) return NO;
  if (![outProtocol writeFieldBeginWithName: @"type" type: TTypeI32 fieldID: 1 error: __thriftError]) return NO;
  if (![outProtocol writeI32: type error: __thriftError]) return NO;
  if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  if (platform != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"platform" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeString: platform error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (token != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"token" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
    if (![outProtocol writeBinary: token error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_registerNotifications: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTUserAPI_registerNotifications_result * resulter = [RTUserAPI_registerNotifications_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) registerNotifications: (RTNotificationType) type platform: (NSString *) platform token: (NSData *) token error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_registerNotifications : type platform: platform token: token error: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  if (![self recv_registerNotifications: __thriftError]) return NO;
  return YES;
}

- (BOOL) send_updateCertificates: (NSData *) encryptionCSR signingCSR: (NSData *) signingCSR error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"updateCertificates" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"UserAPI_updateCertificates_args" error: __thriftError]) return NO;
  if (encryptionCSR != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"encryptionCSR" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeBinary: encryptionCSR error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (signingCSR != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"signingCSR" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeBinary: signingCSR error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_updateCertificates: (RTCertificateSet * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTUserAPI_updateCertificates_result * resulter = [RTUserAPI_updateCertificates_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"updateCertificates"}];
  }
  return NO;
}

- (RTCertificateSet *) updateCertificates: (NSData *) encryptionCSR signingCSR: (NSData *) signingCSR error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_updateCertificates : encryptionCSR signingCSR: signingCSR error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  RTCertificateSet * __result;
  if (![self recv_updateCertificates: &__result error: __thriftError]) return nil;
  return __result;
}

- (BOOL) send_updateAvatar: (RTImage *) avatar error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"updateAvatar" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"UserAPI_updateAvatar_args" error: __thriftError]) return NO;
  if (avatar != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"avatar" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![avatar write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_updateAvatar: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTUserAPI_updateAvatar_result * resulter = [RTUserAPI_updateAvatar_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) updateAvatar: (RTImage *) avatar error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_updateAvatar : avatar error: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  if (![self recv_updateAvatar: __thriftError]) return NO;
  return YES;
}

- (BOOL) send_listAliases: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"listAliases" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"UserAPI_listAliases_args" error: __thriftError]) return NO;
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_listAliases: (RTMutableAliasSet *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTUserAPI_listAliases_result * resulter = [RTUserAPI_listAliases_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"listAliases"}];
  }
  return NO;
}

- (RTAliasSet) listAliases: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_listAliases: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  RTMutableAliasSet __result;
  if (![self recv_listAliases: &__result error: __thriftError]) return nil;
  return __result;
}

- (BOOL) send_registerAlias: (RTAuthenticatedAlias *) authenticatedAlias error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"registerAlias" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"UserAPI_registerAlias_args" error: __thriftError]) return NO;
  if (authenticatedAlias != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"authenticatedAlias" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![authenticatedAlias write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_registerAlias: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTUserAPI_registerAlias_result * resulter = [RTUserAPI_registerAlias_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.aliasInUseIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter aliasInUse];
    }
    return NO;
  }
  if (resulter.aliasPinInvalidIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter aliasPinInvalid];
    }
    return NO;
  }
  if (resulter.aliasNoAuthIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter aliasNoAuth];
    }
    return NO;
  }
  return YES;
}

- (BOOL) registerAlias: (RTAuthenticatedAlias *) authenticatedAlias error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_registerAlias : authenticatedAlias error: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  if (![self recv_registerAlias: __thriftError]) return NO;
  return YES;
}

- (BOOL) send_unregisterAlias: (RTAlias) name error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"unregisterAlias" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"UserAPI_unregisterAlias_args" error: __thriftError]) return NO;
  if (name != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"name" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeString: name error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_unregisterAlias: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTUserAPI_unregisterAlias_result * resulter = [RTUserAPI_unregisterAlias_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) unregisterAlias: (RTAlias) name error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_unregisterAlias : name error: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  if (![self recv_unregisterAlias: __thriftError]) return NO;
  return YES;
}

- (BOOL) send_listDevices: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"listDevices" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"UserAPI_listDevices_args" error: __thriftError]) return NO;
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_listDevices: (NSMutableArray<RTDeviceInfo *> * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTUserAPI_listDevices_result * resulter = [RTUserAPI_listDevices_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"listDevices"}];
  }
  return NO;
}

- (NSArray<RTDeviceInfo *> *) listDevices: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_listDevices: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  NSMutableArray<RTDeviceInfo *> * __result;
  if (![self recv_listDevices: &__result error: __thriftError]) return nil;
  return __result;
}

- (BOOL) send_updateDeviceActiveAliases: (RTId *) deviceId activeAliases: (RTAliasSet) activeAliases error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"updateDeviceActiveAliases" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"UserAPI_updateDeviceActiveAliases_args" error: __thriftError]) return NO;
  if (deviceId != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"deviceId" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![deviceId write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (activeAliases != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"activeAliases" type: TTypeSET fieldID: 2 error: __thriftError]) return NO;
    {
      if (![outProtocol writeSetBeginWithElementType: TTypeSTRING size: (SInt32)[activeAliases count] error: __thriftError]) return NO;
      NSEnumerator * _iter88 = [activeAliases objectEnumerator];
      id obj89;
      while ((obj89 = [_iter88 nextObject]))
      {
        if (![outProtocol writeString: obj89 error: __thriftError]) return NO;
      }
      if (![outProtocol writeSetEnd: __thriftError]) return NO;
    }
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_updateDeviceActiveAliases: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTUserAPI_updateDeviceActiveAliases_result * resulter = [RTUserAPI_updateDeviceActiveAliases_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) updateDeviceActiveAliases: (RTId *) deviceId activeAliases: (RTAliasSet) activeAliases error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_updateDeviceActiveAliases : deviceId activeAliases: activeAliases error: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  if (![self recv_updateDeviceActiveAliases: __thriftError]) return NO;
  return YES;
}

- (BOOL) send_fetchWaiting: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"fetchWaiting" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"UserAPI_fetchWaiting_args" error: __thriftError]) return NO;
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_fetchWaiting: (NSMutableArray<RTMsgHdr *> * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTUserAPI_fetchWaiting_result * resulter = [RTUserAPI_fetchWaiting_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"fetchWaiting"}];
  }
  return NO;
}

- (NSArray<RTMsgHdr *> *) fetchWaiting: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_fetchWaiting: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  NSMutableArray<RTMsgHdr *> * __result;
  if (![self recv_fetchWaiting: &__result error: __thriftError]) return nil;
  return __result;
}

- (BOOL) send_fetch: (RTId *) msgId error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"fetch" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"UserAPI_fetch_args" error: __thriftError]) return NO;
  if (msgId != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"msgId" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![msgId write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_fetch: (RTMsg * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTUserAPI_fetch_result * resulter = [RTUserAPI_fetch_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"fetch"}];
  }
  return NO;
}

- (RTMsg *) fetch: (RTId *) msgId error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_fetch : msgId error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  RTMsg * __result;
  if (![self recv_fetch: &__result error: __thriftError]) return nil;
  return __result;
}

- (BOOL) send_ack: (RTId *) msgId sent: (RTTimeStamp) sent error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"ack" type: TMessageTypeONEWAY sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"UserAPI_ack_args" error: __thriftError]) return NO;
  if (msgId != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"msgId" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![msgId write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldBeginWithName: @"sent" type: TTypeI64 fieldID: 2 error: __thriftError]) return NO;
  if (![outProtocol writeI64: sent error: __thriftError]) return NO;
  if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) ack: (RTId *) msgId sent: (RTTimeStamp) sent error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_ack : msgId sent: sent error: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) send_send: (RTMsgPack *) msgPack error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"send" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"UserAPI_send_args" error: __thriftError]) return NO;
  if (msgPack != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"msgPack" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![msgPack write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_send: (RTTimeStamp *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTUserAPI_send_result * resulter = [RTUserAPI_send_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (resulter.invalidSenderIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter invalidSender];
    }
    return NO;
  }
  if (resulter.invalidRecipientIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter invalidRecipient];
    }
    return NO;
  }
  if (resulter.invalidCredentialsIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter invalidCredentials];
    }
    return NO;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"send"}];
  }
  return NO;
}

- (NSNumber *) send: (RTMsgPack *) msgPack error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_send : msgPack error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  RTTimeStamp __result;
  if (![self recv_send: &__result error: __thriftError]) return nil;
  return @(__result);
}

- (BOOL) send_sendUserStatus: (RTAlias) sender recipient: (RTAlias) recipient status: (RTUserStatus) status error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"sendUserStatus" type: TMessageTypeONEWAY sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"UserAPI_sendUserStatus_args" error: __thriftError]) return NO;
  if (sender != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"sender" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeString: sender error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (recipient != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"recipient" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeString: recipient error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldBeginWithName: @"status" type: TTypeI32 fieldID: 3 error: __thriftError]) return NO;
  if (![outProtocol writeI32: status error: __thriftError]) return NO;
  if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) sendUserStatus: (RTAlias) sender recipient: (RTAlias) recipient status: (RTUserStatus) status error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_sendUserStatus : sender recipient: recipient status: status error: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) send_sendGroupStatus: (RTAlias) sender group: (RTGroup *) group status: (RTUserStatus) status error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"sendGroupStatus" type: TMessageTypeONEWAY sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"UserAPI_sendGroupStatus_args" error: __thriftError]) return NO;
  if (sender != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"sender" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeString: sender error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (group != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"group" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
    if (![group write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldBeginWithName: @"status" type: TTypeI32 fieldID: 3 error: __thriftError]) return NO;
  if (![outProtocol writeI32: status error: __thriftError]) return NO;
  if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) sendGroupStatus: (RTAlias) sender group: (RTGroup *) group status: (RTUserStatus) status error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_sendGroupStatus : sender group: group status: status error: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) send_sendDirect: (RTId *) msgId msgType: (NSString *) msgType msgData: (NSData *) msgData sender: (NSString *) sender envelopes: (RTDirectEnvelopeList) envelopes error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"sendDirect" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"UserAPI_sendDirect_args" error: __thriftError]) return NO;
  if (msgId != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"msgId" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![msgId write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (msgType != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"msgType" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeString: msgType error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (msgData != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"msgData" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
    if (![outProtocol writeBinary: msgData error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (sender != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"sender" type: TTypeSTRING fieldID: 4 error: __thriftError]) return NO;
    if (![outProtocol writeString: sender error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (envelopes != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"envelopes" type: TTypeLIST fieldID: 5 error: __thriftError]) return NO;
    {
      if (![outProtocol writeListBeginWithElementType: TTypeSTRUCT size: (SInt32)[envelopes count] error: __thriftError]) return NO;
      int idx91;
      for (idx91 = 0; idx91 < [envelopes count]; idx91++)
      {
        if (![[envelopes objectAtIndex: idx91] write: outProtocol error: __thriftError]) return NO;
      }
      if (![outProtocol writeListEnd: __thriftError]) return NO;
    }
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_sendDirect: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTUserAPI_sendDirect_result * resulter = [RTUserAPI_sendDirect_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.invalidSenderIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter invalidSender];
    }
    return NO;
  }
  if (resulter.invalidRecipientIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter invalidRecipient];
    }
    return NO;
  }
  if (resulter.invalidCredentialsIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter invalidCredentials];
    }
    return NO;
  }
  return YES;
}

- (BOOL) sendDirect: (RTId *) msgId msgType: (NSString *) msgType msgData: (NSData *) msgData sender: (NSString *) sender envelopes: (RTDirectEnvelopeList) envelopes error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_sendDirect : msgId msgType: msgType msgData: msgData sender: sender envelopes: envelopes error: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  if (![self recv_sendDirect: __thriftError]) return NO;
  return YES;
}

- (BOOL) send_updateConnections: (NSSet<NSData *> *) newPeers oldPeers: (NSSet<NSData *> *) oldPeers error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"updateConnections" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"UserAPI_updateConnections_args" error: __thriftError]) return NO;
  if (newPeers != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"newPeers" type: TTypeSET fieldID: 1 error: __thriftError]) return NO;
    {
      if (![outProtocol writeSetBeginWithElementType: TTypeSTRING size: (SInt32)[newPeers count] error: __thriftError]) return NO;
      NSEnumerator * _iter92 = [newPeers objectEnumerator];
      id obj93;
      while ((obj93 = [_iter92 nextObject]))
      {
        if (![outProtocol writeBinary: obj93 error: __thriftError]) return NO;
      }
      if (![outProtocol writeSetEnd: __thriftError]) return NO;
    }
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (oldPeers != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"oldPeers" type: TTypeSET fieldID: 2 error: __thriftError]) return NO;
    {
      if (![outProtocol writeSetBeginWithElementType: TTypeSTRING size: (SInt32)[oldPeers count] error: __thriftError]) return NO;
      NSEnumerator * _iter94 = [oldPeers objectEnumerator];
      id obj95;
      while ((obj95 = [_iter94 nextObject]))
      {
        if (![outProtocol writeBinary: obj95 error: __thriftError]) return NO;
      }
      if (![outProtocol writeSetEnd: __thriftError]) return NO;
    }
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_updateConnections: (RTMutableAliasSet *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTUserAPI_updateConnections_result * resulter = [RTUserAPI_updateConnections_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"updateConnections"}];
  }
  return NO;
}

- (RTAliasSet) updateConnections: (NSSet<NSData *> *) newPeers oldPeers: (NSSet<NSData *> *) oldPeers error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_updateConnections : newPeers oldPeers: oldPeers error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  RTMutableAliasSet __result;
  if (![self recv_updateConnections: &__result error: __thriftError]) return nil;
  return __result;
}

- (BOOL) send_clearConnections: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"clearConnections" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"UserAPI_clearConnections_args" error: __thriftError]) return NO;
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_clearConnections: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTUserAPI_clearConnections_result * resulter = [RTUserAPI_clearConnections_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) clearConnections: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_clearConnections: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  if (![self recv_clearConnections: __thriftError]) return NO;
  return YES;
}

- (BOOL) send_generateInvite: (NSString *) inviteeAlias inviteeName: (NSString *) inviteeName params: (NSDictionary<NSString *, NSString *> *) params error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"generateInvite" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"UserAPI_generateInvite_args" error: __thriftError]) return NO;
  if (inviteeAlias != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"inviteeAlias" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeString: inviteeAlias error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (inviteeName != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"inviteeName" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeString: inviteeName error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (params != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"params" type: TTypeMAP fieldID: 3 error: __thriftError]) return NO;
    {
      if (![outProtocol writeMapBeginWithKeyType: TTypeSTRING valueType: TTypeSTRING size: (SInt32)[params count] error: __thriftError]) return NO;
      NSEnumerator * _iter96 = [params keyEnumerator];
      id key97;
      while ((key97 = [_iter96 nextObject]))
      {
        if (![outProtocol writeString: key97 error: __thriftError]) return NO;
        if (![outProtocol writeString: [params objectForKey: key97] error: __thriftError]) return NO;
      }
      if (![outProtocol writeMapEnd: __thriftError]) return NO;
    }
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_generateInvite: (RTInvite * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTUserAPI_generateInvite_result * resulter = [RTUserAPI_generateInvite_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (resulter.aliasInUseIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter aliasInUse];
    }
    return NO;
  }
  if (resulter.aliasAlreadyInvitedIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter aliasAlreadyInvited];
    }
    return NO;
  }
  if (resulter.invalidAliasIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter invalidAlias];
    }
    return NO;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"generateInvite"}];
  }
  return NO;
}

- (RTInvite *) generateInvite: (NSString *) inviteeAlias inviteeName: (NSString *) inviteeName params: (NSDictionary<NSString *, NSString *> *) params error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_generateInvite : inviteeAlias inviteeName: inviteeName params: params error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  RTInvite * __result;
  if (![self recv_generateInvite: &__result error: __thriftError]) return nil;
  return __result;
}

@end

@interface RTUserAPIProcessor () {
  id <RTUserAPI> service;
  NSDictionary * methodMap;
}
@end

@implementation RTUserAPIProcessor

- (id) initWithUserAPI: (id <RTUserAPI>) aService
{
  self = [super init];
  if (self)   {
    service = aService;
    methodMap = [NSMutableDictionary dictionary];
    {
      SEL s = @selector(process_registerNotifications_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"registerNotifications"];
    }
    {
      SEL s = @selector(process_updateCertificates_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"updateCertificates"];
    }
    {
      SEL s = @selector(process_updateAvatar_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"updateAvatar"];
    }
    {
      SEL s = @selector(process_listAliases_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"listAliases"];
    }
    {
      SEL s = @selector(process_registerAlias_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"registerAlias"];
    }
    {
      SEL s = @selector(process_unregisterAlias_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"unregisterAlias"];
    }
    {
      SEL s = @selector(process_listDevices_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"listDevices"];
    }
    {
      SEL s = @selector(process_updateDeviceActiveAliases_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"updateDeviceActiveAliases"];
    }
    {
      SEL s = @selector(process_fetchWaiting_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"fetchWaiting"];
    }
    {
      SEL s = @selector(process_fetch_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"fetch"];
    }
    {
      SEL s = @selector(process_ack_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"ack"];
    }
    {
      SEL s = @selector(process_send_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"send"];
    }
    {
      SEL s = @selector(process_sendUserStatus_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"sendUserStatus"];
    }
    {
      SEL s = @selector(process_sendGroupStatus_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"sendGroupStatus"];
    }
    {
      SEL s = @selector(process_sendDirect_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"sendDirect"];
    }
    {
      SEL s = @selector(process_updateConnections_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"updateConnections"];
    }
    {
      SEL s = @selector(process_clearConnections_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"clearConnections"];
    }
    {
      SEL s = @selector(process_generateInvite_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"generateInvite"];
    }
  }
  return self;
}

- (id<RTUserAPI>) service
{
  return service;
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
                          error: (NSError *__autoreleasing *)__thriftError
{
  NSString * messageName;
  SInt32 messageType;
  SInt32 seqID;
  if (![inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID
                                      error: __thriftError]) return NO;
  NSInvocation * invocation = [methodMap valueForKey: messageName];
  if (invocation == nil) {
    if (![TProtocolUtil skipType: TTypeSTRUCT onProtocol: inProtocol error: __thriftError]) return NO;
    if (![inProtocol readMessageEnd: __thriftError]) return NO;
    NSError * x = [NSError errorWithDomain: TApplicationErrorDomain
                                      code: TApplicationErrorUnknownMethod
                                  userInfo: @{TApplicationErrorMethodKey: messageName}];
    if (![outProtocol writeMessageBeginWithName: messageName
                                           type: TMessageTypeEXCEPTION
                                     sequenceID: seqID
                                          error: __thriftError]) return NO;
    if (![x write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeMessageEnd: __thriftError]) return NO;
    if (![[outProtocol transport] flush: __thriftError]) return NO;
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setArgument: &__thriftError atIndex: 5];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (BOOL) process_registerNotifications_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  RTUserAPI_registerNotifications_args * args = [RTUserAPI_registerNotifications_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  RTUserAPI_registerNotifications_result * result = [RTUserAPI_registerNotifications_result new];
  BOOL serviceResult = [service registerNotifications: [args type] platform: [args platform] token: [args token] error: __thriftError];
  if (!serviceResult) return NO;
  if (![outProtocol writeMessageBeginWithName: @"registerNotifications"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_updateCertificates_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  RTUserAPI_updateCertificates_args * args = [RTUserAPI_updateCertificates_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  RTUserAPI_updateCertificates_result * result = [RTUserAPI_updateCertificates_result new];
  RTCertificateSet * serviceResult = [service updateCertificates: [args encryptionCSR] signingCSR: [args signingCSR] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"updateCertificates"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_updateAvatar_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  RTUserAPI_updateAvatar_args * args = [RTUserAPI_updateAvatar_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  RTUserAPI_updateAvatar_result * result = [RTUserAPI_updateAvatar_result new];
  BOOL serviceResult = [service updateAvatar: [args avatar] error: __thriftError];
  if (!serviceResult) return NO;
  if (![outProtocol writeMessageBeginWithName: @"updateAvatar"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_listAliases_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  RTUserAPI_listAliases_args * args = [RTUserAPI_listAliases_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  RTUserAPI_listAliases_result * result = [RTUserAPI_listAliases_result new];
  RTMutableAliasSet serviceResult = (RTMutableAliasSet)[service listAliases: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"listAliases"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_registerAlias_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  RTUserAPI_registerAlias_args * args = [RTUserAPI_registerAlias_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  RTUserAPI_registerAlias_result * result = [RTUserAPI_registerAlias_result new];
  BOOL serviceResult = [service registerAlias: [args authenticatedAlias] error: __thriftError];
  if (!serviceResult) return NO;
  if (![outProtocol writeMessageBeginWithName: @"registerAlias"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_unregisterAlias_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  RTUserAPI_unregisterAlias_args * args = [RTUserAPI_unregisterAlias_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  RTUserAPI_unregisterAlias_result * result = [RTUserAPI_unregisterAlias_result new];
  BOOL serviceResult = [service unregisterAlias: [args name] error: __thriftError];
  if (!serviceResult) return NO;
  if (![outProtocol writeMessageBeginWithName: @"unregisterAlias"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_listDevices_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  RTUserAPI_listDevices_args * args = [RTUserAPI_listDevices_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  RTUserAPI_listDevices_result * result = [RTUserAPI_listDevices_result new];
  NSMutableArray<RTDeviceInfo *> * serviceResult = (NSMutableArray<RTDeviceInfo *> *)[service listDevices: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"listDevices"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_updateDeviceActiveAliases_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  RTUserAPI_updateDeviceActiveAliases_args * args = [RTUserAPI_updateDeviceActiveAliases_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  RTUserAPI_updateDeviceActiveAliases_result * result = [RTUserAPI_updateDeviceActiveAliases_result new];
  BOOL serviceResult = [service updateDeviceActiveAliases: [args deviceId] activeAliases: [args activeAliases] error: __thriftError];
  if (!serviceResult) return NO;
  if (![outProtocol writeMessageBeginWithName: @"updateDeviceActiveAliases"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_fetchWaiting_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  RTUserAPI_fetchWaiting_args * args = [RTUserAPI_fetchWaiting_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  RTUserAPI_fetchWaiting_result * result = [RTUserAPI_fetchWaiting_result new];
  NSMutableArray<RTMsgHdr *> * serviceResult = (NSMutableArray<RTMsgHdr *> *)[service fetchWaiting: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"fetchWaiting"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_fetch_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  RTUserAPI_fetch_args * args = [RTUserAPI_fetch_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  RTUserAPI_fetch_result * result = [RTUserAPI_fetch_result new];
  RTMsg * serviceResult = [service fetch: [args msgId] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"fetch"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_ack_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  RTUserAPI_ack_args * args = [RTUserAPI_ack_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  BOOL serviceResult = [service ack: [args msgId] sent: [args sent] error: __thriftError];
  if (!serviceResult) return NO;
  return YES;
}

- (BOOL) process_send_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  RTUserAPI_send_args * args = [RTUserAPI_send_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  RTUserAPI_send_result * result = [RTUserAPI_send_result new];
  NSNumber * serviceResult = [service send: [args msgPack] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: ((SInt64)[serviceResult longLongValue])];
  if (![outProtocol writeMessageBeginWithName: @"send"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_sendUserStatus_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  RTUserAPI_sendUserStatus_args * args = [RTUserAPI_sendUserStatus_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  BOOL serviceResult = [service sendUserStatus: [args sender] recipient: [args recipient] status: [args status] error: __thriftError];
  if (!serviceResult) return NO;
  return YES;
}

- (BOOL) process_sendGroupStatus_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  RTUserAPI_sendGroupStatus_args * args = [RTUserAPI_sendGroupStatus_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  BOOL serviceResult = [service sendGroupStatus: [args sender] group: [args group] status: [args status] error: __thriftError];
  if (!serviceResult) return NO;
  return YES;
}

- (BOOL) process_sendDirect_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  RTUserAPI_sendDirect_args * args = [RTUserAPI_sendDirect_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  RTUserAPI_sendDirect_result * result = [RTUserAPI_sendDirect_result new];
  BOOL serviceResult = [service sendDirect: [args msgId] msgType: [args msgType] msgData: [args msgData] sender: [args sender] envelopes: [args envelopes] error: __thriftError];
  if (!serviceResult) return NO;
  if (![outProtocol writeMessageBeginWithName: @"sendDirect"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_updateConnections_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  RTUserAPI_updateConnections_args * args = [RTUserAPI_updateConnections_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  RTUserAPI_updateConnections_result * result = [RTUserAPI_updateConnections_result new];
  RTMutableAliasSet serviceResult = (RTMutableAliasSet)[service updateConnections: [args newPeers] oldPeers: [args oldPeers] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"updateConnections"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_clearConnections_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  RTUserAPI_clearConnections_args * args = [RTUserAPI_clearConnections_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  RTUserAPI_clearConnections_result * result = [RTUserAPI_clearConnections_result new];
  BOOL serviceResult = [service clearConnections: __thriftError];
  if (!serviceResult) return NO;
  if (![outProtocol writeMessageBeginWithName: @"clearConnections"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_generateInvite_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  RTUserAPI_generateInvite_args * args = [RTUserAPI_generateInvite_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  RTUserAPI_generateInvite_result * result = [RTUserAPI_generateInvite_result new];
  RTInvite * serviceResult = [service generateInvite: [args inviteeAlias] inviteeName: [args inviteeName] params: [args params] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"generateInvite"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}
@end

@interface RTUserAPIClientAsync () {

  id<TProtocolFactory> protocolFactory;
  id<TAsyncTransportFactory> transportFactory;

}

@end

@implementation RTUserAPIClientAsync

- (id) initWithProtocolFactory: (id <TProtocolFactory>) aProtocolFactory transportFactory: (id <TAsyncTransportFactory>) aTransportFactory;
{
  self = [super init];
  if (self) {
    protocolFactory = aProtocolFactory;
    transportFactory = aTransportFactory;
  }
  return self;
}

- (BOOL) send_registerNotifications: (RTNotificationType) type platform: (NSString *) platform token: (NSData *) token protocol: (id<TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"registerNotifications" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"UserAPI_registerNotifications_args" error: __thriftError]) return NO;
  if (![outProtocol writeFieldBeginWithName: @"type" type: TTypeI32 fieldID: 1 error: __thriftError]) return NO;
  if (![outProtocol writeI32: type error: __thriftError]) return NO;
  if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  if (platform != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"platform" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeString: platform error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (token != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"token" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
    if (![outProtocol writeBinary: token error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_registerNotifications: (id<TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTUserAPI_registerNotifications_result * resulter = [RTUserAPI_registerNotifications_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  return YES;
}

- (void) registerNotifications: (RTNotificationType) type platform: (NSString *) platform token: (NSData *) token response: (void (^)()) responseBlock failure : (TAsyncFailureBlock) failureBlock
{
  NSError *thriftError;
  id<TAsyncTransport> transport = [transportFactory newTransport];
  id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

  if (![self send_registerNotifications : type platform: platform token: token protocol: protocol error: &thriftError])   {
    failureBlock(thriftError);
    return;
  }
  [transport flushWithCompletion:^{
    NSError *thriftError;
    if (![self recv_registerNotifications: protocol error: &thriftError])     {
      failureBlock(thriftError);
      return;
    }
    responseBlock();
  } failure:failureBlock];
}

- (AnyPromise *) registerNotifications: (RTNotificationType) type platform: (NSString *) platform token: (NSData *) token
{
  return [AnyPromise promiseWithResolverBlock:^(PMKResolver resolver) {
    NSError *thriftError;
    id<TAsyncTransport> transport = [transportFactory newTransport];
    id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

    if (![self send_registerNotifications : type platform: platform token: token protocol: protocol error: &thriftError])     {
      resolver(thriftError);
      return;
    }
    [transport flushWithCompletion:^{
      NSError *thriftError;
      if (![self recv_registerNotifications: protocol error: &thriftError])       {
        resolver(thriftError);
        return;
      }
      resolver(@YES);
    } failure:^(NSError *error) {
      resolver(error);
    }];
  }];
}

- (BOOL) send_updateCertificates: (NSData *) encryptionCSR signingCSR: (NSData *) signingCSR protocol: (id<TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"updateCertificates" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"UserAPI_updateCertificates_args" error: __thriftError]) return NO;
  if (encryptionCSR != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"encryptionCSR" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeBinary: encryptionCSR error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (signingCSR != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"signingCSR" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeBinary: signingCSR error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_updateCertificates: (RTCertificateSet * *) result protocol: (id<TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTUserAPI_updateCertificates_result * resulter = [RTUserAPI_updateCertificates_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"updateCertificates"}];
  }
  return NO;
}

- (void) updateCertificates: (NSData *) encryptionCSR signingCSR: (NSData *) signingCSR response: (void (^)(RTCertificateSet *)) responseBlock failure : (TAsyncFailureBlock) failureBlock
{
  NSError *thriftError;
  id<TAsyncTransport> transport = [transportFactory newTransport];
  id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

  if (![self send_updateCertificates : encryptionCSR signingCSR: signingCSR protocol: protocol error: &thriftError])   {
    failureBlock(thriftError);
    return;
  }
  [transport flushWithCompletion:^{
    NSError *thriftError;
    RTCertificateSet * result;
    if (![self recv_updateCertificates: &result protocol: protocol error: &thriftError])     {
      failureBlock(thriftError);
      return;
    }
    responseBlock(result);
  } failure:failureBlock];
}

- (AnyPromise *) updateCertificates: (NSData *) encryptionCSR signingCSR: (NSData *) signingCSR
{
  return [AnyPromise promiseWithResolverBlock:^(PMKResolver resolver) {
    NSError *thriftError;
    id<TAsyncTransport> transport = [transportFactory newTransport];
    id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

    if (![self send_updateCertificates : encryptionCSR signingCSR: signingCSR protocol: protocol error: &thriftError])     {
      resolver(thriftError);
      return;
    }
    [transport flushWithCompletion:^{
      NSError *thriftError;
      RTCertificateSet * result;
      if (![self recv_updateCertificates: &result protocol: protocol error: &thriftError])       {
        resolver(thriftError);
        return;
      }
      resolver(result);
    } failure:^(NSError *error) {
      resolver(error);
    }];
  }];
}

- (BOOL) send_updateAvatar: (RTImage *) avatar protocol: (id<TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"updateAvatar" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"UserAPI_updateAvatar_args" error: __thriftError]) return NO;
  if (avatar != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"avatar" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![avatar write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_updateAvatar: (id<TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTUserAPI_updateAvatar_result * resulter = [RTUserAPI_updateAvatar_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  return YES;
}

- (void) updateAvatar: (RTImage *) avatar response: (void (^)()) responseBlock failure : (TAsyncFailureBlock) failureBlock
{
  NSError *thriftError;
  id<TAsyncTransport> transport = [transportFactory newTransport];
  id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

  if (![self send_updateAvatar : avatar protocol: protocol error: &thriftError])   {
    failureBlock(thriftError);
    return;
  }
  [transport flushWithCompletion:^{
    NSError *thriftError;
    if (![self recv_updateAvatar: protocol error: &thriftError])     {
      failureBlock(thriftError);
      return;
    }
    responseBlock();
  } failure:failureBlock];
}

- (AnyPromise *) updateAvatar: (RTImage *) avatar
{
  return [AnyPromise promiseWithResolverBlock:^(PMKResolver resolver) {
    NSError *thriftError;
    id<TAsyncTransport> transport = [transportFactory newTransport];
    id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

    if (![self send_updateAvatar : avatar protocol: protocol error: &thriftError])     {
      resolver(thriftError);
      return;
    }
    [transport flushWithCompletion:^{
      NSError *thriftError;
      if (![self recv_updateAvatar: protocol error: &thriftError])       {
        resolver(thriftError);
        return;
      }
      resolver(@YES);
    } failure:^(NSError *error) {
      resolver(error);
    }];
  }];
}

- (BOOL) send_listAliases: (id<TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"listAliases" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"UserAPI_listAliases_args" error: __thriftError]) return NO;
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_listAliases: (RTMutableAliasSet *) result protocol: (id<TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTUserAPI_listAliases_result * resulter = [RTUserAPI_listAliases_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"listAliases"}];
  }
  return NO;
}

- (void) listAliases: (void (^)(RTAliasSet)) responseBlock failure : (TAsyncFailureBlock) failureBlock
{
  NSError *thriftError;
  id<TAsyncTransport> transport = [transportFactory newTransport];
  id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

  if (![self send_listAliases: protocol error: &thriftError])   {
    failureBlock(thriftError);
    return;
  }
  [transport flushWithCompletion:^{
    NSError *thriftError;
    RTAliasSet result;
    if (![self recv_listAliases: &result protocol: protocol error: &thriftError])     {
      failureBlock(thriftError);
      return;
    }
    responseBlock(result);
  } failure:failureBlock];
}

- (AnyPromise *) listAliases
{
  return [AnyPromise promiseWithResolverBlock:^(PMKResolver resolver) {
    NSError *thriftError;
    id<TAsyncTransport> transport = [transportFactory newTransport];
    id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

    if (![self send_listAliases: protocol error: &thriftError])     {
      resolver(thriftError);
      return;
    }
    [transport flushWithCompletion:^{
      NSError *thriftError;
      RTAliasSet result;
      if (![self recv_listAliases: &result protocol: protocol error: &thriftError])       {
        resolver(thriftError);
        return;
      }
      resolver(result);
    } failure:^(NSError *error) {
      resolver(error);
    }];
  }];
}

- (BOOL) send_registerAlias: (RTAuthenticatedAlias *) authenticatedAlias protocol: (id<TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"registerAlias" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"UserAPI_registerAlias_args" error: __thriftError]) return NO;
  if (authenticatedAlias != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"authenticatedAlias" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![authenticatedAlias write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_registerAlias: (id<TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTUserAPI_registerAlias_result * resulter = [RTUserAPI_registerAlias_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.aliasInUseIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter aliasInUse];
    }
    return NO;
  }
  if (resulter.aliasPinInvalidIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter aliasPinInvalid];
    }
    return NO;
  }
  if (resulter.aliasNoAuthIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter aliasNoAuth];
    }
    return NO;
  }
  return YES;
}

- (void) registerAlias: (RTAuthenticatedAlias *) authenticatedAlias response: (void (^)()) responseBlock failure : (TAsyncFailureBlock) failureBlock
{
  NSError *thriftError;
  id<TAsyncTransport> transport = [transportFactory newTransport];
  id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

  if (![self send_registerAlias : authenticatedAlias protocol: protocol error: &thriftError])   {
    failureBlock(thriftError);
    return;
  }
  [transport flushWithCompletion:^{
    NSError *thriftError;
    if (![self recv_registerAlias: protocol error: &thriftError])     {
      failureBlock(thriftError);
      return;
    }
    responseBlock();
  } failure:failureBlock];
}

- (AnyPromise *) registerAlias: (RTAuthenticatedAlias *) authenticatedAlias
{
  return [AnyPromise promiseWithResolverBlock:^(PMKResolver resolver) {
    NSError *thriftError;
    id<TAsyncTransport> transport = [transportFactory newTransport];
    id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

    if (![self send_registerAlias : authenticatedAlias protocol: protocol error: &thriftError])     {
      resolver(thriftError);
      return;
    }
    [transport flushWithCompletion:^{
      NSError *thriftError;
      if (![self recv_registerAlias: protocol error: &thriftError])       {
        resolver(thriftError);
        return;
      }
      resolver(@YES);
    } failure:^(NSError *error) {
      resolver(error);
    }];
  }];
}

- (BOOL) send_unregisterAlias: (RTAlias) name protocol: (id<TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"unregisterAlias" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"UserAPI_unregisterAlias_args" error: __thriftError]) return NO;
  if (name != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"name" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeString: name error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_unregisterAlias: (id<TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTUserAPI_unregisterAlias_result * resulter = [RTUserAPI_unregisterAlias_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  return YES;
}

- (void) unregisterAlias: (RTAlias) name response: (void (^)()) responseBlock failure : (TAsyncFailureBlock) failureBlock
{
  NSError *thriftError;
  id<TAsyncTransport> transport = [transportFactory newTransport];
  id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

  if (![self send_unregisterAlias : name protocol: protocol error: &thriftError])   {
    failureBlock(thriftError);
    return;
  }
  [transport flushWithCompletion:^{
    NSError *thriftError;
    if (![self recv_unregisterAlias: protocol error: &thriftError])     {
      failureBlock(thriftError);
      return;
    }
    responseBlock();
  } failure:failureBlock];
}

- (AnyPromise *) unregisterAlias: (RTAlias) name
{
  return [AnyPromise promiseWithResolverBlock:^(PMKResolver resolver) {
    NSError *thriftError;
    id<TAsyncTransport> transport = [transportFactory newTransport];
    id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

    if (![self send_unregisterAlias : name protocol: protocol error: &thriftError])     {
      resolver(thriftError);
      return;
    }
    [transport flushWithCompletion:^{
      NSError *thriftError;
      if (![self recv_unregisterAlias: protocol error: &thriftError])       {
        resolver(thriftError);
        return;
      }
      resolver(@YES);
    } failure:^(NSError *error) {
      resolver(error);
    }];
  }];
}

- (BOOL) send_listDevices: (id<TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"listDevices" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"UserAPI_listDevices_args" error: __thriftError]) return NO;
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_listDevices: (NSMutableArray<RTDeviceInfo *> * *) result protocol: (id<TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTUserAPI_listDevices_result * resulter = [RTUserAPI_listDevices_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"listDevices"}];
  }
  return NO;
}

- (void) listDevices: (void (^)(NSArray<RTDeviceInfo *> *)) responseBlock failure : (TAsyncFailureBlock) failureBlock
{
  NSError *thriftError;
  id<TAsyncTransport> transport = [transportFactory newTransport];
  id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

  if (![self send_listDevices: protocol error: &thriftError])   {
    failureBlock(thriftError);
    return;
  }
  [transport flushWithCompletion:^{
    NSError *thriftError;
    NSArray<RTDeviceInfo *> * result;
    if (![self recv_listDevices: &result protocol: protocol error: &thriftError])     {
      failureBlock(thriftError);
      return;
    }
    responseBlock(result);
  } failure:failureBlock];
}

- (AnyPromise *) listDevices
{
  return [AnyPromise promiseWithResolverBlock:^(PMKResolver resolver) {
    NSError *thriftError;
    id<TAsyncTransport> transport = [transportFactory newTransport];
    id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

    if (![self send_listDevices: protocol error: &thriftError])     {
      resolver(thriftError);
      return;
    }
    [transport flushWithCompletion:^{
      NSError *thriftError;
      NSArray<RTDeviceInfo *> * result;
      if (![self recv_listDevices: &result protocol: protocol error: &thriftError])       {
        resolver(thriftError);
        return;
      }
      resolver(result);
    } failure:^(NSError *error) {
      resolver(error);
    }];
  }];
}

- (BOOL) send_updateDeviceActiveAliases: (RTId *) deviceId activeAliases: (RTAliasSet) activeAliases protocol: (id<TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"updateDeviceActiveAliases" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"UserAPI_updateDeviceActiveAliases_args" error: __thriftError]) return NO;
  if (deviceId != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"deviceId" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![deviceId write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (activeAliases != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"activeAliases" type: TTypeSET fieldID: 2 error: __thriftError]) return NO;
    {
      if (![outProtocol writeSetBeginWithElementType: TTypeSTRING size: (SInt32)[activeAliases count] error: __thriftError]) return NO;
      NSEnumerator * _iter98 = [activeAliases objectEnumerator];
      id obj99;
      while ((obj99 = [_iter98 nextObject]))
      {
        if (![outProtocol writeString: obj99 error: __thriftError]) return NO;
      }
      if (![outProtocol writeSetEnd: __thriftError]) return NO;
    }
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_updateDeviceActiveAliases: (id<TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTUserAPI_updateDeviceActiveAliases_result * resulter = [RTUserAPI_updateDeviceActiveAliases_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  return YES;
}

- (void) updateDeviceActiveAliases: (RTId *) deviceId activeAliases: (RTAliasSet) activeAliases response: (void (^)()) responseBlock failure : (TAsyncFailureBlock) failureBlock
{
  NSError *thriftError;
  id<TAsyncTransport> transport = [transportFactory newTransport];
  id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

  if (![self send_updateDeviceActiveAliases : deviceId activeAliases: activeAliases protocol: protocol error: &thriftError])   {
    failureBlock(thriftError);
    return;
  }
  [transport flushWithCompletion:^{
    NSError *thriftError;
    if (![self recv_updateDeviceActiveAliases: protocol error: &thriftError])     {
      failureBlock(thriftError);
      return;
    }
    responseBlock();
  } failure:failureBlock];
}

- (AnyPromise *) updateDeviceActiveAliases: (RTId *) deviceId activeAliases: (RTAliasSet) activeAliases
{
  return [AnyPromise promiseWithResolverBlock:^(PMKResolver resolver) {
    NSError *thriftError;
    id<TAsyncTransport> transport = [transportFactory newTransport];
    id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

    if (![self send_updateDeviceActiveAliases : deviceId activeAliases: activeAliases protocol: protocol error: &thriftError])     {
      resolver(thriftError);
      return;
    }
    [transport flushWithCompletion:^{
      NSError *thriftError;
      if (![self recv_updateDeviceActiveAliases: protocol error: &thriftError])       {
        resolver(thriftError);
        return;
      }
      resolver(@YES);
    } failure:^(NSError *error) {
      resolver(error);
    }];
  }];
}

- (BOOL) send_fetchWaiting: (id<TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"fetchWaiting" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"UserAPI_fetchWaiting_args" error: __thriftError]) return NO;
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_fetchWaiting: (NSMutableArray<RTMsgHdr *> * *) result protocol: (id<TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTUserAPI_fetchWaiting_result * resulter = [RTUserAPI_fetchWaiting_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"fetchWaiting"}];
  }
  return NO;
}

- (void) fetchWaiting: (void (^)(NSArray<RTMsgHdr *> *)) responseBlock failure : (TAsyncFailureBlock) failureBlock
{
  NSError *thriftError;
  id<TAsyncTransport> transport = [transportFactory newTransport];
  id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

  if (![self send_fetchWaiting: protocol error: &thriftError])   {
    failureBlock(thriftError);
    return;
  }
  [transport flushWithCompletion:^{
    NSError *thriftError;
    NSArray<RTMsgHdr *> * result;
    if (![self recv_fetchWaiting: &result protocol: protocol error: &thriftError])     {
      failureBlock(thriftError);
      return;
    }
    responseBlock(result);
  } failure:failureBlock];
}

- (AnyPromise *) fetchWaiting
{
  return [AnyPromise promiseWithResolverBlock:^(PMKResolver resolver) {
    NSError *thriftError;
    id<TAsyncTransport> transport = [transportFactory newTransport];
    id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

    if (![self send_fetchWaiting: protocol error: &thriftError])     {
      resolver(thriftError);
      return;
    }
    [transport flushWithCompletion:^{
      NSError *thriftError;
      NSArray<RTMsgHdr *> * result;
      if (![self recv_fetchWaiting: &result protocol: protocol error: &thriftError])       {
        resolver(thriftError);
        return;
      }
      resolver(result);
    } failure:^(NSError *error) {
      resolver(error);
    }];
  }];
}

- (BOOL) send_fetch: (RTId *) msgId protocol: (id<TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"fetch" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"UserAPI_fetch_args" error: __thriftError]) return NO;
  if (msgId != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"msgId" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![msgId write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_fetch: (RTMsg * *) result protocol: (id<TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTUserAPI_fetch_result * resulter = [RTUserAPI_fetch_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"fetch"}];
  }
  return NO;
}

- (void) fetch: (RTId *) msgId response: (void (^)(RTMsg *)) responseBlock failure : (TAsyncFailureBlock) failureBlock
{
  NSError *thriftError;
  id<TAsyncTransport> transport = [transportFactory newTransport];
  id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

  if (![self send_fetch : msgId protocol: protocol error: &thriftError])   {
    failureBlock(thriftError);
    return;
  }
  [transport flushWithCompletion:^{
    NSError *thriftError;
    RTMsg * result;
    if (![self recv_fetch: &result protocol: protocol error: &thriftError])     {
      failureBlock(thriftError);
      return;
    }
    responseBlock(result);
  } failure:failureBlock];
}

- (AnyPromise *) fetch: (RTId *) msgId
{
  return [AnyPromise promiseWithResolverBlock:^(PMKResolver resolver) {
    NSError *thriftError;
    id<TAsyncTransport> transport = [transportFactory newTransport];
    id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

    if (![self send_fetch : msgId protocol: protocol error: &thriftError])     {
      resolver(thriftError);
      return;
    }
    [transport flushWithCompletion:^{
      NSError *thriftError;
      RTMsg * result;
      if (![self recv_fetch: &result protocol: protocol error: &thriftError])       {
        resolver(thriftError);
        return;
      }
      resolver(result);
    } failure:^(NSError *error) {
      resolver(error);
    }];
  }];
}

- (BOOL) send_ack: (RTId *) msgId sent: (RTTimeStamp) sent protocol: (id<TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"ack" type: TMessageTypeONEWAY sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"UserAPI_ack_args" error: __thriftError]) return NO;
  if (msgId != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"msgId" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![msgId write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldBeginWithName: @"sent" type: TTypeI64 fieldID: 2 error: __thriftError]) return NO;
  if (![outProtocol writeI64: sent error: __thriftError]) return NO;
  if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (void) ack: (RTId *) msgId sent: (RTTimeStamp) sent response: (void (^)()) responseBlock failure : (TAsyncFailureBlock) failureBlock
{
  NSError *thriftError;
  id<TAsyncTransport> transport = [transportFactory newTransport];
  id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

  if (![self send_ack : msgId sent: sent protocol: protocol error: &thriftError])   {
    failureBlock(thriftError);
    return;
  }
  [transport flushWithCompletion:^{
    responseBlock();
  } failure:failureBlock];
}

- (AnyPromise *) ack: (RTId *) msgId sent: (RTTimeStamp) sent
{
  return [AnyPromise promiseWithResolverBlock:^(PMKResolver resolver) {
    NSError *thriftError;
    id<TAsyncTransport> transport = [transportFactory newTransport];
    id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

    if (![self send_ack : msgId sent: sent protocol: protocol error: &thriftError])     {
      resolver(thriftError);
      return;
    }
    [transport flushWithCompletion:^{
      resolver(@YES);
    } failure:^(NSError *error) {
      resolver(error);
    }];
  }];
}

- (BOOL) send_send: (RTMsgPack *) msgPack protocol: (id<TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"send" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"UserAPI_send_args" error: __thriftError]) return NO;
  if (msgPack != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"msgPack" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![msgPack write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_send: (RTTimeStamp *) result protocol: (id<TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTUserAPI_send_result * resulter = [RTUserAPI_send_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (resulter.invalidSenderIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter invalidSender];
    }
    return NO;
  }
  if (resulter.invalidRecipientIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter invalidRecipient];
    }
    return NO;
  }
  if (resulter.invalidCredentialsIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter invalidCredentials];
    }
    return NO;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"send"}];
  }
  return NO;
}

- (void) send: (RTMsgPack *) msgPack response: (void (^)(RTTimeStamp)) responseBlock failure : (TAsyncFailureBlock) failureBlock
{
  NSError *thriftError;
  id<TAsyncTransport> transport = [transportFactory newTransport];
  id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

  if (![self send_send : msgPack protocol: protocol error: &thriftError])   {
    failureBlock(thriftError);
    return;
  }
  [transport flushWithCompletion:^{
    NSError *thriftError;
    RTTimeStamp result;
    if (![self recv_send: &result protocol: protocol error: &thriftError])     {
      failureBlock(thriftError);
      return;
    }
    responseBlock(result);
  } failure:failureBlock];
}

- (AnyPromise *) send: (RTMsgPack *) msgPack
{
  return [AnyPromise promiseWithResolverBlock:^(PMKResolver resolver) {
    NSError *thriftError;
    id<TAsyncTransport> transport = [transportFactory newTransport];
    id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

    if (![self send_send : msgPack protocol: protocol error: &thriftError])     {
      resolver(thriftError);
      return;
    }
    [transport flushWithCompletion:^{
      NSError *thriftError;
      RTTimeStamp result;
      if (![self recv_send: &result protocol: protocol error: &thriftError])       {
        resolver(thriftError);
        return;
      }
      resolver(@(result));
    } failure:^(NSError *error) {
      resolver(error);
    }];
  }];
}

- (BOOL) send_sendUserStatus: (RTAlias) sender recipient: (RTAlias) recipient status: (RTUserStatus) status protocol: (id<TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"sendUserStatus" type: TMessageTypeONEWAY sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"UserAPI_sendUserStatus_args" error: __thriftError]) return NO;
  if (sender != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"sender" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeString: sender error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (recipient != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"recipient" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeString: recipient error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldBeginWithName: @"status" type: TTypeI32 fieldID: 3 error: __thriftError]) return NO;
  if (![outProtocol writeI32: status error: __thriftError]) return NO;
  if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (void) sendUserStatus: (RTAlias) sender recipient: (RTAlias) recipient status: (RTUserStatus) status response: (void (^)()) responseBlock failure : (TAsyncFailureBlock) failureBlock
{
  NSError *thriftError;
  id<TAsyncTransport> transport = [transportFactory newTransport];
  id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

  if (![self send_sendUserStatus : sender recipient: recipient status: status protocol: protocol error: &thriftError])   {
    failureBlock(thriftError);
    return;
  }
  [transport flushWithCompletion:^{
    responseBlock();
  } failure:failureBlock];
}

- (AnyPromise *) sendUserStatus: (RTAlias) sender recipient: (RTAlias) recipient status: (RTUserStatus) status
{
  return [AnyPromise promiseWithResolverBlock:^(PMKResolver resolver) {
    NSError *thriftError;
    id<TAsyncTransport> transport = [transportFactory newTransport];
    id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

    if (![self send_sendUserStatus : sender recipient: recipient status: status protocol: protocol error: &thriftError])     {
      resolver(thriftError);
      return;
    }
    [transport flushWithCompletion:^{
      resolver(@YES);
    } failure:^(NSError *error) {
      resolver(error);
    }];
  }];
}

- (BOOL) send_sendGroupStatus: (RTAlias) sender group: (RTGroup *) group status: (RTUserStatus) status protocol: (id<TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"sendGroupStatus" type: TMessageTypeONEWAY sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"UserAPI_sendGroupStatus_args" error: __thriftError]) return NO;
  if (sender != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"sender" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeString: sender error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (group != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"group" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
    if (![group write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldBeginWithName: @"status" type: TTypeI32 fieldID: 3 error: __thriftError]) return NO;
  if (![outProtocol writeI32: status error: __thriftError]) return NO;
  if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (void) sendGroupStatus: (RTAlias) sender group: (RTGroup *) group status: (RTUserStatus) status response: (void (^)()) responseBlock failure : (TAsyncFailureBlock) failureBlock
{
  NSError *thriftError;
  id<TAsyncTransport> transport = [transportFactory newTransport];
  id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

  if (![self send_sendGroupStatus : sender group: group status: status protocol: protocol error: &thriftError])   {
    failureBlock(thriftError);
    return;
  }
  [transport flushWithCompletion:^{
    responseBlock();
  } failure:failureBlock];
}

- (AnyPromise *) sendGroupStatus: (RTAlias) sender group: (RTGroup *) group status: (RTUserStatus) status
{
  return [AnyPromise promiseWithResolverBlock:^(PMKResolver resolver) {
    NSError *thriftError;
    id<TAsyncTransport> transport = [transportFactory newTransport];
    id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

    if (![self send_sendGroupStatus : sender group: group status: status protocol: protocol error: &thriftError])     {
      resolver(thriftError);
      return;
    }
    [transport flushWithCompletion:^{
      resolver(@YES);
    } failure:^(NSError *error) {
      resolver(error);
    }];
  }];
}

- (BOOL) send_sendDirect: (RTId *) msgId msgType: (NSString *) msgType msgData: (NSData *) msgData sender: (NSString *) sender envelopes: (RTDirectEnvelopeList) envelopes protocol: (id<TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"sendDirect" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"UserAPI_sendDirect_args" error: __thriftError]) return NO;
  if (msgId != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"msgId" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![msgId write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (msgType != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"msgType" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeString: msgType error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (msgData != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"msgData" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
    if (![outProtocol writeBinary: msgData error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (sender != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"sender" type: TTypeSTRING fieldID: 4 error: __thriftError]) return NO;
    if (![outProtocol writeString: sender error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (envelopes != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"envelopes" type: TTypeLIST fieldID: 5 error: __thriftError]) return NO;
    {
      if (![outProtocol writeListBeginWithElementType: TTypeSTRUCT size: (SInt32)[envelopes count] error: __thriftError]) return NO;
      int idx101;
      for (idx101 = 0; idx101 < [envelopes count]; idx101++)
      {
        if (![[envelopes objectAtIndex: idx101] write: outProtocol error: __thriftError]) return NO;
      }
      if (![outProtocol writeListEnd: __thriftError]) return NO;
    }
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_sendDirect: (id<TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTUserAPI_sendDirect_result * resulter = [RTUserAPI_sendDirect_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.invalidSenderIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter invalidSender];
    }
    return NO;
  }
  if (resulter.invalidRecipientIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter invalidRecipient];
    }
    return NO;
  }
  if (resulter.invalidCredentialsIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter invalidCredentials];
    }
    return NO;
  }
  return YES;
}

- (void) sendDirect: (RTId *) msgId msgType: (NSString *) msgType msgData: (NSData *) msgData sender: (NSString *) sender envelopes: (RTDirectEnvelopeList) envelopes response: (void (^)()) responseBlock failure : (TAsyncFailureBlock) failureBlock
{
  NSError *thriftError;
  id<TAsyncTransport> transport = [transportFactory newTransport];
  id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

  if (![self send_sendDirect : msgId msgType: msgType msgData: msgData sender: sender envelopes: envelopes protocol: protocol error: &thriftError])   {
    failureBlock(thriftError);
    return;
  }
  [transport flushWithCompletion:^{
    NSError *thriftError;
    if (![self recv_sendDirect: protocol error: &thriftError])     {
      failureBlock(thriftError);
      return;
    }
    responseBlock();
  } failure:failureBlock];
}

- (AnyPromise *) sendDirect: (RTId *) msgId msgType: (NSString *) msgType msgData: (NSData *) msgData sender: (NSString *) sender envelopes: (RTDirectEnvelopeList) envelopes
{
  return [AnyPromise promiseWithResolverBlock:^(PMKResolver resolver) {
    NSError *thriftError;
    id<TAsyncTransport> transport = [transportFactory newTransport];
    id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

    if (![self send_sendDirect : msgId msgType: msgType msgData: msgData sender: sender envelopes: envelopes protocol: protocol error: &thriftError])     {
      resolver(thriftError);
      return;
    }
    [transport flushWithCompletion:^{
      NSError *thriftError;
      if (![self recv_sendDirect: protocol error: &thriftError])       {
        resolver(thriftError);
        return;
      }
      resolver(@YES);
    } failure:^(NSError *error) {
      resolver(error);
    }];
  }];
}

- (BOOL) send_updateConnections: (NSSet<NSData *> *) newPeers oldPeers: (NSSet<NSData *> *) oldPeers protocol: (id<TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"updateConnections" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"UserAPI_updateConnections_args" error: __thriftError]) return NO;
  if (newPeers != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"newPeers" type: TTypeSET fieldID: 1 error: __thriftError]) return NO;
    {
      if (![outProtocol writeSetBeginWithElementType: TTypeSTRING size: (SInt32)[newPeers count] error: __thriftError]) return NO;
      NSEnumerator * _iter102 = [newPeers objectEnumerator];
      id obj103;
      while ((obj103 = [_iter102 nextObject]))
      {
        if (![outProtocol writeBinary: obj103 error: __thriftError]) return NO;
      }
      if (![outProtocol writeSetEnd: __thriftError]) return NO;
    }
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (oldPeers != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"oldPeers" type: TTypeSET fieldID: 2 error: __thriftError]) return NO;
    {
      if (![outProtocol writeSetBeginWithElementType: TTypeSTRING size: (SInt32)[oldPeers count] error: __thriftError]) return NO;
      NSEnumerator * _iter104 = [oldPeers objectEnumerator];
      id obj105;
      while ((obj105 = [_iter104 nextObject]))
      {
        if (![outProtocol writeBinary: obj105 error: __thriftError]) return NO;
      }
      if (![outProtocol writeSetEnd: __thriftError]) return NO;
    }
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_updateConnections: (RTMutableAliasSet *) result protocol: (id<TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTUserAPI_updateConnections_result * resulter = [RTUserAPI_updateConnections_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"updateConnections"}];
  }
  return NO;
}

- (void) updateConnections: (NSSet<NSData *> *) newPeers oldPeers: (NSSet<NSData *> *) oldPeers response: (void (^)(RTAliasSet)) responseBlock failure : (TAsyncFailureBlock) failureBlock
{
  NSError *thriftError;
  id<TAsyncTransport> transport = [transportFactory newTransport];
  id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

  if (![self send_updateConnections : newPeers oldPeers: oldPeers protocol: protocol error: &thriftError])   {
    failureBlock(thriftError);
    return;
  }
  [transport flushWithCompletion:^{
    NSError *thriftError;
    RTAliasSet result;
    if (![self recv_updateConnections: &result protocol: protocol error: &thriftError])     {
      failureBlock(thriftError);
      return;
    }
    responseBlock(result);
  } failure:failureBlock];
}

- (AnyPromise *) updateConnections: (NSSet<NSData *> *) newPeers oldPeers: (NSSet<NSData *> *) oldPeers
{
  return [AnyPromise promiseWithResolverBlock:^(PMKResolver resolver) {
    NSError *thriftError;
    id<TAsyncTransport> transport = [transportFactory newTransport];
    id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

    if (![self send_updateConnections : newPeers oldPeers: oldPeers protocol: protocol error: &thriftError])     {
      resolver(thriftError);
      return;
    }
    [transport flushWithCompletion:^{
      NSError *thriftError;
      RTAliasSet result;
      if (![self recv_updateConnections: &result protocol: protocol error: &thriftError])       {
        resolver(thriftError);
        return;
      }
      resolver(result);
    } failure:^(NSError *error) {
      resolver(error);
    }];
  }];
}

- (BOOL) send_clearConnections: (id<TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"clearConnections" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"UserAPI_clearConnections_args" error: __thriftError]) return NO;
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_clearConnections: (id<TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTUserAPI_clearConnections_result * resulter = [RTUserAPI_clearConnections_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  return YES;
}

- (void) clearConnections: (void (^)()) responseBlock failure : (TAsyncFailureBlock) failureBlock
{
  NSError *thriftError;
  id<TAsyncTransport> transport = [transportFactory newTransport];
  id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

  if (![self send_clearConnections: protocol error: &thriftError])   {
    failureBlock(thriftError);
    return;
  }
  [transport flushWithCompletion:^{
    NSError *thriftError;
    if (![self recv_clearConnections: protocol error: &thriftError])     {
      failureBlock(thriftError);
      return;
    }
    responseBlock();
  } failure:failureBlock];
}

- (AnyPromise *) clearConnections
{
  return [AnyPromise promiseWithResolverBlock:^(PMKResolver resolver) {
    NSError *thriftError;
    id<TAsyncTransport> transport = [transportFactory newTransport];
    id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

    if (![self send_clearConnections: protocol error: &thriftError])     {
      resolver(thriftError);
      return;
    }
    [transport flushWithCompletion:^{
      NSError *thriftError;
      if (![self recv_clearConnections: protocol error: &thriftError])       {
        resolver(thriftError);
        return;
      }
      resolver(@YES);
    } failure:^(NSError *error) {
      resolver(error);
    }];
  }];
}

- (BOOL) send_generateInvite: (NSString *) inviteeAlias inviteeName: (NSString *) inviteeName params: (NSDictionary<NSString *, NSString *> *) params protocol: (id<TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"generateInvite" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"UserAPI_generateInvite_args" error: __thriftError]) return NO;
  if (inviteeAlias != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"inviteeAlias" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeString: inviteeAlias error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (inviteeName != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"inviteeName" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeString: inviteeName error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (params != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"params" type: TTypeMAP fieldID: 3 error: __thriftError]) return NO;
    {
      if (![outProtocol writeMapBeginWithKeyType: TTypeSTRING valueType: TTypeSTRING size: (SInt32)[params count] error: __thriftError]) return NO;
      NSEnumerator * _iter106 = [params keyEnumerator];
      id key107;
      while ((key107 = [_iter106 nextObject]))
      {
        if (![outProtocol writeString: key107 error: __thriftError]) return NO;
        if (![outProtocol writeString: [params objectForKey: key107] error: __thriftError]) return NO;
      }
      if (![outProtocol writeMapEnd: __thriftError]) return NO;
    }
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_generateInvite: (RTInvite * *) result protocol: (id<TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTUserAPI_generateInvite_result * resulter = [RTUserAPI_generateInvite_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (resulter.aliasInUseIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter aliasInUse];
    }
    return NO;
  }
  if (resulter.aliasAlreadyInvitedIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter aliasAlreadyInvited];
    }
    return NO;
  }
  if (resulter.invalidAliasIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter invalidAlias];
    }
    return NO;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"generateInvite"}];
  }
  return NO;
}

- (void) generateInvite: (NSString *) inviteeAlias inviteeName: (NSString *) inviteeName params: (NSDictionary<NSString *, NSString *> *) params response: (void (^)(RTInvite *)) responseBlock failure : (TAsyncFailureBlock) failureBlock
{
  NSError *thriftError;
  id<TAsyncTransport> transport = [transportFactory newTransport];
  id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

  if (![self send_generateInvite : inviteeAlias inviteeName: inviteeName params: params protocol: protocol error: &thriftError])   {
    failureBlock(thriftError);
    return;
  }
  [transport flushWithCompletion:^{
    NSError *thriftError;
    RTInvite * result;
    if (![self recv_generateInvite: &result protocol: protocol error: &thriftError])     {
      failureBlock(thriftError);
      return;
    }
    responseBlock(result);
  } failure:failureBlock];
}

- (AnyPromise *) generateInvite: (NSString *) inviteeAlias inviteeName: (NSString *) inviteeName params: (NSDictionary<NSString *, NSString *> *) params
{
  return [AnyPromise promiseWithResolverBlock:^(PMKResolver resolver) {
    NSError *thriftError;
    id<TAsyncTransport> transport = [transportFactory newTransport];
    id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

    if (![self send_generateInvite : inviteeAlias inviteeName: inviteeName params: params protocol: protocol error: &thriftError])     {
      resolver(thriftError);
      return;
    }
    [transport flushWithCompletion:^{
      NSError *thriftError;
      RTInvite * result;
      if (![self recv_generateInvite: &result protocol: protocol error: &thriftError])       {
        resolver(thriftError);
        return;
      }
      resolver(result);
    } failure:^(NSError *error) {
      resolver(error);
    }];
  }];
}

@end

@interface RTPublicAPI_findUserWithAlias_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RTAlias name;
@property (assign, nonatomic) BOOL nameIsSet;
- (void) unsetName;


- (instancetype) initWithName: (RTAlias) name;

@end

@implementation RTPublicAPI_findUserWithAlias_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithName: (RTAlias) name
{
  self = [super init];
  if (self)  {
    _name = name;
    _nameIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"name"])
    {
      _name = [decoder decodeObjectForKey: @"name"];
      _nameIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_nameIsSet)
  {
    [encoder encodeObject: _name forKey: @"name"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _nameIsSet ? 2654435761 : 0;
  if (_nameIsSet)
  {
    hash = (hash * 31) ^ [_name hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTPublicAPI_findUserWithAlias_args class]]) {
    return NO;
  }
  RTPublicAPI_findUserWithAlias_args *other = (RTPublicAPI_findUserWithAlias_args *)anObject;
  if ((_nameIsSet != other->_nameIsSet) ||
      (_nameIsSet && ((_name || other->_name) && ![_name isEqual:other->_name]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTPublicAPI_findUserWithAlias_args * val = [RTPublicAPI_findUserWithAlias_args new];
  val.name = [self.name copy];
  return val;
}

- (void) setName: (NSString *) name {
  _name = name;
  _nameIsSet = YES;
}

- (void) unsetName {
  _name = nil;
  _nameIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.name = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_findUserWithAlias_args" error: __thriftError]) return NO;
  if (_nameIsSet) {
    if (_name != nil) {
      if (![outProtocol writeFieldBeginWithName: @"name" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _name error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTPublicAPI_findUserWithAlias_args("];
  [ms appendString: @"name:"];
  [ms appendFormat: @"\"%@\"", _name];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTPublicAPI_findUserWithAlias_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RTUserInfo * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;


- (instancetype) initWithSuccess: (RTUserInfo *) success;

@end

@implementation RTPublicAPI_findUserWithAlias_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (RTUserInfo *) success
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTPublicAPI_findUserWithAlias_result class]]) {
    return NO;
  }
  RTPublicAPI_findUserWithAlias_result *other = (RTPublicAPI_findUserWithAlias_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTPublicAPI_findUserWithAlias_result * val = [RTPublicAPI_findUserWithAlias_result new];
  val.success = [self.success copy];
  return val;
}

- (void) setSuccess: (RTUserInfo *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSTRUCT) {
          RTUserInfo *fieldValue = [[RTUserInfo alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_findUserWithAlias_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSTRUCT fieldID: 0 error: __thriftError]) return NO;
      if (![_success write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTPublicAPI_findUserWithAlias_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTPublicAPI_findUserWithId_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RTId * userId;
@property (assign, nonatomic) BOOL userIdIsSet;
- (void) unsetUserId;


- (instancetype) initWithUserId: (RTId *) userId;

@end

@implementation RTPublicAPI_findUserWithId_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithUserId: (RTId *) userId
{
  self = [super init];
  if (self)  {
    _userId = userId;
    _userIdIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"userId"])
    {
      _userId = [decoder decodeObjectForKey: @"userId"];
      _userIdIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_userIdIsSet)
  {
    [encoder encodeObject: _userId forKey: @"userId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _userIdIsSet ? 2654435761 : 0;
  if (_userIdIsSet)
  {
    hash = (hash * 31) ^ [_userId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTPublicAPI_findUserWithId_args class]]) {
    return NO;
  }
  RTPublicAPI_findUserWithId_args *other = (RTPublicAPI_findUserWithId_args *)anObject;
  if ((_userIdIsSet != other->_userIdIsSet) ||
      (_userIdIsSet && ((_userId || other->_userId) && ![_userId isEqual:other->_userId]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTPublicAPI_findUserWithId_args * val = [RTPublicAPI_findUserWithId_args new];
  val.userId = [self.userId copy];
  return val;
}

- (void) setUserId: (RTId *) userId {
  _userId = userId;
  _userIdIsSet = YES;
}

- (void) unsetUserId {
  _userId = nil;
  _userIdIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          RTId *fieldValue = [[RTId alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.userId = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_findUserWithId_args" error: __thriftError]) return NO;
  if (_userIdIsSet) {
    if (_userId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"userId" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_userId write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTPublicAPI_findUserWithId_args("];
  [ms appendString: @"userId:"];
  [ms appendFormat: @"%@", _userId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTPublicAPI_findUserWithId_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RTUserInfo * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;


- (instancetype) initWithSuccess: (RTUserInfo *) success;

@end

@implementation RTPublicAPI_findUserWithId_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (RTUserInfo *) success
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTPublicAPI_findUserWithId_result class]]) {
    return NO;
  }
  RTPublicAPI_findUserWithId_result *other = (RTPublicAPI_findUserWithId_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTPublicAPI_findUserWithId_result * val = [RTPublicAPI_findUserWithId_result new];
  val.success = [self.success copy];
  return val;
}

- (void) setSuccess: (RTUserInfo *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSTRUCT) {
          RTUserInfo *fieldValue = [[RTUserInfo alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_findUserWithId_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSTRUCT fieldID: 0 error: __thriftError]) return NO;
      if (![_success write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTPublicAPI_findUserWithId_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTPublicAPI_requestAliasAuthentication_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RTAlias name;
@property (assign, nonatomic) BOOL nameIsSet;
- (void) unsetName;


- (instancetype) initWithName: (RTAlias) name;

@end

@implementation RTPublicAPI_requestAliasAuthentication_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithName: (RTAlias) name
{
  self = [super init];
  if (self)  {
    _name = name;
    _nameIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"name"])
    {
      _name = [decoder decodeObjectForKey: @"name"];
      _nameIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_nameIsSet)
  {
    [encoder encodeObject: _name forKey: @"name"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _nameIsSet ? 2654435761 : 0;
  if (_nameIsSet)
  {
    hash = (hash * 31) ^ [_name hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTPublicAPI_requestAliasAuthentication_args class]]) {
    return NO;
  }
  RTPublicAPI_requestAliasAuthentication_args *other = (RTPublicAPI_requestAliasAuthentication_args *)anObject;
  if ((_nameIsSet != other->_nameIsSet) ||
      (_nameIsSet && ((_name || other->_name) && ![_name isEqual:other->_name]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTPublicAPI_requestAliasAuthentication_args * val = [RTPublicAPI_requestAliasAuthentication_args new];
  val.name = [self.name copy];
  return val;
}

- (void) setName: (NSString *) name {
  _name = name;
  _nameIsSet = YES;
}

- (void) unsetName {
  _name = nil;
  _nameIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.name = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_requestAliasAuthentication_args" error: __thriftError]) return NO;
  if (_nameIsSet) {
    if (_name != nil) {
      if (![outProtocol writeFieldBeginWithName: @"name" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _name error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTPublicAPI_requestAliasAuthentication_args("];
  [ms appendString: @"name:"];
  [ms appendFormat: @"\"%@\"", _name];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTPublicAPI_requestAliasAuthentication_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RTAliasInUse * aliasInUse;
@property (assign, nonatomic) BOOL aliasInUseIsSet;
- (void) unsetAliasInUse;

@property (strong, nonatomic) RTUnableToAuthenticate * auth;
@property (assign, nonatomic) BOOL authIsSet;
- (void) unsetAuth;


- (instancetype) initWithAliasInUse: (RTAliasInUse *) aliasInUse auth: (RTUnableToAuthenticate *) auth;

@end

@implementation RTPublicAPI_requestAliasAuthentication_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithAliasInUse: (RTAliasInUse *) aliasInUse auth: (RTUnableToAuthenticate *) auth
{
  self = [super init];
  if (self)  {
    _aliasInUse = aliasInUse;
    _aliasInUseIsSet = YES;
    _auth = auth;
    _authIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"aliasInUse"])
    {
      _aliasInUse = [decoder decodeObjectForKey: @"aliasInUse"];
      _aliasInUseIsSet = YES;
    }
    if ([decoder containsValueForKey: @"auth"])
    {
      _auth = [decoder decodeObjectForKey: @"auth"];
      _authIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_aliasInUseIsSet)
  {
    [encoder encodeObject: _aliasInUse forKey: @"aliasInUse"];
  }
  if (_authIsSet)
  {
    [encoder encodeObject: _auth forKey: @"auth"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _aliasInUseIsSet ? 2654435761 : 0;
  if (_aliasInUseIsSet)
  {
    hash = (hash * 31) ^ [_aliasInUse hash];
  }
  hash = (hash * 31) ^ _authIsSet ? 2654435761 : 0;
  if (_authIsSet)
  {
    hash = (hash * 31) ^ [_auth hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTPublicAPI_requestAliasAuthentication_result class]]) {
    return NO;
  }
  RTPublicAPI_requestAliasAuthentication_result *other = (RTPublicAPI_requestAliasAuthentication_result *)anObject;
  if ((_aliasInUseIsSet != other->_aliasInUseIsSet) ||
      (_aliasInUseIsSet && ((_aliasInUse || other->_aliasInUse) && ![_aliasInUse isEqual:other->_aliasInUse]))) {
    return NO;
  }
  if ((_authIsSet != other->_authIsSet) ||
      (_authIsSet && ((_auth || other->_auth) && ![_auth isEqual:other->_auth]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTPublicAPI_requestAliasAuthentication_result * val = [RTPublicAPI_requestAliasAuthentication_result new];
  val.aliasInUse = [self.aliasInUse copy];
  val.auth = [self.auth copy];
  return val;
}

- (void) setAliasInUse: (RTAliasInUse *) aliasInUse {
  _aliasInUse = aliasInUse;
  _aliasInUseIsSet = YES;
}

- (void) unsetAliasInUse {
  _aliasInUse = nil;
  _aliasInUseIsSet = NO;
}

- (void) setAuth: (RTUnableToAuthenticate *) auth {
  _auth = auth;
  _authIsSet = YES;
}

- (void) unsetAuth {
  _auth = nil;
  _authIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 2:
        if (fieldType == TTypeSTRUCT) {
          RTAliasInUse *fieldValue = [[RTAliasInUse alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.aliasInUse = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          RTUnableToAuthenticate *fieldValue = [[RTUnableToAuthenticate alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.auth = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_requestAliasAuthentication_result" error: __thriftError]) return NO;

  if (_aliasInUseIsSet) {
    if (_aliasInUse != nil) {
      if (![outProtocol writeFieldBeginWithName: @"aliasInUse" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_aliasInUse write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_authIsSet) {
    if (_auth != nil) {
      if (![outProtocol writeFieldBeginWithName: @"auth" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_auth write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTPublicAPI_requestAliasAuthentication_result("];
  [ms appendString: @"aliasInUse:"];
  [ms appendFormat: @"%@", _aliasInUse];
  [ms appendString: @",auth:"];
  [ms appendFormat: @"%@", _auth];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTPublicAPI_checkAliasAuthentication_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RTAlias name;
@property (assign, nonatomic) BOOL nameIsSet;
- (void) unsetName;

@property (strong, nonatomic) NSString * pin;
@property (assign, nonatomic) BOOL pinIsSet;
- (void) unsetPin;


- (instancetype) initWithName: (RTAlias) name pin: (NSString *) pin;

@end

@implementation RTPublicAPI_checkAliasAuthentication_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithName: (RTAlias) name pin: (NSString *) pin
{
  self = [super init];
  if (self)  {
    _name = name;
    _nameIsSet = YES;
    _pin = pin;
    _pinIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"name"])
    {
      _name = [decoder decodeObjectForKey: @"name"];
      _nameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"pin"])
    {
      _pin = [decoder decodeObjectForKey: @"pin"];
      _pinIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_nameIsSet)
  {
    [encoder encodeObject: _name forKey: @"name"];
  }
  if (_pinIsSet)
  {
    [encoder encodeObject: _pin forKey: @"pin"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _nameIsSet ? 2654435761 : 0;
  if (_nameIsSet)
  {
    hash = (hash * 31) ^ [_name hash];
  }
  hash = (hash * 31) ^ _pinIsSet ? 2654435761 : 0;
  if (_pinIsSet)
  {
    hash = (hash * 31) ^ [_pin hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTPublicAPI_checkAliasAuthentication_args class]]) {
    return NO;
  }
  RTPublicAPI_checkAliasAuthentication_args *other = (RTPublicAPI_checkAliasAuthentication_args *)anObject;
  if ((_nameIsSet != other->_nameIsSet) ||
      (_nameIsSet && ((_name || other->_name) && ![_name isEqual:other->_name]))) {
    return NO;
  }
  if ((_pinIsSet != other->_pinIsSet) ||
      (_pinIsSet && ((_pin || other->_pin) && ![_pin isEqual:other->_pin]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTPublicAPI_checkAliasAuthentication_args * val = [RTPublicAPI_checkAliasAuthentication_args new];
  val.name = [self.name copy];
  val.pin = [self.pin copy];
  return val;
}

- (void) setName: (NSString *) name {
  _name = name;
  _nameIsSet = YES;
}

- (void) unsetName {
  _name = nil;
  _nameIsSet = NO;
}

- (void) setPin: (NSString *) pin {
  _pin = pin;
  _pinIsSet = YES;
}

- (void) unsetPin {
  _pin = nil;
  _pinIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.name = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.pin = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_checkAliasAuthentication_args" error: __thriftError]) return NO;
  if (_nameIsSet) {
    if (_name != nil) {
      if (![outProtocol writeFieldBeginWithName: @"name" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _name error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_pinIsSet) {
    if (_pin != nil) {
      if (![outProtocol writeFieldBeginWithName: @"pin" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _pin error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTPublicAPI_checkAliasAuthentication_args("];
  [ms appendString: @"name:"];
  [ms appendFormat: @"\"%@\"", _name];
  [ms appendString: @",pin:"];
  [ms appendFormat: @"\"%@\"", _pin];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTPublicAPI_checkAliasAuthentication_result : NSObject <TBase, NSCoding, NSCopying> 

@property (assign, nonatomic) BOOL success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;

@property (strong, nonatomic) RTAliasNotAuthenticated * aliasNoAuth;
@property (assign, nonatomic) BOOL aliasNoAuthIsSet;
- (void) unsetAliasNoAuth;


- (instancetype) initWithSuccess: (BOOL) success aliasNoAuth: (RTAliasNotAuthenticated *) aliasNoAuth;

@end

@implementation RTPublicAPI_checkAliasAuthentication_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (BOOL) success aliasNoAuth: (RTAliasNotAuthenticated *) aliasNoAuth
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
    _aliasNoAuth = aliasNoAuth;
    _aliasNoAuthIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeBoolForKey: @"success"];
      _successIsSet = YES;
    }
    if ([decoder containsValueForKey: @"aliasNoAuth"])
    {
      _aliasNoAuth = [decoder decodeObjectForKey: @"aliasNoAuth"];
      _aliasNoAuthIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeBool: _success forKey: @"success"];
  }
  if (_aliasNoAuthIsSet)
  {
    [encoder encodeObject: _aliasNoAuth forKey: @"aliasNoAuth"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [@(_success) hash];
  }
  hash = (hash * 31) ^ _aliasNoAuthIsSet ? 2654435761 : 0;
  if (_aliasNoAuthIsSet)
  {
    hash = (hash * 31) ^ [_aliasNoAuth hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTPublicAPI_checkAliasAuthentication_result class]]) {
    return NO;
  }
  RTPublicAPI_checkAliasAuthentication_result *other = (RTPublicAPI_checkAliasAuthentication_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && (_success != other->_success))) {
    return NO;
  }
  if ((_aliasNoAuthIsSet != other->_aliasNoAuthIsSet) ||
      (_aliasNoAuthIsSet && ((_aliasNoAuth || other->_aliasNoAuth) && ![_aliasNoAuth isEqual:other->_aliasNoAuth]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTPublicAPI_checkAliasAuthentication_result * val = [RTPublicAPI_checkAliasAuthentication_result new];
  val.success = self.success;
  val.aliasNoAuth = [self.aliasNoAuth copy];
  return val;
}

- (void) setSuccess: (BOOL) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _successIsSet = NO;
}

- (void) setAliasNoAuth: (RTAliasNotAuthenticated *) aliasNoAuth {
  _aliasNoAuth = aliasNoAuth;
  _aliasNoAuthIsSet = YES;
}

- (void) unsetAliasNoAuth {
  _aliasNoAuth = nil;
  _aliasNoAuthIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeBOOL) {
          BOOL fieldValue;
          if (![inProtocol readBool:&fieldValue error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          RTAliasNotAuthenticated *fieldValue = [[RTAliasNotAuthenticated alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.aliasNoAuth = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_checkAliasAuthentication_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeBOOL fieldID: 0 error: __thriftError]) return NO;
    if (![outProtocol writeBool: _success error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  } else if (_aliasNoAuthIsSet) {
    if (_aliasNoAuth != nil) {
      if (![outProtocol writeFieldBeginWithName: @"aliasNoAuth" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_aliasNoAuth write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTPublicAPI_checkAliasAuthentication_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", _success];
  [ms appendString: @",aliasNoAuth:"];
  [ms appendFormat: @"%@", _aliasNoAuth];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTPublicAPI_findProfileWithId_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RTId * userId;
@property (assign, nonatomic) BOOL userIdIsSet;
- (void) unsetUserId;

@property (strong, nonatomic) NSString * password;
@property (assign, nonatomic) BOOL passwordIsSet;
- (void) unsetPassword;


- (instancetype) initWithUserId: (RTId *) userId password: (NSString *) password;

@end

@implementation RTPublicAPI_findProfileWithId_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithUserId: (RTId *) userId password: (NSString *) password
{
  self = [super init];
  if (self)  {
    _userId = userId;
    _userIdIsSet = YES;
    _password = password;
    _passwordIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"userId"])
    {
      _userId = [decoder decodeObjectForKey: @"userId"];
      _userIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"password"])
    {
      _password = [decoder decodeObjectForKey: @"password"];
      _passwordIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_userIdIsSet)
  {
    [encoder encodeObject: _userId forKey: @"userId"];
  }
  if (_passwordIsSet)
  {
    [encoder encodeObject: _password forKey: @"password"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _userIdIsSet ? 2654435761 : 0;
  if (_userIdIsSet)
  {
    hash = (hash * 31) ^ [_userId hash];
  }
  hash = (hash * 31) ^ _passwordIsSet ? 2654435761 : 0;
  if (_passwordIsSet)
  {
    hash = (hash * 31) ^ [_password hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTPublicAPI_findProfileWithId_args class]]) {
    return NO;
  }
  RTPublicAPI_findProfileWithId_args *other = (RTPublicAPI_findProfileWithId_args *)anObject;
  if ((_userIdIsSet != other->_userIdIsSet) ||
      (_userIdIsSet && ((_userId || other->_userId) && ![_userId isEqual:other->_userId]))) {
    return NO;
  }
  if ((_passwordIsSet != other->_passwordIsSet) ||
      (_passwordIsSet && ((_password || other->_password) && ![_password isEqual:other->_password]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTPublicAPI_findProfileWithId_args * val = [RTPublicAPI_findProfileWithId_args new];
  val.userId = [self.userId copy];
  val.password = [self.password copy];
  return val;
}

- (void) setUserId: (RTId *) userId {
  _userId = userId;
  _userIdIsSet = YES;
}

- (void) unsetUserId {
  _userId = nil;
  _userIdIsSet = NO;
}

- (void) setPassword: (NSString *) password {
  _password = password;
  _passwordIsSet = YES;
}

- (void) unsetPassword {
  _password = nil;
  _passwordIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          RTId *fieldValue = [[RTId alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.userId = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.password = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_findProfileWithId_args" error: __thriftError]) return NO;
  if (_userIdIsSet) {
    if (_userId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"userId" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_userId write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_passwordIsSet) {
    if (_password != nil) {
      if (![outProtocol writeFieldBeginWithName: @"password" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _password error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTPublicAPI_findProfileWithId_args("];
  [ms appendString: @"userId:"];
  [ms appendFormat: @"%@", _userId];
  [ms appendString: @",password:"];
  [ms appendFormat: @"\"%@\"", _password];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTPublicAPI_findProfileWithId_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RTUserProfile * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;


- (instancetype) initWithSuccess: (RTUserProfile *) success;

@end

@implementation RTPublicAPI_findProfileWithId_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (RTUserProfile *) success
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTPublicAPI_findProfileWithId_result class]]) {
    return NO;
  }
  RTPublicAPI_findProfileWithId_result *other = (RTPublicAPI_findProfileWithId_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTPublicAPI_findProfileWithId_result * val = [RTPublicAPI_findProfileWithId_result new];
  val.success = [self.success copy];
  return val;
}

- (void) setSuccess: (RTUserProfile *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSTRUCT) {
          RTUserProfile *fieldValue = [[RTUserProfile alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_findProfileWithId_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSTRUCT fieldID: 0 error: __thriftError]) return NO;
      if (![_success write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTPublicAPI_findProfileWithId_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTPublicAPI_findProfileWithAlias_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) NSString * userAlias;
@property (assign, nonatomic) BOOL userAliasIsSet;
- (void) unsetUserAlias;

@property (strong, nonatomic) NSString * password;
@property (assign, nonatomic) BOOL passwordIsSet;
- (void) unsetPassword;


- (instancetype) initWithUserAlias: (NSString *) userAlias password: (NSString *) password;

@end

@implementation RTPublicAPI_findProfileWithAlias_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithUserAlias: (NSString *) userAlias password: (NSString *) password
{
  self = [super init];
  if (self)  {
    _userAlias = userAlias;
    _userAliasIsSet = YES;
    _password = password;
    _passwordIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"userAlias"])
    {
      _userAlias = [decoder decodeObjectForKey: @"userAlias"];
      _userAliasIsSet = YES;
    }
    if ([decoder containsValueForKey: @"password"])
    {
      _password = [decoder decodeObjectForKey: @"password"];
      _passwordIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_userAliasIsSet)
  {
    [encoder encodeObject: _userAlias forKey: @"userAlias"];
  }
  if (_passwordIsSet)
  {
    [encoder encodeObject: _password forKey: @"password"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _userAliasIsSet ? 2654435761 : 0;
  if (_userAliasIsSet)
  {
    hash = (hash * 31) ^ [_userAlias hash];
  }
  hash = (hash * 31) ^ _passwordIsSet ? 2654435761 : 0;
  if (_passwordIsSet)
  {
    hash = (hash * 31) ^ [_password hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTPublicAPI_findProfileWithAlias_args class]]) {
    return NO;
  }
  RTPublicAPI_findProfileWithAlias_args *other = (RTPublicAPI_findProfileWithAlias_args *)anObject;
  if ((_userAliasIsSet != other->_userAliasIsSet) ||
      (_userAliasIsSet && ((_userAlias || other->_userAlias) && ![_userAlias isEqual:other->_userAlias]))) {
    return NO;
  }
  if ((_passwordIsSet != other->_passwordIsSet) ||
      (_passwordIsSet && ((_password || other->_password) && ![_password isEqual:other->_password]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTPublicAPI_findProfileWithAlias_args * val = [RTPublicAPI_findProfileWithAlias_args new];
  val.userAlias = [self.userAlias copy];
  val.password = [self.password copy];
  return val;
}

- (void) setUserAlias: (NSString *) userAlias {
  _userAlias = userAlias;
  _userAliasIsSet = YES;
}

- (void) unsetUserAlias {
  _userAlias = nil;
  _userAliasIsSet = NO;
}

- (void) setPassword: (NSString *) password {
  _password = password;
  _passwordIsSet = YES;
}

- (void) unsetPassword {
  _password = nil;
  _passwordIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.userAlias = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.password = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_findProfileWithAlias_args" error: __thriftError]) return NO;
  if (_userAliasIsSet) {
    if (_userAlias != nil) {
      if (![outProtocol writeFieldBeginWithName: @"userAlias" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _userAlias error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_passwordIsSet) {
    if (_password != nil) {
      if (![outProtocol writeFieldBeginWithName: @"password" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _password error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTPublicAPI_findProfileWithAlias_args("];
  [ms appendString: @"userAlias:"];
  [ms appendFormat: @"\"%@\"", _userAlias];
  [ms appendString: @",password:"];
  [ms appendFormat: @"\"%@\"", _password];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTPublicAPI_findProfileWithAlias_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RTUserProfile * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;


- (instancetype) initWithSuccess: (RTUserProfile *) success;

@end

@implementation RTPublicAPI_findProfileWithAlias_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (RTUserProfile *) success
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTPublicAPI_findProfileWithAlias_result class]]) {
    return NO;
  }
  RTPublicAPI_findProfileWithAlias_result *other = (RTPublicAPI_findProfileWithAlias_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTPublicAPI_findProfileWithAlias_result * val = [RTPublicAPI_findProfileWithAlias_result new];
  val.success = [self.success copy];
  return val;
}

- (void) setSuccess: (RTUserProfile *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSTRUCT) {
          RTUserProfile *fieldValue = [[RTUserProfile alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_findProfileWithAlias_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSTRUCT fieldID: 0 error: __thriftError]) return NO;
      if (![_success write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTPublicAPI_findProfileWithAlias_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTPublicAPI_registerUser_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) NSString * password;
@property (assign, nonatomic) BOOL passwordIsSet;
- (void) unsetPassword;

@property (strong, nonatomic) NSData * encryptionCSR;
@property (assign, nonatomic) BOOL encryptionCSRIsSet;
- (void) unsetEncryptionCSR;

@property (strong, nonatomic) NSData * signingCSR;
@property (assign, nonatomic) BOOL signingCSRIsSet;
- (void) unsetSigningCSR;

@property (strong, nonatomic) NSMutableArray<RTAuthenticatedAlias *> * authenticatedAliases;
@property (assign, nonatomic) BOOL authenticatedAliasesIsSet;
- (void) unsetAuthenticatedAliases;

@property (strong, nonatomic) RTDeviceInfo * deviceInfo;
@property (assign, nonatomic) BOOL deviceInfoIsSet;
- (void) unsetDeviceInfo;


- (instancetype) initWithPassword: (NSString *) password encryptionCSR: (NSData *) encryptionCSR signingCSR: (NSData *) signingCSR authenticatedAliases: (NSArray<RTAuthenticatedAlias *> *) authenticatedAliases deviceInfo: (RTDeviceInfo *) deviceInfo;

@end

@implementation RTPublicAPI_registerUser_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithPassword: (NSString *) password encryptionCSR: (NSData *) encryptionCSR signingCSR: (NSData *) signingCSR authenticatedAliases: (NSArray<RTAuthenticatedAlias *> *) authenticatedAliases deviceInfo: (RTDeviceInfo *) deviceInfo
{
  self = [super init];
  if (self)  {
    _password = password;
    _passwordIsSet = YES;
    _encryptionCSR = encryptionCSR;
    _encryptionCSRIsSet = YES;
    _signingCSR = signingCSR;
    _signingCSRIsSet = YES;
    _authenticatedAliases = [authenticatedAliases mutableCopy];
    _authenticatedAliasesIsSet = YES;
    _deviceInfo = deviceInfo;
    _deviceInfoIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"password"])
    {
      _password = [decoder decodeObjectForKey: @"password"];
      _passwordIsSet = YES;
    }
    if ([decoder containsValueForKey: @"encryptionCSR"])
    {
      _encryptionCSR = [decoder decodeObjectForKey: @"encryptionCSR"];
      _encryptionCSRIsSet = YES;
    }
    if ([decoder containsValueForKey: @"signingCSR"])
    {
      _signingCSR = [decoder decodeObjectForKey: @"signingCSR"];
      _signingCSRIsSet = YES;
    }
    if ([decoder containsValueForKey: @"authenticatedAliases"])
    {
      _authenticatedAliases = [decoder decodeObjectForKey: @"authenticatedAliases"];
      _authenticatedAliasesIsSet = YES;
    }
    if ([decoder containsValueForKey: @"deviceInfo"])
    {
      _deviceInfo = [decoder decodeObjectForKey: @"deviceInfo"];
      _deviceInfoIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_passwordIsSet)
  {
    [encoder encodeObject: _password forKey: @"password"];
  }
  if (_encryptionCSRIsSet)
  {
    [encoder encodeObject: _encryptionCSR forKey: @"encryptionCSR"];
  }
  if (_signingCSRIsSet)
  {
    [encoder encodeObject: _signingCSR forKey: @"signingCSR"];
  }
  if (_authenticatedAliasesIsSet)
  {
    [encoder encodeObject: _authenticatedAliases forKey: @"authenticatedAliases"];
  }
  if (_deviceInfoIsSet)
  {
    [encoder encodeObject: _deviceInfo forKey: @"deviceInfo"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _passwordIsSet ? 2654435761 : 0;
  if (_passwordIsSet)
  {
    hash = (hash * 31) ^ [_password hash];
  }
  hash = (hash * 31) ^ _encryptionCSRIsSet ? 2654435761 : 0;
  if (_encryptionCSRIsSet)
  {
    hash = (hash * 31) ^ [_encryptionCSR hash];
  }
  hash = (hash * 31) ^ _signingCSRIsSet ? 2654435761 : 0;
  if (_signingCSRIsSet)
  {
    hash = (hash * 31) ^ [_signingCSR hash];
  }
  hash = (hash * 31) ^ _authenticatedAliasesIsSet ? 2654435761 : 0;
  if (_authenticatedAliasesIsSet)
  {
    hash = (hash * 31) ^ [_authenticatedAliases hash];
  }
  hash = (hash * 31) ^ _deviceInfoIsSet ? 2654435761 : 0;
  if (_deviceInfoIsSet)
  {
    hash = (hash * 31) ^ [_deviceInfo hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTPublicAPI_registerUser_args class]]) {
    return NO;
  }
  RTPublicAPI_registerUser_args *other = (RTPublicAPI_registerUser_args *)anObject;
  if ((_passwordIsSet != other->_passwordIsSet) ||
      (_passwordIsSet && ((_password || other->_password) && ![_password isEqual:other->_password]))) {
    return NO;
  }
  if ((_encryptionCSRIsSet != other->_encryptionCSRIsSet) ||
      (_encryptionCSRIsSet && ((_encryptionCSR || other->_encryptionCSR) && ![_encryptionCSR isEqual:other->_encryptionCSR]))) {
    return NO;
  }
  if ((_signingCSRIsSet != other->_signingCSRIsSet) ||
      (_signingCSRIsSet && ((_signingCSR || other->_signingCSR) && ![_signingCSR isEqual:other->_signingCSR]))) {
    return NO;
  }
  if ((_authenticatedAliasesIsSet != other->_authenticatedAliasesIsSet) ||
      (_authenticatedAliasesIsSet && ((_authenticatedAliases || other->_authenticatedAliases) && ![_authenticatedAliases isEqual:other->_authenticatedAliases]))) {
    return NO;
  }
  if ((_deviceInfoIsSet != other->_deviceInfoIsSet) ||
      (_deviceInfoIsSet && ((_deviceInfo || other->_deviceInfo) && ![_deviceInfo isEqual:other->_deviceInfo]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTPublicAPI_registerUser_args * val = [RTPublicAPI_registerUser_args new];
  val.password = [self.password copy];
  val.encryptionCSR = [self.encryptionCSR copy];
  val.signingCSR = [self.signingCSR copy];
  val.authenticatedAliases = [self.authenticatedAliases copy];
  val.deviceInfo = [self.deviceInfo copy];
  return val;
}

- (void) setPassword: (NSString *) password {
  _password = password;
  _passwordIsSet = YES;
}

- (void) unsetPassword {
  _password = nil;
  _passwordIsSet = NO;
}

- (void) setEncryptionCSR: (NSData *) encryptionCSR {
  _encryptionCSR = encryptionCSR;
  _encryptionCSRIsSet = YES;
}

- (void) unsetEncryptionCSR {
  _encryptionCSR = nil;
  _encryptionCSRIsSet = NO;
}

- (void) setSigningCSR: (NSData *) signingCSR {
  _signingCSR = signingCSR;
  _signingCSRIsSet = YES;
}

- (void) unsetSigningCSR {
  _signingCSR = nil;
  _signingCSRIsSet = NO;
}

- (void) setAuthenticatedAliases: (NSMutableArray<RTAuthenticatedAlias *> *) authenticatedAliases {
  _authenticatedAliases = authenticatedAliases;
  _authenticatedAliasesIsSet = YES;
}

- (void) unsetAuthenticatedAliases {
  _authenticatedAliases = nil;
  _authenticatedAliasesIsSet = NO;
}

- (void) setDeviceInfo: (RTDeviceInfo *) deviceInfo {
  _deviceInfo = deviceInfo;
  _deviceInfoIsSet = YES;
}

- (void) unsetDeviceInfo {
  _deviceInfo = nil;
  _deviceInfoIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.password = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSData * fieldValue;
          if (![inProtocol readBinary:&fieldValue error: __thriftError]) return NO;
          self.encryptionCSR = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSData * fieldValue;
          if (![inProtocol readBinary:&fieldValue error: __thriftError]) return NO;
          self.signingCSR = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeLIST) {
          SInt32 _size108;
          if (![inProtocol readListBeginReturningElementType: NULL size: &_size108 error: __thriftError]) return NO;
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size108];
          int _i109;
          for (_i109 = 0; _i109 < _size108; ++_i109)
          {
            RTAuthenticatedAlias *_elem110 = [[RTAuthenticatedAlias alloc] init];
            if (![_elem110 read: inProtocol error: __thriftError]) return NO;
            [fieldValue addObject: _elem110];
          }
          if (![inProtocol readListEnd: __thriftError]) return NO;
          self.authenticatedAliases = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeSTRUCT) {
          RTDeviceInfo *fieldValue = [[RTDeviceInfo alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.deviceInfo = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_registerUser_args" error: __thriftError]) return NO;
  if (_passwordIsSet) {
    if (_password != nil) {
      if (![outProtocol writeFieldBeginWithName: @"password" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _password error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_encryptionCSRIsSet) {
    if (_encryptionCSR != nil) {
      if (![outProtocol writeFieldBeginWithName: @"encryptionCSR" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeBinary: _encryptionCSR error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_signingCSRIsSet) {
    if (_signingCSR != nil) {
      if (![outProtocol writeFieldBeginWithName: @"signingCSR" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeBinary: _signingCSR error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_authenticatedAliasesIsSet) {
    if (_authenticatedAliases != nil) {
      if (![outProtocol writeFieldBeginWithName: @"authenticatedAliases" type: TTypeLIST fieldID: 4 error: __thriftError]) return NO;
      {
        if (![outProtocol writeListBeginWithElementType: TTypeSTRUCT size: (SInt32)[_authenticatedAliases count] error: __thriftError]) return NO;
        int idx112;
        for (idx112 = 0; idx112 < [_authenticatedAliases count]; idx112++)
        {
          if (![[_authenticatedAliases objectAtIndex: idx112] write: outProtocol error: __thriftError]) return NO;
        }
        if (![outProtocol writeListEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_deviceInfoIsSet) {
    if (_deviceInfo != nil) {
      if (![outProtocol writeFieldBeginWithName: @"deviceInfo" type: TTypeSTRUCT fieldID: 5 error: __thriftError]) return NO;
      if (![_deviceInfo write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTPublicAPI_registerUser_args("];
  [ms appendString: @"password:"];
  [ms appendFormat: @"\"%@\"", _password];
  [ms appendString: @",encryptionCSR:"];
  [ms appendFormat: @"\"%@\"", _encryptionCSR];
  [ms appendString: @",signingCSR:"];
  [ms appendFormat: @"\"%@\"", _signingCSR];
  [ms appendString: @",authenticatedAliases:"];
  [ms appendFormat: @"%@", _authenticatedAliases];
  [ms appendString: @",deviceInfo:"];
  [ms appendFormat: @"%@", _deviceInfo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTPublicAPI_registerUser_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RTUserProfile * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;

@property (strong, nonatomic) RTAliasInUse * aliasInUse;
@property (assign, nonatomic) BOOL aliasInUseIsSet;
- (void) unsetAliasInUse;

@property (strong, nonatomic) RTAliasNotAuthenticated * aliasNoAuth;
@property (assign, nonatomic) BOOL aliasNoAuthIsSet;
- (void) unsetAliasNoAuth;

@property (strong, nonatomic) RTAliasPinInvalid * aliasPinInvalid;
@property (assign, nonatomic) BOOL aliasPinInvalidIsSet;
- (void) unsetAliasPinInvalid;

@property (strong, nonatomic) RTDeviceInUse * deviceInUse;
@property (assign, nonatomic) BOOL deviceInUseIsSet;
- (void) unsetDeviceInUse;


- (instancetype) initWithSuccess: (RTUserProfile *) success aliasInUse: (RTAliasInUse *) aliasInUse aliasNoAuth: (RTAliasNotAuthenticated *) aliasNoAuth aliasPinInvalid: (RTAliasPinInvalid *) aliasPinInvalid deviceInUse: (RTDeviceInUse *) deviceInUse;

@end

@implementation RTPublicAPI_registerUser_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (RTUserProfile *) success aliasInUse: (RTAliasInUse *) aliasInUse aliasNoAuth: (RTAliasNotAuthenticated *) aliasNoAuth aliasPinInvalid: (RTAliasPinInvalid *) aliasPinInvalid deviceInUse: (RTDeviceInUse *) deviceInUse
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
    _aliasInUse = aliasInUse;
    _aliasInUseIsSet = YES;
    _aliasNoAuth = aliasNoAuth;
    _aliasNoAuthIsSet = YES;
    _aliasPinInvalid = aliasPinInvalid;
    _aliasPinInvalidIsSet = YES;
    _deviceInUse = deviceInUse;
    _deviceInUseIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
    if ([decoder containsValueForKey: @"aliasInUse"])
    {
      _aliasInUse = [decoder decodeObjectForKey: @"aliasInUse"];
      _aliasInUseIsSet = YES;
    }
    if ([decoder containsValueForKey: @"aliasNoAuth"])
    {
      _aliasNoAuth = [decoder decodeObjectForKey: @"aliasNoAuth"];
      _aliasNoAuthIsSet = YES;
    }
    if ([decoder containsValueForKey: @"aliasPinInvalid"])
    {
      _aliasPinInvalid = [decoder decodeObjectForKey: @"aliasPinInvalid"];
      _aliasPinInvalidIsSet = YES;
    }
    if ([decoder containsValueForKey: @"deviceInUse"])
    {
      _deviceInUse = [decoder decodeObjectForKey: @"deviceInUse"];
      _deviceInUseIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
  if (_aliasInUseIsSet)
  {
    [encoder encodeObject: _aliasInUse forKey: @"aliasInUse"];
  }
  if (_aliasNoAuthIsSet)
  {
    [encoder encodeObject: _aliasNoAuth forKey: @"aliasNoAuth"];
  }
  if (_aliasPinInvalidIsSet)
  {
    [encoder encodeObject: _aliasPinInvalid forKey: @"aliasPinInvalid"];
  }
  if (_deviceInUseIsSet)
  {
    [encoder encodeObject: _deviceInUse forKey: @"deviceInUse"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  hash = (hash * 31) ^ _aliasInUseIsSet ? 2654435761 : 0;
  if (_aliasInUseIsSet)
  {
    hash = (hash * 31) ^ [_aliasInUse hash];
  }
  hash = (hash * 31) ^ _aliasNoAuthIsSet ? 2654435761 : 0;
  if (_aliasNoAuthIsSet)
  {
    hash = (hash * 31) ^ [_aliasNoAuth hash];
  }
  hash = (hash * 31) ^ _aliasPinInvalidIsSet ? 2654435761 : 0;
  if (_aliasPinInvalidIsSet)
  {
    hash = (hash * 31) ^ [_aliasPinInvalid hash];
  }
  hash = (hash * 31) ^ _deviceInUseIsSet ? 2654435761 : 0;
  if (_deviceInUseIsSet)
  {
    hash = (hash * 31) ^ [_deviceInUse hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTPublicAPI_registerUser_result class]]) {
    return NO;
  }
  RTPublicAPI_registerUser_result *other = (RTPublicAPI_registerUser_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  if ((_aliasInUseIsSet != other->_aliasInUseIsSet) ||
      (_aliasInUseIsSet && ((_aliasInUse || other->_aliasInUse) && ![_aliasInUse isEqual:other->_aliasInUse]))) {
    return NO;
  }
  if ((_aliasNoAuthIsSet != other->_aliasNoAuthIsSet) ||
      (_aliasNoAuthIsSet && ((_aliasNoAuth || other->_aliasNoAuth) && ![_aliasNoAuth isEqual:other->_aliasNoAuth]))) {
    return NO;
  }
  if ((_aliasPinInvalidIsSet != other->_aliasPinInvalidIsSet) ||
      (_aliasPinInvalidIsSet && ((_aliasPinInvalid || other->_aliasPinInvalid) && ![_aliasPinInvalid isEqual:other->_aliasPinInvalid]))) {
    return NO;
  }
  if ((_deviceInUseIsSet != other->_deviceInUseIsSet) ||
      (_deviceInUseIsSet && ((_deviceInUse || other->_deviceInUse) && ![_deviceInUse isEqual:other->_deviceInUse]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTPublicAPI_registerUser_result * val = [RTPublicAPI_registerUser_result new];
  val.success = [self.success copy];
  val.aliasInUse = [self.aliasInUse copy];
  val.aliasNoAuth = [self.aliasNoAuth copy];
  val.aliasPinInvalid = [self.aliasPinInvalid copy];
  val.deviceInUse = [self.deviceInUse copy];
  return val;
}

- (void) setSuccess: (RTUserProfile *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (void) setAliasInUse: (RTAliasInUse *) aliasInUse {
  _aliasInUse = aliasInUse;
  _aliasInUseIsSet = YES;
}

- (void) unsetAliasInUse {
  _aliasInUse = nil;
  _aliasInUseIsSet = NO;
}

- (void) setAliasNoAuth: (RTAliasNotAuthenticated *) aliasNoAuth {
  _aliasNoAuth = aliasNoAuth;
  _aliasNoAuthIsSet = YES;
}

- (void) unsetAliasNoAuth {
  _aliasNoAuth = nil;
  _aliasNoAuthIsSet = NO;
}

- (void) setAliasPinInvalid: (RTAliasPinInvalid *) aliasPinInvalid {
  _aliasPinInvalid = aliasPinInvalid;
  _aliasPinInvalidIsSet = YES;
}

- (void) unsetAliasPinInvalid {
  _aliasPinInvalid = nil;
  _aliasPinInvalidIsSet = NO;
}

- (void) setDeviceInUse: (RTDeviceInUse *) deviceInUse {
  _deviceInUse = deviceInUse;
  _deviceInUseIsSet = YES;
}

- (void) unsetDeviceInUse {
  _deviceInUse = nil;
  _deviceInUseIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSTRUCT) {
          RTUserProfile *fieldValue = [[RTUserProfile alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 7:
        if (fieldType == TTypeSTRUCT) {
          RTAliasInUse *fieldValue = [[RTAliasInUse alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.aliasInUse = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 8:
        if (fieldType == TTypeSTRUCT) {
          RTAliasNotAuthenticated *fieldValue = [[RTAliasNotAuthenticated alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.aliasNoAuth = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 9:
        if (fieldType == TTypeSTRUCT) {
          RTAliasPinInvalid *fieldValue = [[RTAliasPinInvalid alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.aliasPinInvalid = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 10:
        if (fieldType == TTypeSTRUCT) {
          RTDeviceInUse *fieldValue = [[RTDeviceInUse alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.deviceInUse = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_registerUser_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSTRUCT fieldID: 0 error: __thriftError]) return NO;
      if (![_success write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_aliasInUseIsSet) {
    if (_aliasInUse != nil) {
      if (![outProtocol writeFieldBeginWithName: @"aliasInUse" type: TTypeSTRUCT fieldID: 7 error: __thriftError]) return NO;
      if (![_aliasInUse write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_aliasNoAuthIsSet) {
    if (_aliasNoAuth != nil) {
      if (![outProtocol writeFieldBeginWithName: @"aliasNoAuth" type: TTypeSTRUCT fieldID: 8 error: __thriftError]) return NO;
      if (![_aliasNoAuth write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_aliasPinInvalidIsSet) {
    if (_aliasPinInvalid != nil) {
      if (![outProtocol writeFieldBeginWithName: @"aliasPinInvalid" type: TTypeSTRUCT fieldID: 9 error: __thriftError]) return NO;
      if (![_aliasPinInvalid write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_deviceInUseIsSet) {
    if (_deviceInUse != nil) {
      if (![outProtocol writeFieldBeginWithName: @"deviceInUse" type: TTypeSTRUCT fieldID: 10 error: __thriftError]) return NO;
      if (![_deviceInUse write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTPublicAPI_registerUser_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @",aliasInUse:"];
  [ms appendFormat: @"%@", _aliasInUse];
  [ms appendString: @",aliasNoAuth:"];
  [ms appendFormat: @"%@", _aliasNoAuth];
  [ms appendString: @",aliasPinInvalid:"];
  [ms appendFormat: @"%@", _aliasPinInvalid];
  [ms appendString: @",deviceInUse:"];
  [ms appendFormat: @"%@", _deviceInUse];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTPublicAPI_signIn_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RTId * userId;
@property (assign, nonatomic) BOOL userIdIsSet;
- (void) unsetUserId;

@property (strong, nonatomic) NSString * password;
@property (assign, nonatomic) BOOL passwordIsSet;
- (void) unsetPassword;

@property (strong, nonatomic) RTId * deviceId;
@property (assign, nonatomic) BOOL deviceIdIsSet;
- (void) unsetDeviceId;


- (instancetype) initWithUserId: (RTId *) userId password: (NSString *) password deviceId: (RTId *) deviceId;

@end

@implementation RTPublicAPI_signIn_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithUserId: (RTId *) userId password: (NSString *) password deviceId: (RTId *) deviceId
{
  self = [super init];
  if (self)  {
    _userId = userId;
    _userIdIsSet = YES;
    _password = password;
    _passwordIsSet = YES;
    _deviceId = deviceId;
    _deviceIdIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"userId"])
    {
      _userId = [decoder decodeObjectForKey: @"userId"];
      _userIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"password"])
    {
      _password = [decoder decodeObjectForKey: @"password"];
      _passwordIsSet = YES;
    }
    if ([decoder containsValueForKey: @"deviceId"])
    {
      _deviceId = [decoder decodeObjectForKey: @"deviceId"];
      _deviceIdIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_userIdIsSet)
  {
    [encoder encodeObject: _userId forKey: @"userId"];
  }
  if (_passwordIsSet)
  {
    [encoder encodeObject: _password forKey: @"password"];
  }
  if (_deviceIdIsSet)
  {
    [encoder encodeObject: _deviceId forKey: @"deviceId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _userIdIsSet ? 2654435761 : 0;
  if (_userIdIsSet)
  {
    hash = (hash * 31) ^ [_userId hash];
  }
  hash = (hash * 31) ^ _passwordIsSet ? 2654435761 : 0;
  if (_passwordIsSet)
  {
    hash = (hash * 31) ^ [_password hash];
  }
  hash = (hash * 31) ^ _deviceIdIsSet ? 2654435761 : 0;
  if (_deviceIdIsSet)
  {
    hash = (hash * 31) ^ [_deviceId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTPublicAPI_signIn_args class]]) {
    return NO;
  }
  RTPublicAPI_signIn_args *other = (RTPublicAPI_signIn_args *)anObject;
  if ((_userIdIsSet != other->_userIdIsSet) ||
      (_userIdIsSet && ((_userId || other->_userId) && ![_userId isEqual:other->_userId]))) {
    return NO;
  }
  if ((_passwordIsSet != other->_passwordIsSet) ||
      (_passwordIsSet && ((_password || other->_password) && ![_password isEqual:other->_password]))) {
    return NO;
  }
  if ((_deviceIdIsSet != other->_deviceIdIsSet) ||
      (_deviceIdIsSet && ((_deviceId || other->_deviceId) && ![_deviceId isEqual:other->_deviceId]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTPublicAPI_signIn_args * val = [RTPublicAPI_signIn_args new];
  val.userId = [self.userId copy];
  val.password = [self.password copy];
  val.deviceId = [self.deviceId copy];
  return val;
}

- (void) setUserId: (RTId *) userId {
  _userId = userId;
  _userIdIsSet = YES;
}

- (void) unsetUserId {
  _userId = nil;
  _userIdIsSet = NO;
}

- (void) setPassword: (NSString *) password {
  _password = password;
  _passwordIsSet = YES;
}

- (void) unsetPassword {
  _password = nil;
  _passwordIsSet = NO;
}

- (void) setDeviceId: (RTId *) deviceId {
  _deviceId = deviceId;
  _deviceIdIsSet = YES;
}

- (void) unsetDeviceId {
  _deviceId = nil;
  _deviceIdIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          RTId *fieldValue = [[RTId alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.userId = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.password = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          RTId *fieldValue = [[RTId alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.deviceId = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_signIn_args" error: __thriftError]) return NO;
  if (_userIdIsSet) {
    if (_userId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"userId" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_userId write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_passwordIsSet) {
    if (_password != nil) {
      if (![outProtocol writeFieldBeginWithName: @"password" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _password error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_deviceIdIsSet) {
    if (_deviceId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"deviceId" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_deviceId write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTPublicAPI_signIn_args("];
  [ms appendString: @"userId:"];
  [ms appendFormat: @"%@", _userId];
  [ms appendString: @",password:"];
  [ms appendFormat: @"\"%@\"", _password];
  [ms appendString: @",deviceId:"];
  [ms appendFormat: @"%@", _deviceId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTPublicAPI_signIn_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) NSData * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;

@property (strong, nonatomic) RTInvalidDevice * device;
@property (assign, nonatomic) BOOL deviceIsSet;
- (void) unsetDevice;

@property (strong, nonatomic) RTSignInDisallowed * signInDisallowed;
@property (assign, nonatomic) BOOL signInDisallowedIsSet;
- (void) unsetSignInDisallowed;


- (instancetype) initWithSuccess: (NSData *) success device: (RTInvalidDevice *) device signInDisallowed: (RTSignInDisallowed *) signInDisallowed;

@end

@implementation RTPublicAPI_signIn_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (NSData *) success device: (RTInvalidDevice *) device signInDisallowed: (RTSignInDisallowed *) signInDisallowed
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
    _device = device;
    _deviceIsSet = YES;
    _signInDisallowed = signInDisallowed;
    _signInDisallowedIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
    if ([decoder containsValueForKey: @"device"])
    {
      _device = [decoder decodeObjectForKey: @"device"];
      _deviceIsSet = YES;
    }
    if ([decoder containsValueForKey: @"signInDisallowed"])
    {
      _signInDisallowed = [decoder decodeObjectForKey: @"signInDisallowed"];
      _signInDisallowedIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
  if (_deviceIsSet)
  {
    [encoder encodeObject: _device forKey: @"device"];
  }
  if (_signInDisallowedIsSet)
  {
    [encoder encodeObject: _signInDisallowed forKey: @"signInDisallowed"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  hash = (hash * 31) ^ _deviceIsSet ? 2654435761 : 0;
  if (_deviceIsSet)
  {
    hash = (hash * 31) ^ [_device hash];
  }
  hash = (hash * 31) ^ _signInDisallowedIsSet ? 2654435761 : 0;
  if (_signInDisallowedIsSet)
  {
    hash = (hash * 31) ^ [_signInDisallowed hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTPublicAPI_signIn_result class]]) {
    return NO;
  }
  RTPublicAPI_signIn_result *other = (RTPublicAPI_signIn_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  if ((_deviceIsSet != other->_deviceIsSet) ||
      (_deviceIsSet && ((_device || other->_device) && ![_device isEqual:other->_device]))) {
    return NO;
  }
  if ((_signInDisallowedIsSet != other->_signInDisallowedIsSet) ||
      (_signInDisallowedIsSet && ((_signInDisallowed || other->_signInDisallowed) && ![_signInDisallowed isEqual:other->_signInDisallowed]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTPublicAPI_signIn_result * val = [RTPublicAPI_signIn_result new];
  val.success = [self.success copy];
  val.device = [self.device copy];
  val.signInDisallowed = [self.signInDisallowed copy];
  return val;
}

- (void) setSuccess: (NSData *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (void) setDevice: (RTInvalidDevice *) device {
  _device = device;
  _deviceIsSet = YES;
}

- (void) unsetDevice {
  _device = nil;
  _deviceIsSet = NO;
}

- (void) setSignInDisallowed: (RTSignInDisallowed *) signInDisallowed {
  _signInDisallowed = signInDisallowed;
  _signInDisallowedIsSet = YES;
}

- (void) unsetSignInDisallowed {
  _signInDisallowed = nil;
  _signInDisallowedIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSTRING) {
          NSData * fieldValue;
          if (![inProtocol readBinary:&fieldValue error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRUCT) {
          RTInvalidDevice *fieldValue = [[RTInvalidDevice alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.device = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeSTRUCT) {
          RTSignInDisallowed *fieldValue = [[RTSignInDisallowed alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.signInDisallowed = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_signIn_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSTRING fieldID: 0 error: __thriftError]) return NO;
      if (![outProtocol writeBinary: _success error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_deviceIsSet) {
    if (_device != nil) {
      if (![outProtocol writeFieldBeginWithName: @"device" type: TTypeSTRUCT fieldID: 4 error: __thriftError]) return NO;
      if (![_device write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_signInDisallowedIsSet) {
    if (_signInDisallowed != nil) {
      if (![outProtocol writeFieldBeginWithName: @"signInDisallowed" type: TTypeSTRUCT fieldID: 5 error: __thriftError]) return NO;
      if (![_signInDisallowed write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTPublicAPI_signIn_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", _success];
  [ms appendString: @",device:"];
  [ms appendFormat: @"%@", _device];
  [ms appendString: @",signInDisallowed:"];
  [ms appendFormat: @"%@", _signInDisallowed];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTPublicAPI_generateAccessToken_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RTId * userId;
@property (assign, nonatomic) BOOL userIdIsSet;
- (void) unsetUserId;

@property (strong, nonatomic) RTId * deviceId;
@property (assign, nonatomic) BOOL deviceIdIsSet;
- (void) unsetDeviceId;

@property (strong, nonatomic) NSData * refreshToken;
@property (assign, nonatomic) BOOL refreshTokenIsSet;
- (void) unsetRefreshToken;


- (instancetype) initWithUserId: (RTId *) userId deviceId: (RTId *) deviceId refreshToken: (NSData *) refreshToken;

@end

@implementation RTPublicAPI_generateAccessToken_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithUserId: (RTId *) userId deviceId: (RTId *) deviceId refreshToken: (NSData *) refreshToken
{
  self = [super init];
  if (self)  {
    _userId = userId;
    _userIdIsSet = YES;
    _deviceId = deviceId;
    _deviceIdIsSet = YES;
    _refreshToken = refreshToken;
    _refreshTokenIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"userId"])
    {
      _userId = [decoder decodeObjectForKey: @"userId"];
      _userIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"deviceId"])
    {
      _deviceId = [decoder decodeObjectForKey: @"deviceId"];
      _deviceIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"refreshToken"])
    {
      _refreshToken = [decoder decodeObjectForKey: @"refreshToken"];
      _refreshTokenIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_userIdIsSet)
  {
    [encoder encodeObject: _userId forKey: @"userId"];
  }
  if (_deviceIdIsSet)
  {
    [encoder encodeObject: _deviceId forKey: @"deviceId"];
  }
  if (_refreshTokenIsSet)
  {
    [encoder encodeObject: _refreshToken forKey: @"refreshToken"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _userIdIsSet ? 2654435761 : 0;
  if (_userIdIsSet)
  {
    hash = (hash * 31) ^ [_userId hash];
  }
  hash = (hash * 31) ^ _deviceIdIsSet ? 2654435761 : 0;
  if (_deviceIdIsSet)
  {
    hash = (hash * 31) ^ [_deviceId hash];
  }
  hash = (hash * 31) ^ _refreshTokenIsSet ? 2654435761 : 0;
  if (_refreshTokenIsSet)
  {
    hash = (hash * 31) ^ [_refreshToken hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTPublicAPI_generateAccessToken_args class]]) {
    return NO;
  }
  RTPublicAPI_generateAccessToken_args *other = (RTPublicAPI_generateAccessToken_args *)anObject;
  if ((_userIdIsSet != other->_userIdIsSet) ||
      (_userIdIsSet && ((_userId || other->_userId) && ![_userId isEqual:other->_userId]))) {
    return NO;
  }
  if ((_deviceIdIsSet != other->_deviceIdIsSet) ||
      (_deviceIdIsSet && ((_deviceId || other->_deviceId) && ![_deviceId isEqual:other->_deviceId]))) {
    return NO;
  }
  if ((_refreshTokenIsSet != other->_refreshTokenIsSet) ||
      (_refreshTokenIsSet && ((_refreshToken || other->_refreshToken) && ![_refreshToken isEqual:other->_refreshToken]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTPublicAPI_generateAccessToken_args * val = [RTPublicAPI_generateAccessToken_args new];
  val.userId = [self.userId copy];
  val.deviceId = [self.deviceId copy];
  val.refreshToken = [self.refreshToken copy];
  return val;
}

- (void) setUserId: (RTId *) userId {
  _userId = userId;
  _userIdIsSet = YES;
}

- (void) unsetUserId {
  _userId = nil;
  _userIdIsSet = NO;
}

- (void) setDeviceId: (RTId *) deviceId {
  _deviceId = deviceId;
  _deviceIdIsSet = YES;
}

- (void) unsetDeviceId {
  _deviceId = nil;
  _deviceIdIsSet = NO;
}

- (void) setRefreshToken: (NSData *) refreshToken {
  _refreshToken = refreshToken;
  _refreshTokenIsSet = YES;
}

- (void) unsetRefreshToken {
  _refreshToken = nil;
  _refreshTokenIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          RTId *fieldValue = [[RTId alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.userId = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          RTId *fieldValue = [[RTId alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.deviceId = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSData * fieldValue;
          if (![inProtocol readBinary:&fieldValue error: __thriftError]) return NO;
          self.refreshToken = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_generateAccessToken_args" error: __thriftError]) return NO;
  if (_userIdIsSet) {
    if (_userId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"userId" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_userId write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_deviceIdIsSet) {
    if (_deviceId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"deviceId" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_deviceId write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_refreshTokenIsSet) {
    if (_refreshToken != nil) {
      if (![outProtocol writeFieldBeginWithName: @"refreshToken" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeBinary: _refreshToken error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTPublicAPI_generateAccessToken_args("];
  [ms appendString: @"userId:"];
  [ms appendFormat: @"%@", _userId];
  [ms appendString: @",deviceId:"];
  [ms appendFormat: @"%@", _deviceId];
  [ms appendString: @",refreshToken:"];
  [ms appendFormat: @"\"%@\"", _refreshToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTPublicAPI_generateAccessToken_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) NSString * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;

@property (strong, nonatomic) RTInvalidUser * invalidUser;
@property (assign, nonatomic) BOOL invalidUserIsSet;
- (void) unsetInvalidUser;

@property (strong, nonatomic) RTInvalidDevice * invalidDevice;
@property (assign, nonatomic) BOOL invalidDeviceIsSet;
- (void) unsetInvalidDevice;


- (instancetype) initWithSuccess: (NSString *) success invalidUser: (RTInvalidUser *) invalidUser invalidDevice: (RTInvalidDevice *) invalidDevice;

@end

@implementation RTPublicAPI_generateAccessToken_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (NSString *) success invalidUser: (RTInvalidUser *) invalidUser invalidDevice: (RTInvalidDevice *) invalidDevice
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
    _invalidUser = invalidUser;
    _invalidUserIsSet = YES;
    _invalidDevice = invalidDevice;
    _invalidDeviceIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
    if ([decoder containsValueForKey: @"invalidUser"])
    {
      _invalidUser = [decoder decodeObjectForKey: @"invalidUser"];
      _invalidUserIsSet = YES;
    }
    if ([decoder containsValueForKey: @"invalidDevice"])
    {
      _invalidDevice = [decoder decodeObjectForKey: @"invalidDevice"];
      _invalidDeviceIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
  if (_invalidUserIsSet)
  {
    [encoder encodeObject: _invalidUser forKey: @"invalidUser"];
  }
  if (_invalidDeviceIsSet)
  {
    [encoder encodeObject: _invalidDevice forKey: @"invalidDevice"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  hash = (hash * 31) ^ _invalidUserIsSet ? 2654435761 : 0;
  if (_invalidUserIsSet)
  {
    hash = (hash * 31) ^ [_invalidUser hash];
  }
  hash = (hash * 31) ^ _invalidDeviceIsSet ? 2654435761 : 0;
  if (_invalidDeviceIsSet)
  {
    hash = (hash * 31) ^ [_invalidDevice hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTPublicAPI_generateAccessToken_result class]]) {
    return NO;
  }
  RTPublicAPI_generateAccessToken_result *other = (RTPublicAPI_generateAccessToken_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  if ((_invalidUserIsSet != other->_invalidUserIsSet) ||
      (_invalidUserIsSet && ((_invalidUser || other->_invalidUser) && ![_invalidUser isEqual:other->_invalidUser]))) {
    return NO;
  }
  if ((_invalidDeviceIsSet != other->_invalidDeviceIsSet) ||
      (_invalidDeviceIsSet && ((_invalidDevice || other->_invalidDevice) && ![_invalidDevice isEqual:other->_invalidDevice]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTPublicAPI_generateAccessToken_result * val = [RTPublicAPI_generateAccessToken_result new];
  val.success = [self.success copy];
  val.invalidUser = [self.invalidUser copy];
  val.invalidDevice = [self.invalidDevice copy];
  return val;
}

- (void) setSuccess: (NSString *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (void) setInvalidUser: (RTInvalidUser *) invalidUser {
  _invalidUser = invalidUser;
  _invalidUserIsSet = YES;
}

- (void) unsetInvalidUser {
  _invalidUser = nil;
  _invalidUserIsSet = NO;
}

- (void) setInvalidDevice: (RTInvalidDevice *) invalidDevice {
  _invalidDevice = invalidDevice;
  _invalidDeviceIsSet = YES;
}

- (void) unsetInvalidDevice {
  _invalidDevice = nil;
  _invalidDeviceIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRUCT) {
          RTInvalidUser *fieldValue = [[RTInvalidUser alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.invalidUser = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeSTRUCT) {
          RTInvalidDevice *fieldValue = [[RTInvalidDevice alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.invalidDevice = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_generateAccessToken_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSTRING fieldID: 0 error: __thriftError]) return NO;
      if (![outProtocol writeString: _success error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_invalidUserIsSet) {
    if (_invalidUser != nil) {
      if (![outProtocol writeFieldBeginWithName: @"invalidUser" type: TTypeSTRUCT fieldID: 4 error: __thriftError]) return NO;
      if (![_invalidUser write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_invalidDeviceIsSet) {
    if (_invalidDevice != nil) {
      if (![outProtocol writeFieldBeginWithName: @"invalidDevice" type: TTypeSTRUCT fieldID: 5 error: __thriftError]) return NO;
      if (![_invalidDevice write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTPublicAPI_generateAccessToken_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", _success];
  [ms appendString: @",invalidUser:"];
  [ms appendFormat: @"%@", _invalidUser];
  [ms appendString: @",invalidDevice:"];
  [ms appendFormat: @"%@", _invalidDevice];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTPublicAPI_registerDevice_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RTId * userId;
@property (assign, nonatomic) BOOL userIdIsSet;
- (void) unsetUserId;

@property (strong, nonatomic) NSString * password;
@property (assign, nonatomic) BOOL passwordIsSet;
- (void) unsetPassword;

@property (strong, nonatomic) RTDeviceInfo * deviceInfo;
@property (assign, nonatomic) BOOL deviceInfoIsSet;
- (void) unsetDeviceInfo;


- (instancetype) initWithUserId: (RTId *) userId password: (NSString *) password deviceInfo: (RTDeviceInfo *) deviceInfo;

@end

@implementation RTPublicAPI_registerDevice_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithUserId: (RTId *) userId password: (NSString *) password deviceInfo: (RTDeviceInfo *) deviceInfo
{
  self = [super init];
  if (self)  {
    _userId = userId;
    _userIdIsSet = YES;
    _password = password;
    _passwordIsSet = YES;
    _deviceInfo = deviceInfo;
    _deviceInfoIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"userId"])
    {
      _userId = [decoder decodeObjectForKey: @"userId"];
      _userIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"password"])
    {
      _password = [decoder decodeObjectForKey: @"password"];
      _passwordIsSet = YES;
    }
    if ([decoder containsValueForKey: @"deviceInfo"])
    {
      _deviceInfo = [decoder decodeObjectForKey: @"deviceInfo"];
      _deviceInfoIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_userIdIsSet)
  {
    [encoder encodeObject: _userId forKey: @"userId"];
  }
  if (_passwordIsSet)
  {
    [encoder encodeObject: _password forKey: @"password"];
  }
  if (_deviceInfoIsSet)
  {
    [encoder encodeObject: _deviceInfo forKey: @"deviceInfo"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _userIdIsSet ? 2654435761 : 0;
  if (_userIdIsSet)
  {
    hash = (hash * 31) ^ [_userId hash];
  }
  hash = (hash * 31) ^ _passwordIsSet ? 2654435761 : 0;
  if (_passwordIsSet)
  {
    hash = (hash * 31) ^ [_password hash];
  }
  hash = (hash * 31) ^ _deviceInfoIsSet ? 2654435761 : 0;
  if (_deviceInfoIsSet)
  {
    hash = (hash * 31) ^ [_deviceInfo hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTPublicAPI_registerDevice_args class]]) {
    return NO;
  }
  RTPublicAPI_registerDevice_args *other = (RTPublicAPI_registerDevice_args *)anObject;
  if ((_userIdIsSet != other->_userIdIsSet) ||
      (_userIdIsSet && ((_userId || other->_userId) && ![_userId isEqual:other->_userId]))) {
    return NO;
  }
  if ((_passwordIsSet != other->_passwordIsSet) ||
      (_passwordIsSet && ((_password || other->_password) && ![_password isEqual:other->_password]))) {
    return NO;
  }
  if ((_deviceInfoIsSet != other->_deviceInfoIsSet) ||
      (_deviceInfoIsSet && ((_deviceInfo || other->_deviceInfo) && ![_deviceInfo isEqual:other->_deviceInfo]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTPublicAPI_registerDevice_args * val = [RTPublicAPI_registerDevice_args new];
  val.userId = [self.userId copy];
  val.password = [self.password copy];
  val.deviceInfo = [self.deviceInfo copy];
  return val;
}

- (void) setUserId: (RTId *) userId {
  _userId = userId;
  _userIdIsSet = YES;
}

- (void) unsetUserId {
  _userId = nil;
  _userIdIsSet = NO;
}

- (void) setPassword: (NSString *) password {
  _password = password;
  _passwordIsSet = YES;
}

- (void) unsetPassword {
  _password = nil;
  _passwordIsSet = NO;
}

- (void) setDeviceInfo: (RTDeviceInfo *) deviceInfo {
  _deviceInfo = deviceInfo;
  _deviceInfoIsSet = YES;
}

- (void) unsetDeviceInfo {
  _deviceInfo = nil;
  _deviceInfoIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          RTId *fieldValue = [[RTId alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.userId = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.password = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          RTDeviceInfo *fieldValue = [[RTDeviceInfo alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.deviceInfo = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_registerDevice_args" error: __thriftError]) return NO;
  if (_userIdIsSet) {
    if (_userId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"userId" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_userId write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_passwordIsSet) {
    if (_password != nil) {
      if (![outProtocol writeFieldBeginWithName: @"password" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _password error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_deviceInfoIsSet) {
    if (_deviceInfo != nil) {
      if (![outProtocol writeFieldBeginWithName: @"deviceInfo" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_deviceInfo write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTPublicAPI_registerDevice_args("];
  [ms appendString: @"userId:"];
  [ms appendFormat: @"%@", _userId];
  [ms appendString: @",password:"];
  [ms appendFormat: @"\"%@\"", _password];
  [ms appendString: @",deviceInfo:"];
  [ms appendFormat: @"%@", _deviceInfo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTPublicAPI_registerDevice_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RTDeviceInUse * deviceInUse;
@property (assign, nonatomic) BOOL deviceInUseIsSet;
- (void) unsetDeviceInUse;


- (instancetype) initWithDeviceInUse: (RTDeviceInUse *) deviceInUse;

@end

@implementation RTPublicAPI_registerDevice_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithDeviceInUse: (RTDeviceInUse *) deviceInUse
{
  self = [super init];
  if (self)  {
    _deviceInUse = deviceInUse;
    _deviceInUseIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"deviceInUse"])
    {
      _deviceInUse = [decoder decodeObjectForKey: @"deviceInUse"];
      _deviceInUseIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_deviceInUseIsSet)
  {
    [encoder encodeObject: _deviceInUse forKey: @"deviceInUse"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _deviceInUseIsSet ? 2654435761 : 0;
  if (_deviceInUseIsSet)
  {
    hash = (hash * 31) ^ [_deviceInUse hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTPublicAPI_registerDevice_result class]]) {
    return NO;
  }
  RTPublicAPI_registerDevice_result *other = (RTPublicAPI_registerDevice_result *)anObject;
  if ((_deviceInUseIsSet != other->_deviceInUseIsSet) ||
      (_deviceInUseIsSet && ((_deviceInUse || other->_deviceInUse) && ![_deviceInUse isEqual:other->_deviceInUse]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTPublicAPI_registerDevice_result * val = [RTPublicAPI_registerDevice_result new];
  val.deviceInUse = [self.deviceInUse copy];
  return val;
}

- (void) setDeviceInUse: (RTDeviceInUse *) deviceInUse {
  _deviceInUse = deviceInUse;
  _deviceInUseIsSet = YES;
}

- (void) unsetDeviceInUse {
  _deviceInUse = nil;
  _deviceInUseIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 4:
        if (fieldType == TTypeSTRUCT) {
          RTDeviceInUse *fieldValue = [[RTDeviceInUse alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.deviceInUse = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_registerDevice_result" error: __thriftError]) return NO;

  if (_deviceInUseIsSet) {
    if (_deviceInUse != nil) {
      if (![outProtocol writeFieldBeginWithName: @"deviceInUse" type: TTypeSTRUCT fieldID: 4 error: __thriftError]) return NO;
      if (![_deviceInUse write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTPublicAPI_registerDevice_result("];
  [ms appendString: @"deviceInUse:"];
  [ms appendFormat: @"%@", _deviceInUse];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTPublicAPI_replaceRegisteredDevice_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RTId * userId;
@property (assign, nonatomic) BOOL userIdIsSet;
- (void) unsetUserId;

@property (strong, nonatomic) NSString * password;
@property (assign, nonatomic) BOOL passwordIsSet;
- (void) unsetPassword;

@property (strong, nonatomic) RTDeviceInfo * deviceInfo;
@property (assign, nonatomic) BOOL deviceInfoIsSet;
- (void) unsetDeviceInfo;

@property (strong, nonatomic) RTId * currentDeviceId;
@property (assign, nonatomic) BOOL currentDeviceIdIsSet;
- (void) unsetCurrentDeviceId;


- (instancetype) initWithUserId: (RTId *) userId password: (NSString *) password deviceInfo: (RTDeviceInfo *) deviceInfo currentDeviceId: (RTId *) currentDeviceId;

@end

@implementation RTPublicAPI_replaceRegisteredDevice_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithUserId: (RTId *) userId password: (NSString *) password deviceInfo: (RTDeviceInfo *) deviceInfo currentDeviceId: (RTId *) currentDeviceId
{
  self = [super init];
  if (self)  {
    _userId = userId;
    _userIdIsSet = YES;
    _password = password;
    _passwordIsSet = YES;
    _deviceInfo = deviceInfo;
    _deviceInfoIsSet = YES;
    _currentDeviceId = currentDeviceId;
    _currentDeviceIdIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"userId"])
    {
      _userId = [decoder decodeObjectForKey: @"userId"];
      _userIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"password"])
    {
      _password = [decoder decodeObjectForKey: @"password"];
      _passwordIsSet = YES;
    }
    if ([decoder containsValueForKey: @"deviceInfo"])
    {
      _deviceInfo = [decoder decodeObjectForKey: @"deviceInfo"];
      _deviceInfoIsSet = YES;
    }
    if ([decoder containsValueForKey: @"currentDeviceId"])
    {
      _currentDeviceId = [decoder decodeObjectForKey: @"currentDeviceId"];
      _currentDeviceIdIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_userIdIsSet)
  {
    [encoder encodeObject: _userId forKey: @"userId"];
  }
  if (_passwordIsSet)
  {
    [encoder encodeObject: _password forKey: @"password"];
  }
  if (_deviceInfoIsSet)
  {
    [encoder encodeObject: _deviceInfo forKey: @"deviceInfo"];
  }
  if (_currentDeviceIdIsSet)
  {
    [encoder encodeObject: _currentDeviceId forKey: @"currentDeviceId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _userIdIsSet ? 2654435761 : 0;
  if (_userIdIsSet)
  {
    hash = (hash * 31) ^ [_userId hash];
  }
  hash = (hash * 31) ^ _passwordIsSet ? 2654435761 : 0;
  if (_passwordIsSet)
  {
    hash = (hash * 31) ^ [_password hash];
  }
  hash = (hash * 31) ^ _deviceInfoIsSet ? 2654435761 : 0;
  if (_deviceInfoIsSet)
  {
    hash = (hash * 31) ^ [_deviceInfo hash];
  }
  hash = (hash * 31) ^ _currentDeviceIdIsSet ? 2654435761 : 0;
  if (_currentDeviceIdIsSet)
  {
    hash = (hash * 31) ^ [_currentDeviceId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTPublicAPI_replaceRegisteredDevice_args class]]) {
    return NO;
  }
  RTPublicAPI_replaceRegisteredDevice_args *other = (RTPublicAPI_replaceRegisteredDevice_args *)anObject;
  if ((_userIdIsSet != other->_userIdIsSet) ||
      (_userIdIsSet && ((_userId || other->_userId) && ![_userId isEqual:other->_userId]))) {
    return NO;
  }
  if ((_passwordIsSet != other->_passwordIsSet) ||
      (_passwordIsSet && ((_password || other->_password) && ![_password isEqual:other->_password]))) {
    return NO;
  }
  if ((_deviceInfoIsSet != other->_deviceInfoIsSet) ||
      (_deviceInfoIsSet && ((_deviceInfo || other->_deviceInfo) && ![_deviceInfo isEqual:other->_deviceInfo]))) {
    return NO;
  }
  if ((_currentDeviceIdIsSet != other->_currentDeviceIdIsSet) ||
      (_currentDeviceIdIsSet && ((_currentDeviceId || other->_currentDeviceId) && ![_currentDeviceId isEqual:other->_currentDeviceId]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTPublicAPI_replaceRegisteredDevice_args * val = [RTPublicAPI_replaceRegisteredDevice_args new];
  val.userId = [self.userId copy];
  val.password = [self.password copy];
  val.deviceInfo = [self.deviceInfo copy];
  val.currentDeviceId = [self.currentDeviceId copy];
  return val;
}

- (void) setUserId: (RTId *) userId {
  _userId = userId;
  _userIdIsSet = YES;
}

- (void) unsetUserId {
  _userId = nil;
  _userIdIsSet = NO;
}

- (void) setPassword: (NSString *) password {
  _password = password;
  _passwordIsSet = YES;
}

- (void) unsetPassword {
  _password = nil;
  _passwordIsSet = NO;
}

- (void) setDeviceInfo: (RTDeviceInfo *) deviceInfo {
  _deviceInfo = deviceInfo;
  _deviceInfoIsSet = YES;
}

- (void) unsetDeviceInfo {
  _deviceInfo = nil;
  _deviceInfoIsSet = NO;
}

- (void) setCurrentDeviceId: (RTId *) currentDeviceId {
  _currentDeviceId = currentDeviceId;
  _currentDeviceIdIsSet = YES;
}

- (void) unsetCurrentDeviceId {
  _currentDeviceId = nil;
  _currentDeviceIdIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          RTId *fieldValue = [[RTId alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.userId = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.password = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          RTDeviceInfo *fieldValue = [[RTDeviceInfo alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.deviceInfo = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeSTRUCT) {
          RTId *fieldValue = [[RTId alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.currentDeviceId = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_replaceRegisteredDevice_args" error: __thriftError]) return NO;
  if (_userIdIsSet) {
    if (_userId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"userId" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_userId write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_passwordIsSet) {
    if (_password != nil) {
      if (![outProtocol writeFieldBeginWithName: @"password" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _password error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_deviceInfoIsSet) {
    if (_deviceInfo != nil) {
      if (![outProtocol writeFieldBeginWithName: @"deviceInfo" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_deviceInfo write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_currentDeviceIdIsSet) {
    if (_currentDeviceId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"currentDeviceId" type: TTypeSTRUCT fieldID: 4 error: __thriftError]) return NO;
      if (![_currentDeviceId write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTPublicAPI_replaceRegisteredDevice_args("];
  [ms appendString: @"userId:"];
  [ms appendFormat: @"%@", _userId];
  [ms appendString: @",password:"];
  [ms appendFormat: @"\"%@\"", _password];
  [ms appendString: @",deviceInfo:"];
  [ms appendFormat: @"%@", _deviceInfo];
  [ms appendString: @",currentDeviceId:"];
  [ms appendFormat: @"%@", _currentDeviceId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTPublicAPI_replaceRegisteredDevice_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RTDeviceInUse * deviceInUse;
@property (assign, nonatomic) BOOL deviceInUseIsSet;
- (void) unsetDeviceInUse;

@property (strong, nonatomic) RTInvalidDevice * invalidDevice;
@property (assign, nonatomic) BOOL invalidDeviceIsSet;
- (void) unsetInvalidDevice;


- (instancetype) initWithDeviceInUse: (RTDeviceInUse *) deviceInUse invalidDevice: (RTInvalidDevice *) invalidDevice;

@end

@implementation RTPublicAPI_replaceRegisteredDevice_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithDeviceInUse: (RTDeviceInUse *) deviceInUse invalidDevice: (RTInvalidDevice *) invalidDevice
{
  self = [super init];
  if (self)  {
    _deviceInUse = deviceInUse;
    _deviceInUseIsSet = YES;
    _invalidDevice = invalidDevice;
    _invalidDeviceIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"deviceInUse"])
    {
      _deviceInUse = [decoder decodeObjectForKey: @"deviceInUse"];
      _deviceInUseIsSet = YES;
    }
    if ([decoder containsValueForKey: @"invalidDevice"])
    {
      _invalidDevice = [decoder decodeObjectForKey: @"invalidDevice"];
      _invalidDeviceIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_deviceInUseIsSet)
  {
    [encoder encodeObject: _deviceInUse forKey: @"deviceInUse"];
  }
  if (_invalidDeviceIsSet)
  {
    [encoder encodeObject: _invalidDevice forKey: @"invalidDevice"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _deviceInUseIsSet ? 2654435761 : 0;
  if (_deviceInUseIsSet)
  {
    hash = (hash * 31) ^ [_deviceInUse hash];
  }
  hash = (hash * 31) ^ _invalidDeviceIsSet ? 2654435761 : 0;
  if (_invalidDeviceIsSet)
  {
    hash = (hash * 31) ^ [_invalidDevice hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTPublicAPI_replaceRegisteredDevice_result class]]) {
    return NO;
  }
  RTPublicAPI_replaceRegisteredDevice_result *other = (RTPublicAPI_replaceRegisteredDevice_result *)anObject;
  if ((_deviceInUseIsSet != other->_deviceInUseIsSet) ||
      (_deviceInUseIsSet && ((_deviceInUse || other->_deviceInUse) && ![_deviceInUse isEqual:other->_deviceInUse]))) {
    return NO;
  }
  if ((_invalidDeviceIsSet != other->_invalidDeviceIsSet) ||
      (_invalidDeviceIsSet && ((_invalidDevice || other->_invalidDevice) && ![_invalidDevice isEqual:other->_invalidDevice]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTPublicAPI_replaceRegisteredDevice_result * val = [RTPublicAPI_replaceRegisteredDevice_result new];
  val.deviceInUse = [self.deviceInUse copy];
  val.invalidDevice = [self.invalidDevice copy];
  return val;
}

- (void) setDeviceInUse: (RTDeviceInUse *) deviceInUse {
  _deviceInUse = deviceInUse;
  _deviceInUseIsSet = YES;
}

- (void) unsetDeviceInUse {
  _deviceInUse = nil;
  _deviceInUseIsSet = NO;
}

- (void) setInvalidDevice: (RTInvalidDevice *) invalidDevice {
  _invalidDevice = invalidDevice;
  _invalidDeviceIsSet = YES;
}

- (void) unsetInvalidDevice {
  _invalidDevice = nil;
  _invalidDeviceIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 5:
        if (fieldType == TTypeSTRUCT) {
          RTDeviceInUse *fieldValue = [[RTDeviceInUse alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.deviceInUse = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 6:
        if (fieldType == TTypeSTRUCT) {
          RTInvalidDevice *fieldValue = [[RTInvalidDevice alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.invalidDevice = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_replaceRegisteredDevice_result" error: __thriftError]) return NO;

  if (_deviceInUseIsSet) {
    if (_deviceInUse != nil) {
      if (![outProtocol writeFieldBeginWithName: @"deviceInUse" type: TTypeSTRUCT fieldID: 5 error: __thriftError]) return NO;
      if (![_deviceInUse write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  } else if (_invalidDeviceIsSet) {
    if (_invalidDevice != nil) {
      if (![outProtocol writeFieldBeginWithName: @"invalidDevice" type: TTypeSTRUCT fieldID: 6 error: __thriftError]) return NO;
      if (![_invalidDevice write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTPublicAPI_replaceRegisteredDevice_result("];
  [ms appendString: @"deviceInUse:"];
  [ms appendFormat: @"%@", _deviceInUse];
  [ms appendString: @",invalidDevice:"];
  [ms appendFormat: @"%@", _invalidDevice];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTPublicAPI_unregisterDevice_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RTId * userId;
@property (assign, nonatomic) BOOL userIdIsSet;
- (void) unsetUserId;

@property (strong, nonatomic) NSString * password;
@property (assign, nonatomic) BOOL passwordIsSet;
- (void) unsetPassword;

@property (strong, nonatomic) RTId * deviceId;
@property (assign, nonatomic) BOOL deviceIdIsSet;
- (void) unsetDeviceId;


- (instancetype) initWithUserId: (RTId *) userId password: (NSString *) password deviceId: (RTId *) deviceId;

@end

@implementation RTPublicAPI_unregisterDevice_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithUserId: (RTId *) userId password: (NSString *) password deviceId: (RTId *) deviceId
{
  self = [super init];
  if (self)  {
    _userId = userId;
    _userIdIsSet = YES;
    _password = password;
    _passwordIsSet = YES;
    _deviceId = deviceId;
    _deviceIdIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"userId"])
    {
      _userId = [decoder decodeObjectForKey: @"userId"];
      _userIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"password"])
    {
      _password = [decoder decodeObjectForKey: @"password"];
      _passwordIsSet = YES;
    }
    if ([decoder containsValueForKey: @"deviceId"])
    {
      _deviceId = [decoder decodeObjectForKey: @"deviceId"];
      _deviceIdIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_userIdIsSet)
  {
    [encoder encodeObject: _userId forKey: @"userId"];
  }
  if (_passwordIsSet)
  {
    [encoder encodeObject: _password forKey: @"password"];
  }
  if (_deviceIdIsSet)
  {
    [encoder encodeObject: _deviceId forKey: @"deviceId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _userIdIsSet ? 2654435761 : 0;
  if (_userIdIsSet)
  {
    hash = (hash * 31) ^ [_userId hash];
  }
  hash = (hash * 31) ^ _passwordIsSet ? 2654435761 : 0;
  if (_passwordIsSet)
  {
    hash = (hash * 31) ^ [_password hash];
  }
  hash = (hash * 31) ^ _deviceIdIsSet ? 2654435761 : 0;
  if (_deviceIdIsSet)
  {
    hash = (hash * 31) ^ [_deviceId hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTPublicAPI_unregisterDevice_args class]]) {
    return NO;
  }
  RTPublicAPI_unregisterDevice_args *other = (RTPublicAPI_unregisterDevice_args *)anObject;
  if ((_userIdIsSet != other->_userIdIsSet) ||
      (_userIdIsSet && ((_userId || other->_userId) && ![_userId isEqual:other->_userId]))) {
    return NO;
  }
  if ((_passwordIsSet != other->_passwordIsSet) ||
      (_passwordIsSet && ((_password || other->_password) && ![_password isEqual:other->_password]))) {
    return NO;
  }
  if ((_deviceIdIsSet != other->_deviceIdIsSet) ||
      (_deviceIdIsSet && ((_deviceId || other->_deviceId) && ![_deviceId isEqual:other->_deviceId]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTPublicAPI_unregisterDevice_args * val = [RTPublicAPI_unregisterDevice_args new];
  val.userId = [self.userId copy];
  val.password = [self.password copy];
  val.deviceId = [self.deviceId copy];
  return val;
}

- (void) setUserId: (RTId *) userId {
  _userId = userId;
  _userIdIsSet = YES;
}

- (void) unsetUserId {
  _userId = nil;
  _userIdIsSet = NO;
}

- (void) setPassword: (NSString *) password {
  _password = password;
  _passwordIsSet = YES;
}

- (void) unsetPassword {
  _password = nil;
  _passwordIsSet = NO;
}

- (void) setDeviceId: (RTId *) deviceId {
  _deviceId = deviceId;
  _deviceIdIsSet = YES;
}

- (void) unsetDeviceId {
  _deviceId = nil;
  _deviceIdIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          RTId *fieldValue = [[RTId alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.userId = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.password = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRUCT) {
          RTId *fieldValue = [[RTId alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.deviceId = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_unregisterDevice_args" error: __thriftError]) return NO;
  if (_userIdIsSet) {
    if (_userId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"userId" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_userId write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_passwordIsSet) {
    if (_password != nil) {
      if (![outProtocol writeFieldBeginWithName: @"password" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _password error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_deviceIdIsSet) {
    if (_deviceId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"deviceId" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
      if (![_deviceId write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTPublicAPI_unregisterDevice_args("];
  [ms appendString: @"userId:"];
  [ms appendFormat: @"%@", _userId];
  [ms appendString: @",password:"];
  [ms appendFormat: @"\"%@\"", _password];
  [ms appendString: @",deviceId:"];
  [ms appendFormat: @"%@", _deviceId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTPublicAPI_unregisterDevice_result : NSObject <TBase, NSCoding, NSCopying> 



@end

@implementation RTPublicAPI_unregisterDevice_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTPublicAPI_unregisterDevice_result class]]) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTPublicAPI_unregisterDevice_result * val = [RTPublicAPI_unregisterDevice_result new];
  return val;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_unregisterDevice_result" error: __thriftError]) return NO;

  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTPublicAPI_unregisterDevice_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTPublicAPI_changePassword_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RTId * userId;
@property (assign, nonatomic) BOOL userIdIsSet;
- (void) unsetUserId;

@property (strong, nonatomic) NSString * oldPassword;
@property (assign, nonatomic) BOOL oldPasswordIsSet;
- (void) unsetOldPassword;

@property (strong, nonatomic) NSString * newPassword;
- (NSString *) newPassword __attribute__((objc_method_family(none)));
@property (assign, nonatomic) BOOL newPasswordIsSet;
- (void) unsetNewPassword;


- (instancetype) initWithUserId: (RTId *) userId oldPassword: (NSString *) oldPassword newPassword: (NSString *) newPassword;

@end

@implementation RTPublicAPI_changePassword_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithUserId: (RTId *) userId oldPassword: (NSString *) oldPassword newPassword: (NSString *) newPassword
{
  self = [super init];
  if (self)  {
    _userId = userId;
    _userIdIsSet = YES;
    _oldPassword = oldPassword;
    _oldPasswordIsSet = YES;
    _newPassword = newPassword;
    _newPasswordIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"userId"])
    {
      _userId = [decoder decodeObjectForKey: @"userId"];
      _userIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"oldPassword"])
    {
      _oldPassword = [decoder decodeObjectForKey: @"oldPassword"];
      _oldPasswordIsSet = YES;
    }
    if ([decoder containsValueForKey: @"newPassword"])
    {
      _newPassword = [decoder decodeObjectForKey: @"newPassword"];
      _newPasswordIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_userIdIsSet)
  {
    [encoder encodeObject: _userId forKey: @"userId"];
  }
  if (_oldPasswordIsSet)
  {
    [encoder encodeObject: _oldPassword forKey: @"oldPassword"];
  }
  if (_newPasswordIsSet)
  {
    [encoder encodeObject: _newPassword forKey: @"newPassword"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _userIdIsSet ? 2654435761 : 0;
  if (_userIdIsSet)
  {
    hash = (hash * 31) ^ [_userId hash];
  }
  hash = (hash * 31) ^ _oldPasswordIsSet ? 2654435761 : 0;
  if (_oldPasswordIsSet)
  {
    hash = (hash * 31) ^ [_oldPassword hash];
  }
  hash = (hash * 31) ^ _newPasswordIsSet ? 2654435761 : 0;
  if (_newPasswordIsSet)
  {
    hash = (hash * 31) ^ [_newPassword hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTPublicAPI_changePassword_args class]]) {
    return NO;
  }
  RTPublicAPI_changePassword_args *other = (RTPublicAPI_changePassword_args *)anObject;
  if ((_userIdIsSet != other->_userIdIsSet) ||
      (_userIdIsSet && ((_userId || other->_userId) && ![_userId isEqual:other->_userId]))) {
    return NO;
  }
  if ((_oldPasswordIsSet != other->_oldPasswordIsSet) ||
      (_oldPasswordIsSet && ((_oldPassword || other->_oldPassword) && ![_oldPassword isEqual:other->_oldPassword]))) {
    return NO;
  }
  if ((_newPasswordIsSet != other->_newPasswordIsSet) ||
      (_newPasswordIsSet && ((_newPassword || other->_newPassword) && ![_newPassword isEqual:other->_newPassword]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTPublicAPI_changePassword_args * val = [RTPublicAPI_changePassword_args new];
  val.userId = [self.userId copy];
  val.oldPassword = [self.oldPassword copy];
  val.newPassword = [self.newPassword copy];
  return val;
}

- (void) setUserId: (RTId *) userId {
  _userId = userId;
  _userIdIsSet = YES;
}

- (void) unsetUserId {
  _userId = nil;
  _userIdIsSet = NO;
}

- (void) setOldPassword: (NSString *) oldPassword {
  _oldPassword = oldPassword;
  _oldPasswordIsSet = YES;
}

- (void) unsetOldPassword {
  _oldPassword = nil;
  _oldPasswordIsSet = NO;
}

- (void) setNewPassword: (NSString *) newPassword {
  _newPassword = newPassword;
  _newPasswordIsSet = YES;
}

- (void) unsetNewPassword {
  _newPassword = nil;
  _newPasswordIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          RTId *fieldValue = [[RTId alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.userId = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.oldPassword = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.newPassword = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_changePassword_args" error: __thriftError]) return NO;
  if (_userIdIsSet) {
    if (_userId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"userId" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_userId write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_oldPasswordIsSet) {
    if (_oldPassword != nil) {
      if (![outProtocol writeFieldBeginWithName: @"oldPassword" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _oldPassword error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_newPasswordIsSet) {
    if (_newPassword != nil) {
      if (![outProtocol writeFieldBeginWithName: @"newPassword" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeString: _newPassword error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTPublicAPI_changePassword_args("];
  [ms appendString: @"userId:"];
  [ms appendFormat: @"%@", _userId];
  [ms appendString: @",oldPassword:"];
  [ms appendFormat: @"\"%@\"", _oldPassword];
  [ms appendString: @",newPassword:"];
  [ms appendFormat: @"\"%@\"", _newPassword];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTPublicAPI_changePassword_result : NSObject <TBase, NSCoding, NSCopying> 

@property (assign, nonatomic) BOOL success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;


- (instancetype) initWithSuccess: (BOOL) success;

@end

@implementation RTPublicAPI_changePassword_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (BOOL) success
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeBoolForKey: @"success"];
      _successIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeBool: _success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [@(_success) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTPublicAPI_changePassword_result class]]) {
    return NO;
  }
  RTPublicAPI_changePassword_result *other = (RTPublicAPI_changePassword_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && (_success != other->_success))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTPublicAPI_changePassword_result * val = [RTPublicAPI_changePassword_result new];
  val.success = self.success;
  return val;
}

- (void) setSuccess: (BOOL) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _successIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeBOOL) {
          BOOL fieldValue;
          if (![inProtocol readBool:&fieldValue error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_changePassword_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeBOOL fieldID: 0 error: __thriftError]) return NO;
    if (![outProtocol writeBool: _success error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTPublicAPI_changePassword_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", _success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTPublicAPI_requestTemporaryPassword_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RTAlias name;
@property (assign, nonatomic) BOOL nameIsSet;
- (void) unsetName;


- (instancetype) initWithName: (RTAlias) name;

@end

@implementation RTPublicAPI_requestTemporaryPassword_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithName: (RTAlias) name
{
  self = [super init];
  if (self)  {
    _name = name;
    _nameIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"name"])
    {
      _name = [decoder decodeObjectForKey: @"name"];
      _nameIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_nameIsSet)
  {
    [encoder encodeObject: _name forKey: @"name"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _nameIsSet ? 2654435761 : 0;
  if (_nameIsSet)
  {
    hash = (hash * 31) ^ [_name hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTPublicAPI_requestTemporaryPassword_args class]]) {
    return NO;
  }
  RTPublicAPI_requestTemporaryPassword_args *other = (RTPublicAPI_requestTemporaryPassword_args *)anObject;
  if ((_nameIsSet != other->_nameIsSet) ||
      (_nameIsSet && ((_name || other->_name) && ![_name isEqual:other->_name]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTPublicAPI_requestTemporaryPassword_args * val = [RTPublicAPI_requestTemporaryPassword_args new];
  val.name = [self.name copy];
  return val;
}

- (void) setName: (NSString *) name {
  _name = name;
  _nameIsSet = YES;
}

- (void) unsetName {
  _name = nil;
  _nameIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.name = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_requestTemporaryPassword_args" error: __thriftError]) return NO;
  if (_nameIsSet) {
    if (_name != nil) {
      if (![outProtocol writeFieldBeginWithName: @"name" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _name error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTPublicAPI_requestTemporaryPassword_args("];
  [ms appendString: @"name:"];
  [ms appendFormat: @"\"%@\"", _name];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTPublicAPI_requestTemporaryPassword_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RTId * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;


- (instancetype) initWithSuccess: (RTId *) success;

@end

@implementation RTPublicAPI_requestTemporaryPassword_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (RTId *) success
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTPublicAPI_requestTemporaryPassword_result class]]) {
    return NO;
  }
  RTPublicAPI_requestTemporaryPassword_result *other = (RTPublicAPI_requestTemporaryPassword_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTPublicAPI_requestTemporaryPassword_result * val = [RTPublicAPI_requestTemporaryPassword_result new];
  val.success = [self.success copy];
  return val;
}

- (void) setSuccess: (RTId *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeSTRUCT) {
          RTId *fieldValue = [[RTId alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_requestTemporaryPassword_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeSTRUCT fieldID: 0 error: __thriftError]) return NO;
      if (![_success write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTPublicAPI_requestTemporaryPassword_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTPublicAPI_checkTemporaryPassword_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RTId * userId;
@property (assign, nonatomic) BOOL userIdIsSet;
- (void) unsetUserId;

@property (strong, nonatomic) NSString * tempPassword;
@property (assign, nonatomic) BOOL tempPasswordIsSet;
- (void) unsetTempPassword;


- (instancetype) initWithUserId: (RTId *) userId tempPassword: (NSString *) tempPassword;

@end

@implementation RTPublicAPI_checkTemporaryPassword_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithUserId: (RTId *) userId tempPassword: (NSString *) tempPassword
{
  self = [super init];
  if (self)  {
    _userId = userId;
    _userIdIsSet = YES;
    _tempPassword = tempPassword;
    _tempPasswordIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"userId"])
    {
      _userId = [decoder decodeObjectForKey: @"userId"];
      _userIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"tempPassword"])
    {
      _tempPassword = [decoder decodeObjectForKey: @"tempPassword"];
      _tempPasswordIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_userIdIsSet)
  {
    [encoder encodeObject: _userId forKey: @"userId"];
  }
  if (_tempPasswordIsSet)
  {
    [encoder encodeObject: _tempPassword forKey: @"tempPassword"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _userIdIsSet ? 2654435761 : 0;
  if (_userIdIsSet)
  {
    hash = (hash * 31) ^ [_userId hash];
  }
  hash = (hash * 31) ^ _tempPasswordIsSet ? 2654435761 : 0;
  if (_tempPasswordIsSet)
  {
    hash = (hash * 31) ^ [_tempPassword hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTPublicAPI_checkTemporaryPassword_args class]]) {
    return NO;
  }
  RTPublicAPI_checkTemporaryPassword_args *other = (RTPublicAPI_checkTemporaryPassword_args *)anObject;
  if ((_userIdIsSet != other->_userIdIsSet) ||
      (_userIdIsSet && ((_userId || other->_userId) && ![_userId isEqual:other->_userId]))) {
    return NO;
  }
  if ((_tempPasswordIsSet != other->_tempPasswordIsSet) ||
      (_tempPasswordIsSet && ((_tempPassword || other->_tempPassword) && ![_tempPassword isEqual:other->_tempPassword]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTPublicAPI_checkTemporaryPassword_args * val = [RTPublicAPI_checkTemporaryPassword_args new];
  val.userId = [self.userId copy];
  val.tempPassword = [self.tempPassword copy];
  return val;
}

- (void) setUserId: (RTId *) userId {
  _userId = userId;
  _userIdIsSet = YES;
}

- (void) unsetUserId {
  _userId = nil;
  _userIdIsSet = NO;
}

- (void) setTempPassword: (NSString *) tempPassword {
  _tempPassword = tempPassword;
  _tempPasswordIsSet = YES;
}

- (void) unsetTempPassword {
  _tempPassword = nil;
  _tempPasswordIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          RTId *fieldValue = [[RTId alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.userId = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.tempPassword = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_checkTemporaryPassword_args" error: __thriftError]) return NO;
  if (_userIdIsSet) {
    if (_userId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"userId" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_userId write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_tempPasswordIsSet) {
    if (_tempPassword != nil) {
      if (![outProtocol writeFieldBeginWithName: @"tempPassword" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _tempPassword error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTPublicAPI_checkTemporaryPassword_args("];
  [ms appendString: @"userId:"];
  [ms appendFormat: @"%@", _userId];
  [ms appendString: @",tempPassword:"];
  [ms appendFormat: @"\"%@\"", _tempPassword];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTPublicAPI_checkTemporaryPassword_result : NSObject <TBase, NSCoding, NSCopying> 

@property (assign, nonatomic) BOOL success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;


- (instancetype) initWithSuccess: (BOOL) success;

@end

@implementation RTPublicAPI_checkTemporaryPassword_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (BOOL) success
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeBoolForKey: @"success"];
      _successIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeBool: _success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [@(_success) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTPublicAPI_checkTemporaryPassword_result class]]) {
    return NO;
  }
  RTPublicAPI_checkTemporaryPassword_result *other = (RTPublicAPI_checkTemporaryPassword_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && (_success != other->_success))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTPublicAPI_checkTemporaryPassword_result * val = [RTPublicAPI_checkTemporaryPassword_result new];
  val.success = self.success;
  return val;
}

- (void) setSuccess: (BOOL) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _successIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeBOOL) {
          BOOL fieldValue;
          if (![inProtocol readBool:&fieldValue error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_checkTemporaryPassword_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeBOOL fieldID: 0 error: __thriftError]) return NO;
    if (![outProtocol writeBool: _success error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTPublicAPI_checkTemporaryPassword_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", _success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTPublicAPI_resetPassword_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RTId * userId;
@property (assign, nonatomic) BOOL userIdIsSet;
- (void) unsetUserId;

@property (strong, nonatomic) NSString * tempPassword;
@property (assign, nonatomic) BOOL tempPasswordIsSet;
- (void) unsetTempPassword;

@property (strong, nonatomic) NSString * password;
@property (assign, nonatomic) BOOL passwordIsSet;
- (void) unsetPassword;


- (instancetype) initWithUserId: (RTId *) userId tempPassword: (NSString *) tempPassword password: (NSString *) password;

@end

@implementation RTPublicAPI_resetPassword_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithUserId: (RTId *) userId tempPassword: (NSString *) tempPassword password: (NSString *) password
{
  self = [super init];
  if (self)  {
    _userId = userId;
    _userIdIsSet = YES;
    _tempPassword = tempPassword;
    _tempPasswordIsSet = YES;
    _password = password;
    _passwordIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"userId"])
    {
      _userId = [decoder decodeObjectForKey: @"userId"];
      _userIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"tempPassword"])
    {
      _tempPassword = [decoder decodeObjectForKey: @"tempPassword"];
      _tempPasswordIsSet = YES;
    }
    if ([decoder containsValueForKey: @"password"])
    {
      _password = [decoder decodeObjectForKey: @"password"];
      _passwordIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_userIdIsSet)
  {
    [encoder encodeObject: _userId forKey: @"userId"];
  }
  if (_tempPasswordIsSet)
  {
    [encoder encodeObject: _tempPassword forKey: @"tempPassword"];
  }
  if (_passwordIsSet)
  {
    [encoder encodeObject: _password forKey: @"password"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _userIdIsSet ? 2654435761 : 0;
  if (_userIdIsSet)
  {
    hash = (hash * 31) ^ [_userId hash];
  }
  hash = (hash * 31) ^ _tempPasswordIsSet ? 2654435761 : 0;
  if (_tempPasswordIsSet)
  {
    hash = (hash * 31) ^ [_tempPassword hash];
  }
  hash = (hash * 31) ^ _passwordIsSet ? 2654435761 : 0;
  if (_passwordIsSet)
  {
    hash = (hash * 31) ^ [_password hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTPublicAPI_resetPassword_args class]]) {
    return NO;
  }
  RTPublicAPI_resetPassword_args *other = (RTPublicAPI_resetPassword_args *)anObject;
  if ((_userIdIsSet != other->_userIdIsSet) ||
      (_userIdIsSet && ((_userId || other->_userId) && ![_userId isEqual:other->_userId]))) {
    return NO;
  }
  if ((_tempPasswordIsSet != other->_tempPasswordIsSet) ||
      (_tempPasswordIsSet && ((_tempPassword || other->_tempPassword) && ![_tempPassword isEqual:other->_tempPassword]))) {
    return NO;
  }
  if ((_passwordIsSet != other->_passwordIsSet) ||
      (_passwordIsSet && ((_password || other->_password) && ![_password isEqual:other->_password]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTPublicAPI_resetPassword_args * val = [RTPublicAPI_resetPassword_args new];
  val.userId = [self.userId copy];
  val.tempPassword = [self.tempPassword copy];
  val.password = [self.password copy];
  return val;
}

- (void) setUserId: (RTId *) userId {
  _userId = userId;
  _userIdIsSet = YES;
}

- (void) unsetUserId {
  _userId = nil;
  _userIdIsSet = NO;
}

- (void) setTempPassword: (NSString *) tempPassword {
  _tempPassword = tempPassword;
  _tempPasswordIsSet = YES;
}

- (void) unsetTempPassword {
  _tempPassword = nil;
  _tempPasswordIsSet = NO;
}

- (void) setPassword: (NSString *) password {
  _password = password;
  _passwordIsSet = YES;
}

- (void) unsetPassword {
  _password = nil;
  _passwordIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          RTId *fieldValue = [[RTId alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.userId = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.tempPassword = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.password = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_resetPassword_args" error: __thriftError]) return NO;
  if (_userIdIsSet) {
    if (_userId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"userId" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_userId write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_tempPasswordIsSet) {
    if (_tempPassword != nil) {
      if (![outProtocol writeFieldBeginWithName: @"tempPassword" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _tempPassword error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_passwordIsSet) {
    if (_password != nil) {
      if (![outProtocol writeFieldBeginWithName: @"password" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeString: _password error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTPublicAPI_resetPassword_args("];
  [ms appendString: @"userId:"];
  [ms appendFormat: @"%@", _userId];
  [ms appendString: @",tempPassword:"];
  [ms appendFormat: @"\"%@\"", _tempPassword];
  [ms appendString: @",password:"];
  [ms appendFormat: @"\"%@\"", _password];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTPublicAPI_resetPassword_result : NSObject <TBase, NSCoding, NSCopying> 

@property (assign, nonatomic) BOOL success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;


- (instancetype) initWithSuccess: (BOOL) success;

@end

@implementation RTPublicAPI_resetPassword_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (BOOL) success
{
  self = [super init];
  if (self)  {
    _success = success;
    _successIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeBoolForKey: @"success"];
      _successIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeBool: _success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [@(_success) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTPublicAPI_resetPassword_result class]]) {
    return NO;
  }
  RTPublicAPI_resetPassword_result *other = (RTPublicAPI_resetPassword_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && (_success != other->_success))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTPublicAPI_resetPassword_result * val = [RTPublicAPI_resetPassword_result new];
  val.success = self.success;
  return val;
}

- (void) setSuccess: (BOOL) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _successIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeBOOL) {
          BOOL fieldValue;
          if (![inProtocol readBool:&fieldValue error: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_resetPassword_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeBOOL fieldID: 0 error: __thriftError]) return NO;
    if (![outProtocol writeBool: _success error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTPublicAPI_resetPassword_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", _success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTPublicAPIClient () {

  id<TProtocol> inProtocol;
  id<TProtocol> outProtocol;

}

@end

@implementation RTPublicAPIClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  if (self)   {
    inProtocol = anInProtocol;
    outProtocol = anOutProtocol;
  }
  return self;
}

- (BOOL) send_findUserWithAlias: (RTAlias) name error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"findUserWithAlias" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_findUserWithAlias_args" error: __thriftError]) return NO;
  if (name != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"name" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeString: name error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_findUserWithAlias: (RTUserInfo * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTPublicAPI_findUserWithAlias_result * resulter = [RTPublicAPI_findUserWithAlias_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"findUserWithAlias"}];
  }
  return NO;
}

- (RTUserInfo *) findUserWithAlias: (RTAlias) name error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_findUserWithAlias : name error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  RTUserInfo * __result;
  if (![self recv_findUserWithAlias: &__result error: __thriftError]) return nil;
  return __result;
}

- (BOOL) send_findUserWithId: (RTId *) userId error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"findUserWithId" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_findUserWithId_args" error: __thriftError]) return NO;
  if (userId != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"userId" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![userId write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_findUserWithId: (RTUserInfo * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTPublicAPI_findUserWithId_result * resulter = [RTPublicAPI_findUserWithId_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"findUserWithId"}];
  }
  return NO;
}

- (RTUserInfo *) findUserWithId: (RTId *) userId error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_findUserWithId : userId error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  RTUserInfo * __result;
  if (![self recv_findUserWithId: &__result error: __thriftError]) return nil;
  return __result;
}

- (BOOL) send_requestAliasAuthentication: (RTAlias) name error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"requestAliasAuthentication" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_requestAliasAuthentication_args" error: __thriftError]) return NO;
  if (name != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"name" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeString: name error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_requestAliasAuthentication: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTPublicAPI_requestAliasAuthentication_result * resulter = [RTPublicAPI_requestAliasAuthentication_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.aliasInUseIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter aliasInUse];
    }
    return NO;
  }
  if (resulter.authIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter auth];
    }
    return NO;
  }
  return YES;
}

- (BOOL) requestAliasAuthentication: (RTAlias) name error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_requestAliasAuthentication : name error: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  if (![self recv_requestAliasAuthentication: __thriftError]) return NO;
  return YES;
}

- (BOOL) send_checkAliasAuthentication: (RTAlias) name pin: (NSString *) pin error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"checkAliasAuthentication" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_checkAliasAuthentication_args" error: __thriftError]) return NO;
  if (name != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"name" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeString: name error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (pin != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"pin" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeString: pin error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_checkAliasAuthentication: (BOOL *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTPublicAPI_checkAliasAuthentication_result * resulter = [RTPublicAPI_checkAliasAuthentication_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (resulter.aliasNoAuthIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter aliasNoAuth];
    }
    return NO;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"checkAliasAuthentication"}];
  }
  return NO;
}

- (NSNumber *) checkAliasAuthentication: (RTAlias) name pin: (NSString *) pin error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_checkAliasAuthentication : name pin: pin error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  BOOL __result;
  if (![self recv_checkAliasAuthentication: &__result error: __thriftError]) return nil;
  return @(__result);
}

- (BOOL) send_findProfileWithId: (RTId *) userId password: (NSString *) password error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"findProfileWithId" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_findProfileWithId_args" error: __thriftError]) return NO;
  if (userId != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"userId" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![userId write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (password != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"password" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeString: password error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_findProfileWithId: (RTUserProfile * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTPublicAPI_findProfileWithId_result * resulter = [RTPublicAPI_findProfileWithId_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"findProfileWithId"}];
  }
  return NO;
}

- (RTUserProfile *) findProfileWithId: (RTId *) userId password: (NSString *) password error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_findProfileWithId : userId password: password error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  RTUserProfile * __result;
  if (![self recv_findProfileWithId: &__result error: __thriftError]) return nil;
  return __result;
}

- (BOOL) send_findProfileWithAlias: (NSString *) userAlias password: (NSString *) password error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"findProfileWithAlias" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_findProfileWithAlias_args" error: __thriftError]) return NO;
  if (userAlias != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"userAlias" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeString: userAlias error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (password != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"password" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeString: password error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_findProfileWithAlias: (RTUserProfile * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTPublicAPI_findProfileWithAlias_result * resulter = [RTPublicAPI_findProfileWithAlias_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"findProfileWithAlias"}];
  }
  return NO;
}

- (RTUserProfile *) findProfileWithAlias: (NSString *) userAlias password: (NSString *) password error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_findProfileWithAlias : userAlias password: password error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  RTUserProfile * __result;
  if (![self recv_findProfileWithAlias: &__result error: __thriftError]) return nil;
  return __result;
}

- (BOOL) send_registerUser: (NSString *) password encryptionCSR: (NSData *) encryptionCSR signingCSR: (NSData *) signingCSR authenticatedAliases: (NSArray<RTAuthenticatedAlias *> *) authenticatedAliases deviceInfo: (RTDeviceInfo *) deviceInfo error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"registerUser" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_registerUser_args" error: __thriftError]) return NO;
  if (password != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"password" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeString: password error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (encryptionCSR != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"encryptionCSR" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeBinary: encryptionCSR error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (signingCSR != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"signingCSR" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
    if (![outProtocol writeBinary: signingCSR error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (authenticatedAliases != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"authenticatedAliases" type: TTypeLIST fieldID: 4 error: __thriftError]) return NO;
    {
      if (![outProtocol writeListBeginWithElementType: TTypeSTRUCT size: (SInt32)[authenticatedAliases count] error: __thriftError]) return NO;
      int idx114;
      for (idx114 = 0; idx114 < [authenticatedAliases count]; idx114++)
      {
        if (![[authenticatedAliases objectAtIndex: idx114] write: outProtocol error: __thriftError]) return NO;
      }
      if (![outProtocol writeListEnd: __thriftError]) return NO;
    }
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (deviceInfo != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"deviceInfo" type: TTypeSTRUCT fieldID: 5 error: __thriftError]) return NO;
    if (![deviceInfo write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_registerUser: (RTUserProfile * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTPublicAPI_registerUser_result * resulter = [RTPublicAPI_registerUser_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (resulter.aliasInUseIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter aliasInUse];
    }
    return NO;
  }
  if (resulter.aliasNoAuthIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter aliasNoAuth];
    }
    return NO;
  }
  if (resulter.aliasPinInvalidIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter aliasPinInvalid];
    }
    return NO;
  }
  if (resulter.deviceInUseIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter deviceInUse];
    }
    return NO;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"registerUser"}];
  }
  return NO;
}

- (RTUserProfile *) registerUser: (NSString *) password encryptionCSR: (NSData *) encryptionCSR signingCSR: (NSData *) signingCSR authenticatedAliases: (NSArray<RTAuthenticatedAlias *> *) authenticatedAliases deviceInfo: (RTDeviceInfo *) deviceInfo error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_registerUser : password encryptionCSR: encryptionCSR signingCSR: signingCSR authenticatedAliases: authenticatedAliases deviceInfo: deviceInfo error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  RTUserProfile * __result;
  if (![self recv_registerUser: &__result error: __thriftError]) return nil;
  return __result;
}

- (BOOL) send_signIn: (RTId *) userId password: (NSString *) password deviceId: (RTId *) deviceId error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"signIn" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_signIn_args" error: __thriftError]) return NO;
  if (userId != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"userId" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![userId write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (password != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"password" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeString: password error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (deviceId != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"deviceId" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
    if (![deviceId write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_signIn: (NSData * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTPublicAPI_signIn_result * resulter = [RTPublicAPI_signIn_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (resulter.deviceIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter device];
    }
    return NO;
  }
  if (resulter.signInDisallowedIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter signInDisallowed];
    }
    return NO;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"signIn"}];
  }
  return NO;
}

- (NSData *) signIn: (RTId *) userId password: (NSString *) password deviceId: (RTId *) deviceId error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_signIn : userId password: password deviceId: deviceId error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  NSData * __result;
  if (![self recv_signIn: &__result error: __thriftError]) return nil;
  return __result;
}

- (BOOL) send_generateAccessToken: (RTId *) userId deviceId: (RTId *) deviceId refreshToken: (NSData *) refreshToken error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"generateAccessToken" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_generateAccessToken_args" error: __thriftError]) return NO;
  if (userId != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"userId" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![userId write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (deviceId != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"deviceId" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
    if (![deviceId write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (refreshToken != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"refreshToken" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
    if (![outProtocol writeBinary: refreshToken error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_generateAccessToken: (NSString * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTPublicAPI_generateAccessToken_result * resulter = [RTPublicAPI_generateAccessToken_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (resulter.invalidUserIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter invalidUser];
    }
    return NO;
  }
  if (resulter.invalidDeviceIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter invalidDevice];
    }
    return NO;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"generateAccessToken"}];
  }
  return NO;
}

- (NSString *) generateAccessToken: (RTId *) userId deviceId: (RTId *) deviceId refreshToken: (NSData *) refreshToken error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_generateAccessToken : userId deviceId: deviceId refreshToken: refreshToken error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  NSString * __result;
  if (![self recv_generateAccessToken: &__result error: __thriftError]) return nil;
  return __result;
}

- (BOOL) send_registerDevice: (RTId *) userId password: (NSString *) password deviceInfo: (RTDeviceInfo *) deviceInfo error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"registerDevice" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_registerDevice_args" error: __thriftError]) return NO;
  if (userId != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"userId" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![userId write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (password != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"password" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeString: password error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (deviceInfo != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"deviceInfo" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
    if (![deviceInfo write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_registerDevice: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTPublicAPI_registerDevice_result * resulter = [RTPublicAPI_registerDevice_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.deviceInUseIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter deviceInUse];
    }
    return NO;
  }
  return YES;
}

- (BOOL) registerDevice: (RTId *) userId password: (NSString *) password deviceInfo: (RTDeviceInfo *) deviceInfo error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_registerDevice : userId password: password deviceInfo: deviceInfo error: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  if (![self recv_registerDevice: __thriftError]) return NO;
  return YES;
}

- (BOOL) send_replaceRegisteredDevice: (RTId *) userId password: (NSString *) password deviceInfo: (RTDeviceInfo *) deviceInfo currentDeviceId: (RTId *) currentDeviceId error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"replaceRegisteredDevice" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_replaceRegisteredDevice_args" error: __thriftError]) return NO;
  if (userId != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"userId" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![userId write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (password != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"password" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeString: password error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (deviceInfo != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"deviceInfo" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
    if (![deviceInfo write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (currentDeviceId != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"currentDeviceId" type: TTypeSTRUCT fieldID: 4 error: __thriftError]) return NO;
    if (![currentDeviceId write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_replaceRegisteredDevice: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTPublicAPI_replaceRegisteredDevice_result * resulter = [RTPublicAPI_replaceRegisteredDevice_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.deviceInUseIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter deviceInUse];
    }
    return NO;
  }
  if (resulter.invalidDeviceIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter invalidDevice];
    }
    return NO;
  }
  return YES;
}

- (BOOL) replaceRegisteredDevice: (RTId *) userId password: (NSString *) password deviceInfo: (RTDeviceInfo *) deviceInfo currentDeviceId: (RTId *) currentDeviceId error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_replaceRegisteredDevice : userId password: password deviceInfo: deviceInfo currentDeviceId: currentDeviceId error: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  if (![self recv_replaceRegisteredDevice: __thriftError]) return NO;
  return YES;
}

- (BOOL) send_unregisterDevice: (RTId *) userId password: (NSString *) password deviceId: (RTId *) deviceId error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"unregisterDevice" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_unregisterDevice_args" error: __thriftError]) return NO;
  if (userId != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"userId" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![userId write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (password != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"password" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeString: password error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (deviceId != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"deviceId" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
    if (![deviceId write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_unregisterDevice: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTPublicAPI_unregisterDevice_result * resulter = [RTPublicAPI_unregisterDevice_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) unregisterDevice: (RTId *) userId password: (NSString *) password deviceId: (RTId *) deviceId error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_unregisterDevice : userId password: password deviceId: deviceId error: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  if (![self recv_unregisterDevice: __thriftError]) return NO;
  return YES;
}

- (BOOL) send_changePassword: (RTId *) userId oldPassword: (NSString *) oldPassword newPassword: (NSString *) newPassword error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"changePassword" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_changePassword_args" error: __thriftError]) return NO;
  if (userId != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"userId" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![userId write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (oldPassword != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"oldPassword" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeString: oldPassword error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (newPassword != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"newPassword" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
    if (![outProtocol writeString: newPassword error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_changePassword: (BOOL *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTPublicAPI_changePassword_result * resulter = [RTPublicAPI_changePassword_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"changePassword"}];
  }
  return NO;
}

- (NSNumber *) changePassword: (RTId *) userId oldPassword: (NSString *) oldPassword newPassword: (NSString *) newPassword error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_changePassword : userId oldPassword: oldPassword newPassword: newPassword error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  BOOL __result;
  if (![self recv_changePassword: &__result error: __thriftError]) return nil;
  return @(__result);
}

- (BOOL) send_requestTemporaryPassword: (RTAlias) name error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"requestTemporaryPassword" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_requestTemporaryPassword_args" error: __thriftError]) return NO;
  if (name != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"name" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeString: name error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_requestTemporaryPassword: (RTId * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTPublicAPI_requestTemporaryPassword_result * resulter = [RTPublicAPI_requestTemporaryPassword_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"requestTemporaryPassword"}];
  }
  return NO;
}

- (RTId *) requestTemporaryPassword: (RTAlias) name error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_requestTemporaryPassword : name error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  RTId * __result;
  if (![self recv_requestTemporaryPassword: &__result error: __thriftError]) return nil;
  return __result;
}

- (BOOL) send_checkTemporaryPassword: (RTId *) userId tempPassword: (NSString *) tempPassword error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"checkTemporaryPassword" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_checkTemporaryPassword_args" error: __thriftError]) return NO;
  if (userId != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"userId" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![userId write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (tempPassword != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"tempPassword" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeString: tempPassword error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_checkTemporaryPassword: (BOOL *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTPublicAPI_checkTemporaryPassword_result * resulter = [RTPublicAPI_checkTemporaryPassword_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"checkTemporaryPassword"}];
  }
  return NO;
}

- (NSNumber *) checkTemporaryPassword: (RTId *) userId tempPassword: (NSString *) tempPassword error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_checkTemporaryPassword : userId tempPassword: tempPassword error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  BOOL __result;
  if (![self recv_checkTemporaryPassword: &__result error: __thriftError]) return nil;
  return @(__result);
}

- (BOOL) send_resetPassword: (RTId *) userId tempPassword: (NSString *) tempPassword password: (NSString *) password error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"resetPassword" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_resetPassword_args" error: __thriftError]) return NO;
  if (userId != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"userId" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![userId write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (tempPassword != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"tempPassword" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeString: tempPassword error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (password != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"password" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
    if (![outProtocol writeString: password error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_resetPassword: (BOOL *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTPublicAPI_resetPassword_result * resulter = [RTPublicAPI_resetPassword_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"resetPassword"}];
  }
  return NO;
}

- (NSNumber *) resetPassword: (RTId *) userId tempPassword: (NSString *) tempPassword password: (NSString *) password error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_resetPassword : userId tempPassword: tempPassword password: password error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  BOOL __result;
  if (![self recv_resetPassword: &__result error: __thriftError]) return nil;
  return @(__result);
}

@end

@interface RTPublicAPIProcessor () {
  id <RTPublicAPI> service;
  NSDictionary * methodMap;
}
@end

@implementation RTPublicAPIProcessor

- (id) initWithPublicAPI: (id <RTPublicAPI>) aService
{
  self = [super init];
  if (self)   {
    service = aService;
    methodMap = [NSMutableDictionary dictionary];
    {
      SEL s = @selector(process_findUserWithAlias_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"findUserWithAlias"];
    }
    {
      SEL s = @selector(process_findUserWithId_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"findUserWithId"];
    }
    {
      SEL s = @selector(process_requestAliasAuthentication_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"requestAliasAuthentication"];
    }
    {
      SEL s = @selector(process_checkAliasAuthentication_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"checkAliasAuthentication"];
    }
    {
      SEL s = @selector(process_findProfileWithId_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"findProfileWithId"];
    }
    {
      SEL s = @selector(process_findProfileWithAlias_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"findProfileWithAlias"];
    }
    {
      SEL s = @selector(process_registerUser_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"registerUser"];
    }
    {
      SEL s = @selector(process_signIn_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"signIn"];
    }
    {
      SEL s = @selector(process_generateAccessToken_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"generateAccessToken"];
    }
    {
      SEL s = @selector(process_registerDevice_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"registerDevice"];
    }
    {
      SEL s = @selector(process_replaceRegisteredDevice_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"replaceRegisteredDevice"];
    }
    {
      SEL s = @selector(process_unregisterDevice_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"unregisterDevice"];
    }
    {
      SEL s = @selector(process_changePassword_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"changePassword"];
    }
    {
      SEL s = @selector(process_requestTemporaryPassword_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"requestTemporaryPassword"];
    }
    {
      SEL s = @selector(process_checkTemporaryPassword_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"checkTemporaryPassword"];
    }
    {
      SEL s = @selector(process_resetPassword_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"resetPassword"];
    }
  }
  return self;
}

- (id<RTPublicAPI>) service
{
  return service;
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
                          error: (NSError *__autoreleasing *)__thriftError
{
  NSString * messageName;
  SInt32 messageType;
  SInt32 seqID;
  if (![inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID
                                      error: __thriftError]) return NO;
  NSInvocation * invocation = [methodMap valueForKey: messageName];
  if (invocation == nil) {
    if (![TProtocolUtil skipType: TTypeSTRUCT onProtocol: inProtocol error: __thriftError]) return NO;
    if (![inProtocol readMessageEnd: __thriftError]) return NO;
    NSError * x = [NSError errorWithDomain: TApplicationErrorDomain
                                      code: TApplicationErrorUnknownMethod
                                  userInfo: @{TApplicationErrorMethodKey: messageName}];
    if (![outProtocol writeMessageBeginWithName: messageName
                                           type: TMessageTypeEXCEPTION
                                     sequenceID: seqID
                                          error: __thriftError]) return NO;
    if (![x write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeMessageEnd: __thriftError]) return NO;
    if (![[outProtocol transport] flush: __thriftError]) return NO;
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setArgument: &__thriftError atIndex: 5];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (BOOL) process_findUserWithAlias_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  RTPublicAPI_findUserWithAlias_args * args = [RTPublicAPI_findUserWithAlias_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  RTPublicAPI_findUserWithAlias_result * result = [RTPublicAPI_findUserWithAlias_result new];
  RTUserInfo * serviceResult = [service findUserWithAlias: [args name] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"findUserWithAlias"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_findUserWithId_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  RTPublicAPI_findUserWithId_args * args = [RTPublicAPI_findUserWithId_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  RTPublicAPI_findUserWithId_result * result = [RTPublicAPI_findUserWithId_result new];
  RTUserInfo * serviceResult = [service findUserWithId: [args userId] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"findUserWithId"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_requestAliasAuthentication_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  RTPublicAPI_requestAliasAuthentication_args * args = [RTPublicAPI_requestAliasAuthentication_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  RTPublicAPI_requestAliasAuthentication_result * result = [RTPublicAPI_requestAliasAuthentication_result new];
  BOOL serviceResult = [service requestAliasAuthentication: [args name] error: __thriftError];
  if (!serviceResult) return NO;
  if (![outProtocol writeMessageBeginWithName: @"requestAliasAuthentication"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_checkAliasAuthentication_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  RTPublicAPI_checkAliasAuthentication_args * args = [RTPublicAPI_checkAliasAuthentication_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  RTPublicAPI_checkAliasAuthentication_result * result = [RTPublicAPI_checkAliasAuthentication_result new];
  NSNumber * serviceResult = [service checkAliasAuthentication: [args name] pin: [args pin] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: [serviceResult boolValue]];
  if (![outProtocol writeMessageBeginWithName: @"checkAliasAuthentication"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_findProfileWithId_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  RTPublicAPI_findProfileWithId_args * args = [RTPublicAPI_findProfileWithId_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  RTPublicAPI_findProfileWithId_result * result = [RTPublicAPI_findProfileWithId_result new];
  RTUserProfile * serviceResult = [service findProfileWithId: [args userId] password: [args password] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"findProfileWithId"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_findProfileWithAlias_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  RTPublicAPI_findProfileWithAlias_args * args = [RTPublicAPI_findProfileWithAlias_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  RTPublicAPI_findProfileWithAlias_result * result = [RTPublicAPI_findProfileWithAlias_result new];
  RTUserProfile * serviceResult = [service findProfileWithAlias: [args userAlias] password: [args password] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"findProfileWithAlias"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_registerUser_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  RTPublicAPI_registerUser_args * args = [RTPublicAPI_registerUser_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  RTPublicAPI_registerUser_result * result = [RTPublicAPI_registerUser_result new];
  RTUserProfile * serviceResult = [service registerUser: [args password] encryptionCSR: [args encryptionCSR] signingCSR: [args signingCSR] authenticatedAliases: [args authenticatedAliases] deviceInfo: [args deviceInfo] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"registerUser"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_signIn_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  RTPublicAPI_signIn_args * args = [RTPublicAPI_signIn_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  RTPublicAPI_signIn_result * result = [RTPublicAPI_signIn_result new];
  NSData * serviceResult = [service signIn: [args userId] password: [args password] deviceId: [args deviceId] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"signIn"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_generateAccessToken_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  RTPublicAPI_generateAccessToken_args * args = [RTPublicAPI_generateAccessToken_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  RTPublicAPI_generateAccessToken_result * result = [RTPublicAPI_generateAccessToken_result new];
  NSString * serviceResult = [service generateAccessToken: [args userId] deviceId: [args deviceId] refreshToken: [args refreshToken] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"generateAccessToken"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_registerDevice_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  RTPublicAPI_registerDevice_args * args = [RTPublicAPI_registerDevice_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  RTPublicAPI_registerDevice_result * result = [RTPublicAPI_registerDevice_result new];
  BOOL serviceResult = [service registerDevice: [args userId] password: [args password] deviceInfo: [args deviceInfo] error: __thriftError];
  if (!serviceResult) return NO;
  if (![outProtocol writeMessageBeginWithName: @"registerDevice"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_replaceRegisteredDevice_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  RTPublicAPI_replaceRegisteredDevice_args * args = [RTPublicAPI_replaceRegisteredDevice_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  RTPublicAPI_replaceRegisteredDevice_result * result = [RTPublicAPI_replaceRegisteredDevice_result new];
  BOOL serviceResult = [service replaceRegisteredDevice: [args userId] password: [args password] deviceInfo: [args deviceInfo] currentDeviceId: [args currentDeviceId] error: __thriftError];
  if (!serviceResult) return NO;
  if (![outProtocol writeMessageBeginWithName: @"replaceRegisteredDevice"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_unregisterDevice_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  RTPublicAPI_unregisterDevice_args * args = [RTPublicAPI_unregisterDevice_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  RTPublicAPI_unregisterDevice_result * result = [RTPublicAPI_unregisterDevice_result new];
  BOOL serviceResult = [service unregisterDevice: [args userId] password: [args password] deviceId: [args deviceId] error: __thriftError];
  if (!serviceResult) return NO;
  if (![outProtocol writeMessageBeginWithName: @"unregisterDevice"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_changePassword_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  RTPublicAPI_changePassword_args * args = [RTPublicAPI_changePassword_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  RTPublicAPI_changePassword_result * result = [RTPublicAPI_changePassword_result new];
  NSNumber * serviceResult = [service changePassword: [args userId] oldPassword: [args oldPassword] newPassword: [args newPassword] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: [serviceResult boolValue]];
  if (![outProtocol writeMessageBeginWithName: @"changePassword"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_requestTemporaryPassword_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  RTPublicAPI_requestTemporaryPassword_args * args = [RTPublicAPI_requestTemporaryPassword_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  RTPublicAPI_requestTemporaryPassword_result * result = [RTPublicAPI_requestTemporaryPassword_result new];
  RTId * serviceResult = [service requestTemporaryPassword: [args name] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"requestTemporaryPassword"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_checkTemporaryPassword_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  RTPublicAPI_checkTemporaryPassword_args * args = [RTPublicAPI_checkTemporaryPassword_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  RTPublicAPI_checkTemporaryPassword_result * result = [RTPublicAPI_checkTemporaryPassword_result new];
  NSNumber * serviceResult = [service checkTemporaryPassword: [args userId] tempPassword: [args tempPassword] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: [serviceResult boolValue]];
  if (![outProtocol writeMessageBeginWithName: @"checkTemporaryPassword"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_resetPassword_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  RTPublicAPI_resetPassword_args * args = [RTPublicAPI_resetPassword_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  RTPublicAPI_resetPassword_result * result = [RTPublicAPI_resetPassword_result new];
  NSNumber * serviceResult = [service resetPassword: [args userId] tempPassword: [args tempPassword] password: [args password] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: [serviceResult boolValue]];
  if (![outProtocol writeMessageBeginWithName: @"resetPassword"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}
@end

@interface RTPublicAPIClientAsync () {

  id<TProtocolFactory> protocolFactory;
  id<TAsyncTransportFactory> transportFactory;

}

@end

@implementation RTPublicAPIClientAsync

- (id) initWithProtocolFactory: (id <TProtocolFactory>) aProtocolFactory transportFactory: (id <TAsyncTransportFactory>) aTransportFactory;
{
  self = [super init];
  if (self) {
    protocolFactory = aProtocolFactory;
    transportFactory = aTransportFactory;
  }
  return self;
}

- (BOOL) send_findUserWithAlias: (RTAlias) name protocol: (id<TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"findUserWithAlias" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_findUserWithAlias_args" error: __thriftError]) return NO;
  if (name != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"name" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeString: name error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_findUserWithAlias: (RTUserInfo * *) result protocol: (id<TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTPublicAPI_findUserWithAlias_result * resulter = [RTPublicAPI_findUserWithAlias_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"findUserWithAlias"}];
  }
  return NO;
}

- (void) findUserWithAlias: (RTAlias) name response: (void (^)(RTUserInfo *)) responseBlock failure : (TAsyncFailureBlock) failureBlock
{
  NSError *thriftError;
  id<TAsyncTransport> transport = [transportFactory newTransport];
  id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

  if (![self send_findUserWithAlias : name protocol: protocol error: &thriftError])   {
    failureBlock(thriftError);
    return;
  }
  [transport flushWithCompletion:^{
    NSError *thriftError;
    RTUserInfo * result;
    if (![self recv_findUserWithAlias: &result protocol: protocol error: &thriftError])     {
      failureBlock(thriftError);
      return;
    }
    responseBlock(result);
  } failure:failureBlock];
}

- (AnyPromise *) findUserWithAlias: (RTAlias) name
{
  return [AnyPromise promiseWithResolverBlock:^(PMKResolver resolver) {
    NSError *thriftError;
    id<TAsyncTransport> transport = [transportFactory newTransport];
    id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

    if (![self send_findUserWithAlias : name protocol: protocol error: &thriftError])     {
      resolver(thriftError);
      return;
    }
    [transport flushWithCompletion:^{
      NSError *thriftError;
      RTUserInfo * result;
      if (![self recv_findUserWithAlias: &result protocol: protocol error: &thriftError])       {
        resolver(thriftError);
        return;
      }
      resolver(result);
    } failure:^(NSError *error) {
      resolver(error);
    }];
  }];
}

- (BOOL) send_findUserWithId: (RTId *) userId protocol: (id<TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"findUserWithId" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_findUserWithId_args" error: __thriftError]) return NO;
  if (userId != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"userId" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![userId write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_findUserWithId: (RTUserInfo * *) result protocol: (id<TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTPublicAPI_findUserWithId_result * resulter = [RTPublicAPI_findUserWithId_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"findUserWithId"}];
  }
  return NO;
}

- (void) findUserWithId: (RTId *) userId response: (void (^)(RTUserInfo *)) responseBlock failure : (TAsyncFailureBlock) failureBlock
{
  NSError *thriftError;
  id<TAsyncTransport> transport = [transportFactory newTransport];
  id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

  if (![self send_findUserWithId : userId protocol: protocol error: &thriftError])   {
    failureBlock(thriftError);
    return;
  }
  [transport flushWithCompletion:^{
    NSError *thriftError;
    RTUserInfo * result;
    if (![self recv_findUserWithId: &result protocol: protocol error: &thriftError])     {
      failureBlock(thriftError);
      return;
    }
    responseBlock(result);
  } failure:failureBlock];
}

- (AnyPromise *) findUserWithId: (RTId *) userId
{
  return [AnyPromise promiseWithResolverBlock:^(PMKResolver resolver) {
    NSError *thriftError;
    id<TAsyncTransport> transport = [transportFactory newTransport];
    id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

    if (![self send_findUserWithId : userId protocol: protocol error: &thriftError])     {
      resolver(thriftError);
      return;
    }
    [transport flushWithCompletion:^{
      NSError *thriftError;
      RTUserInfo * result;
      if (![self recv_findUserWithId: &result protocol: protocol error: &thriftError])       {
        resolver(thriftError);
        return;
      }
      resolver(result);
    } failure:^(NSError *error) {
      resolver(error);
    }];
  }];
}

- (BOOL) send_requestAliasAuthentication: (RTAlias) name protocol: (id<TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"requestAliasAuthentication" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_requestAliasAuthentication_args" error: __thriftError]) return NO;
  if (name != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"name" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeString: name error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_requestAliasAuthentication: (id<TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTPublicAPI_requestAliasAuthentication_result * resulter = [RTPublicAPI_requestAliasAuthentication_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.aliasInUseIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter aliasInUse];
    }
    return NO;
  }
  if (resulter.authIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter auth];
    }
    return NO;
  }
  return YES;
}

- (void) requestAliasAuthentication: (RTAlias) name response: (void (^)()) responseBlock failure : (TAsyncFailureBlock) failureBlock
{
  NSError *thriftError;
  id<TAsyncTransport> transport = [transportFactory newTransport];
  id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

  if (![self send_requestAliasAuthentication : name protocol: protocol error: &thriftError])   {
    failureBlock(thriftError);
    return;
  }
  [transport flushWithCompletion:^{
    NSError *thriftError;
    if (![self recv_requestAliasAuthentication: protocol error: &thriftError])     {
      failureBlock(thriftError);
      return;
    }
    responseBlock();
  } failure:failureBlock];
}

- (AnyPromise *) requestAliasAuthentication: (RTAlias) name
{
  return [AnyPromise promiseWithResolverBlock:^(PMKResolver resolver) {
    NSError *thriftError;
    id<TAsyncTransport> transport = [transportFactory newTransport];
    id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

    if (![self send_requestAliasAuthentication : name protocol: protocol error: &thriftError])     {
      resolver(thriftError);
      return;
    }
    [transport flushWithCompletion:^{
      NSError *thriftError;
      if (![self recv_requestAliasAuthentication: protocol error: &thriftError])       {
        resolver(thriftError);
        return;
      }
      resolver(@YES);
    } failure:^(NSError *error) {
      resolver(error);
    }];
  }];
}

- (BOOL) send_checkAliasAuthentication: (RTAlias) name pin: (NSString *) pin protocol: (id<TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"checkAliasAuthentication" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_checkAliasAuthentication_args" error: __thriftError]) return NO;
  if (name != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"name" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeString: name error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (pin != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"pin" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeString: pin error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_checkAliasAuthentication: (BOOL *) result protocol: (id<TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTPublicAPI_checkAliasAuthentication_result * resulter = [RTPublicAPI_checkAliasAuthentication_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (resulter.aliasNoAuthIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter aliasNoAuth];
    }
    return NO;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"checkAliasAuthentication"}];
  }
  return NO;
}

- (void) checkAliasAuthentication: (RTAlias) name pin: (NSString *) pin response: (void (^)(BOOL)) responseBlock failure : (TAsyncFailureBlock) failureBlock
{
  NSError *thriftError;
  id<TAsyncTransport> transport = [transportFactory newTransport];
  id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

  if (![self send_checkAliasAuthentication : name pin: pin protocol: protocol error: &thriftError])   {
    failureBlock(thriftError);
    return;
  }
  [transport flushWithCompletion:^{
    NSError *thriftError;
    BOOL result;
    if (![self recv_checkAliasAuthentication: &result protocol: protocol error: &thriftError])     {
      failureBlock(thriftError);
      return;
    }
    responseBlock(result);
  } failure:failureBlock];
}

- (AnyPromise *) checkAliasAuthentication: (RTAlias) name pin: (NSString *) pin
{
  return [AnyPromise promiseWithResolverBlock:^(PMKResolver resolver) {
    NSError *thriftError;
    id<TAsyncTransport> transport = [transportFactory newTransport];
    id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

    if (![self send_checkAliasAuthentication : name pin: pin protocol: protocol error: &thriftError])     {
      resolver(thriftError);
      return;
    }
    [transport flushWithCompletion:^{
      NSError *thriftError;
      BOOL result;
      if (![self recv_checkAliasAuthentication: &result protocol: protocol error: &thriftError])       {
        resolver(thriftError);
        return;
      }
      resolver(@(result));
    } failure:^(NSError *error) {
      resolver(error);
    }];
  }];
}

- (BOOL) send_findProfileWithId: (RTId *) userId password: (NSString *) password protocol: (id<TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"findProfileWithId" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_findProfileWithId_args" error: __thriftError]) return NO;
  if (userId != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"userId" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![userId write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (password != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"password" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeString: password error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_findProfileWithId: (RTUserProfile * *) result protocol: (id<TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTPublicAPI_findProfileWithId_result * resulter = [RTPublicAPI_findProfileWithId_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"findProfileWithId"}];
  }
  return NO;
}

- (void) findProfileWithId: (RTId *) userId password: (NSString *) password response: (void (^)(RTUserProfile *)) responseBlock failure : (TAsyncFailureBlock) failureBlock
{
  NSError *thriftError;
  id<TAsyncTransport> transport = [transportFactory newTransport];
  id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

  if (![self send_findProfileWithId : userId password: password protocol: protocol error: &thriftError])   {
    failureBlock(thriftError);
    return;
  }
  [transport flushWithCompletion:^{
    NSError *thriftError;
    RTUserProfile * result;
    if (![self recv_findProfileWithId: &result protocol: protocol error: &thriftError])     {
      failureBlock(thriftError);
      return;
    }
    responseBlock(result);
  } failure:failureBlock];
}

- (AnyPromise *) findProfileWithId: (RTId *) userId password: (NSString *) password
{
  return [AnyPromise promiseWithResolverBlock:^(PMKResolver resolver) {
    NSError *thriftError;
    id<TAsyncTransport> transport = [transportFactory newTransport];
    id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

    if (![self send_findProfileWithId : userId password: password protocol: protocol error: &thriftError])     {
      resolver(thriftError);
      return;
    }
    [transport flushWithCompletion:^{
      NSError *thriftError;
      RTUserProfile * result;
      if (![self recv_findProfileWithId: &result protocol: protocol error: &thriftError])       {
        resolver(thriftError);
        return;
      }
      resolver(result);
    } failure:^(NSError *error) {
      resolver(error);
    }];
  }];
}

- (BOOL) send_findProfileWithAlias: (NSString *) userAlias password: (NSString *) password protocol: (id<TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"findProfileWithAlias" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_findProfileWithAlias_args" error: __thriftError]) return NO;
  if (userAlias != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"userAlias" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeString: userAlias error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (password != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"password" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeString: password error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_findProfileWithAlias: (RTUserProfile * *) result protocol: (id<TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTPublicAPI_findProfileWithAlias_result * resulter = [RTPublicAPI_findProfileWithAlias_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"findProfileWithAlias"}];
  }
  return NO;
}

- (void) findProfileWithAlias: (NSString *) userAlias password: (NSString *) password response: (void (^)(RTUserProfile *)) responseBlock failure : (TAsyncFailureBlock) failureBlock
{
  NSError *thriftError;
  id<TAsyncTransport> transport = [transportFactory newTransport];
  id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

  if (![self send_findProfileWithAlias : userAlias password: password protocol: protocol error: &thriftError])   {
    failureBlock(thriftError);
    return;
  }
  [transport flushWithCompletion:^{
    NSError *thriftError;
    RTUserProfile * result;
    if (![self recv_findProfileWithAlias: &result protocol: protocol error: &thriftError])     {
      failureBlock(thriftError);
      return;
    }
    responseBlock(result);
  } failure:failureBlock];
}

- (AnyPromise *) findProfileWithAlias: (NSString *) userAlias password: (NSString *) password
{
  return [AnyPromise promiseWithResolverBlock:^(PMKResolver resolver) {
    NSError *thriftError;
    id<TAsyncTransport> transport = [transportFactory newTransport];
    id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

    if (![self send_findProfileWithAlias : userAlias password: password protocol: protocol error: &thriftError])     {
      resolver(thriftError);
      return;
    }
    [transport flushWithCompletion:^{
      NSError *thriftError;
      RTUserProfile * result;
      if (![self recv_findProfileWithAlias: &result protocol: protocol error: &thriftError])       {
        resolver(thriftError);
        return;
      }
      resolver(result);
    } failure:^(NSError *error) {
      resolver(error);
    }];
  }];
}

- (BOOL) send_registerUser: (NSString *) password encryptionCSR: (NSData *) encryptionCSR signingCSR: (NSData *) signingCSR authenticatedAliases: (NSArray<RTAuthenticatedAlias *> *) authenticatedAliases deviceInfo: (RTDeviceInfo *) deviceInfo protocol: (id<TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"registerUser" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_registerUser_args" error: __thriftError]) return NO;
  if (password != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"password" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeString: password error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (encryptionCSR != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"encryptionCSR" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeBinary: encryptionCSR error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (signingCSR != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"signingCSR" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
    if (![outProtocol writeBinary: signingCSR error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (authenticatedAliases != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"authenticatedAliases" type: TTypeLIST fieldID: 4 error: __thriftError]) return NO;
    {
      if (![outProtocol writeListBeginWithElementType: TTypeSTRUCT size: (SInt32)[authenticatedAliases count] error: __thriftError]) return NO;
      int idx116;
      for (idx116 = 0; idx116 < [authenticatedAliases count]; idx116++)
      {
        if (![[authenticatedAliases objectAtIndex: idx116] write: outProtocol error: __thriftError]) return NO;
      }
      if (![outProtocol writeListEnd: __thriftError]) return NO;
    }
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (deviceInfo != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"deviceInfo" type: TTypeSTRUCT fieldID: 5 error: __thriftError]) return NO;
    if (![deviceInfo write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_registerUser: (RTUserProfile * *) result protocol: (id<TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTPublicAPI_registerUser_result * resulter = [RTPublicAPI_registerUser_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (resulter.aliasInUseIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter aliasInUse];
    }
    return NO;
  }
  if (resulter.aliasNoAuthIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter aliasNoAuth];
    }
    return NO;
  }
  if (resulter.aliasPinInvalidIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter aliasPinInvalid];
    }
    return NO;
  }
  if (resulter.deviceInUseIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter deviceInUse];
    }
    return NO;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"registerUser"}];
  }
  return NO;
}

- (void) registerUser: (NSString *) password encryptionCSR: (NSData *) encryptionCSR signingCSR: (NSData *) signingCSR authenticatedAliases: (NSArray<RTAuthenticatedAlias *> *) authenticatedAliases deviceInfo: (RTDeviceInfo *) deviceInfo response: (void (^)(RTUserProfile *)) responseBlock failure : (TAsyncFailureBlock) failureBlock
{
  NSError *thriftError;
  id<TAsyncTransport> transport = [transportFactory newTransport];
  id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

  if (![self send_registerUser : password encryptionCSR: encryptionCSR signingCSR: signingCSR authenticatedAliases: authenticatedAliases deviceInfo: deviceInfo protocol: protocol error: &thriftError])   {
    failureBlock(thriftError);
    return;
  }
  [transport flushWithCompletion:^{
    NSError *thriftError;
    RTUserProfile * result;
    if (![self recv_registerUser: &result protocol: protocol error: &thriftError])     {
      failureBlock(thriftError);
      return;
    }
    responseBlock(result);
  } failure:failureBlock];
}

- (AnyPromise *) registerUser: (NSString *) password encryptionCSR: (NSData *) encryptionCSR signingCSR: (NSData *) signingCSR authenticatedAliases: (NSArray<RTAuthenticatedAlias *> *) authenticatedAliases deviceInfo: (RTDeviceInfo *) deviceInfo
{
  return [AnyPromise promiseWithResolverBlock:^(PMKResolver resolver) {
    NSError *thriftError;
    id<TAsyncTransport> transport = [transportFactory newTransport];
    id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

    if (![self send_registerUser : password encryptionCSR: encryptionCSR signingCSR: signingCSR authenticatedAliases: authenticatedAliases deviceInfo: deviceInfo protocol: protocol error: &thriftError])     {
      resolver(thriftError);
      return;
    }
    [transport flushWithCompletion:^{
      NSError *thriftError;
      RTUserProfile * result;
      if (![self recv_registerUser: &result protocol: protocol error: &thriftError])       {
        resolver(thriftError);
        return;
      }
      resolver(result);
    } failure:^(NSError *error) {
      resolver(error);
    }];
  }];
}

- (BOOL) send_signIn: (RTId *) userId password: (NSString *) password deviceId: (RTId *) deviceId protocol: (id<TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"signIn" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_signIn_args" error: __thriftError]) return NO;
  if (userId != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"userId" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![userId write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (password != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"password" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeString: password error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (deviceId != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"deviceId" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
    if (![deviceId write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_signIn: (NSData * *) result protocol: (id<TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTPublicAPI_signIn_result * resulter = [RTPublicAPI_signIn_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (resulter.deviceIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter device];
    }
    return NO;
  }
  if (resulter.signInDisallowedIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter signInDisallowed];
    }
    return NO;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"signIn"}];
  }
  return NO;
}

- (void) signIn: (RTId *) userId password: (NSString *) password deviceId: (RTId *) deviceId response: (void (^)(NSData *)) responseBlock failure : (TAsyncFailureBlock) failureBlock
{
  NSError *thriftError;
  id<TAsyncTransport> transport = [transportFactory newTransport];
  id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

  if (![self send_signIn : userId password: password deviceId: deviceId protocol: protocol error: &thriftError])   {
    failureBlock(thriftError);
    return;
  }
  [transport flushWithCompletion:^{
    NSError *thriftError;
    NSData * result;
    if (![self recv_signIn: &result protocol: protocol error: &thriftError])     {
      failureBlock(thriftError);
      return;
    }
    responseBlock(result);
  } failure:failureBlock];
}

- (AnyPromise *) signIn: (RTId *) userId password: (NSString *) password deviceId: (RTId *) deviceId
{
  return [AnyPromise promiseWithResolverBlock:^(PMKResolver resolver) {
    NSError *thriftError;
    id<TAsyncTransport> transport = [transportFactory newTransport];
    id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

    if (![self send_signIn : userId password: password deviceId: deviceId protocol: protocol error: &thriftError])     {
      resolver(thriftError);
      return;
    }
    [transport flushWithCompletion:^{
      NSError *thriftError;
      NSData * result;
      if (![self recv_signIn: &result protocol: protocol error: &thriftError])       {
        resolver(thriftError);
        return;
      }
      resolver(result);
    } failure:^(NSError *error) {
      resolver(error);
    }];
  }];
}

- (BOOL) send_generateAccessToken: (RTId *) userId deviceId: (RTId *) deviceId refreshToken: (NSData *) refreshToken protocol: (id<TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"generateAccessToken" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_generateAccessToken_args" error: __thriftError]) return NO;
  if (userId != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"userId" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![userId write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (deviceId != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"deviceId" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
    if (![deviceId write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (refreshToken != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"refreshToken" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
    if (![outProtocol writeBinary: refreshToken error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_generateAccessToken: (NSString * *) result protocol: (id<TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTPublicAPI_generateAccessToken_result * resulter = [RTPublicAPI_generateAccessToken_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (resulter.invalidUserIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter invalidUser];
    }
    return NO;
  }
  if (resulter.invalidDeviceIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter invalidDevice];
    }
    return NO;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"generateAccessToken"}];
  }
  return NO;
}

- (void) generateAccessToken: (RTId *) userId deviceId: (RTId *) deviceId refreshToken: (NSData *) refreshToken response: (void (^)(NSString *)) responseBlock failure : (TAsyncFailureBlock) failureBlock
{
  NSError *thriftError;
  id<TAsyncTransport> transport = [transportFactory newTransport];
  id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

  if (![self send_generateAccessToken : userId deviceId: deviceId refreshToken: refreshToken protocol: protocol error: &thriftError])   {
    failureBlock(thriftError);
    return;
  }
  [transport flushWithCompletion:^{
    NSError *thriftError;
    NSString * result;
    if (![self recv_generateAccessToken: &result protocol: protocol error: &thriftError])     {
      failureBlock(thriftError);
      return;
    }
    responseBlock(result);
  } failure:failureBlock];
}

- (AnyPromise *) generateAccessToken: (RTId *) userId deviceId: (RTId *) deviceId refreshToken: (NSData *) refreshToken
{
  return [AnyPromise promiseWithResolverBlock:^(PMKResolver resolver) {
    NSError *thriftError;
    id<TAsyncTransport> transport = [transportFactory newTransport];
    id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

    if (![self send_generateAccessToken : userId deviceId: deviceId refreshToken: refreshToken protocol: protocol error: &thriftError])     {
      resolver(thriftError);
      return;
    }
    [transport flushWithCompletion:^{
      NSError *thriftError;
      NSString * result;
      if (![self recv_generateAccessToken: &result protocol: protocol error: &thriftError])       {
        resolver(thriftError);
        return;
      }
      resolver(result);
    } failure:^(NSError *error) {
      resolver(error);
    }];
  }];
}

- (BOOL) send_registerDevice: (RTId *) userId password: (NSString *) password deviceInfo: (RTDeviceInfo *) deviceInfo protocol: (id<TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"registerDevice" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_registerDevice_args" error: __thriftError]) return NO;
  if (userId != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"userId" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![userId write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (password != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"password" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeString: password error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (deviceInfo != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"deviceInfo" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
    if (![deviceInfo write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_registerDevice: (id<TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTPublicAPI_registerDevice_result * resulter = [RTPublicAPI_registerDevice_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.deviceInUseIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter deviceInUse];
    }
    return NO;
  }
  return YES;
}

- (void) registerDevice: (RTId *) userId password: (NSString *) password deviceInfo: (RTDeviceInfo *) deviceInfo response: (void (^)()) responseBlock failure : (TAsyncFailureBlock) failureBlock
{
  NSError *thriftError;
  id<TAsyncTransport> transport = [transportFactory newTransport];
  id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

  if (![self send_registerDevice : userId password: password deviceInfo: deviceInfo protocol: protocol error: &thriftError])   {
    failureBlock(thriftError);
    return;
  }
  [transport flushWithCompletion:^{
    NSError *thriftError;
    if (![self recv_registerDevice: protocol error: &thriftError])     {
      failureBlock(thriftError);
      return;
    }
    responseBlock();
  } failure:failureBlock];
}

- (AnyPromise *) registerDevice: (RTId *) userId password: (NSString *) password deviceInfo: (RTDeviceInfo *) deviceInfo
{
  return [AnyPromise promiseWithResolverBlock:^(PMKResolver resolver) {
    NSError *thriftError;
    id<TAsyncTransport> transport = [transportFactory newTransport];
    id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

    if (![self send_registerDevice : userId password: password deviceInfo: deviceInfo protocol: protocol error: &thriftError])     {
      resolver(thriftError);
      return;
    }
    [transport flushWithCompletion:^{
      NSError *thriftError;
      if (![self recv_registerDevice: protocol error: &thriftError])       {
        resolver(thriftError);
        return;
      }
      resolver(@YES);
    } failure:^(NSError *error) {
      resolver(error);
    }];
  }];
}

- (BOOL) send_replaceRegisteredDevice: (RTId *) userId password: (NSString *) password deviceInfo: (RTDeviceInfo *) deviceInfo currentDeviceId: (RTId *) currentDeviceId protocol: (id<TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"replaceRegisteredDevice" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_replaceRegisteredDevice_args" error: __thriftError]) return NO;
  if (userId != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"userId" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![userId write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (password != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"password" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeString: password error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (deviceInfo != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"deviceInfo" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
    if (![deviceInfo write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (currentDeviceId != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"currentDeviceId" type: TTypeSTRUCT fieldID: 4 error: __thriftError]) return NO;
    if (![currentDeviceId write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_replaceRegisteredDevice: (id<TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTPublicAPI_replaceRegisteredDevice_result * resulter = [RTPublicAPI_replaceRegisteredDevice_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.deviceInUseIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter deviceInUse];
    }
    return NO;
  }
  if (resulter.invalidDeviceIsSet)  {
    if (__thriftError)    {
      *__thriftError = [resulter invalidDevice];
    }
    return NO;
  }
  return YES;
}

- (void) replaceRegisteredDevice: (RTId *) userId password: (NSString *) password deviceInfo: (RTDeviceInfo *) deviceInfo currentDeviceId: (RTId *) currentDeviceId response: (void (^)()) responseBlock failure : (TAsyncFailureBlock) failureBlock
{
  NSError *thriftError;
  id<TAsyncTransport> transport = [transportFactory newTransport];
  id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

  if (![self send_replaceRegisteredDevice : userId password: password deviceInfo: deviceInfo currentDeviceId: currentDeviceId protocol: protocol error: &thriftError])   {
    failureBlock(thriftError);
    return;
  }
  [transport flushWithCompletion:^{
    NSError *thriftError;
    if (![self recv_replaceRegisteredDevice: protocol error: &thriftError])     {
      failureBlock(thriftError);
      return;
    }
    responseBlock();
  } failure:failureBlock];
}

- (AnyPromise *) replaceRegisteredDevice: (RTId *) userId password: (NSString *) password deviceInfo: (RTDeviceInfo *) deviceInfo currentDeviceId: (RTId *) currentDeviceId
{
  return [AnyPromise promiseWithResolverBlock:^(PMKResolver resolver) {
    NSError *thriftError;
    id<TAsyncTransport> transport = [transportFactory newTransport];
    id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

    if (![self send_replaceRegisteredDevice : userId password: password deviceInfo: deviceInfo currentDeviceId: currentDeviceId protocol: protocol error: &thriftError])     {
      resolver(thriftError);
      return;
    }
    [transport flushWithCompletion:^{
      NSError *thriftError;
      if (![self recv_replaceRegisteredDevice: protocol error: &thriftError])       {
        resolver(thriftError);
        return;
      }
      resolver(@YES);
    } failure:^(NSError *error) {
      resolver(error);
    }];
  }];
}

- (BOOL) send_unregisterDevice: (RTId *) userId password: (NSString *) password deviceId: (RTId *) deviceId protocol: (id<TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"unregisterDevice" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_unregisterDevice_args" error: __thriftError]) return NO;
  if (userId != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"userId" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![userId write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (password != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"password" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeString: password error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (deviceId != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"deviceId" type: TTypeSTRUCT fieldID: 3 error: __thriftError]) return NO;
    if (![deviceId write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_unregisterDevice: (id<TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTPublicAPI_unregisterDevice_result * resulter = [RTPublicAPI_unregisterDevice_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  return YES;
}

- (void) unregisterDevice: (RTId *) userId password: (NSString *) password deviceId: (RTId *) deviceId response: (void (^)()) responseBlock failure : (TAsyncFailureBlock) failureBlock
{
  NSError *thriftError;
  id<TAsyncTransport> transport = [transportFactory newTransport];
  id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

  if (![self send_unregisterDevice : userId password: password deviceId: deviceId protocol: protocol error: &thriftError])   {
    failureBlock(thriftError);
    return;
  }
  [transport flushWithCompletion:^{
    NSError *thriftError;
    if (![self recv_unregisterDevice: protocol error: &thriftError])     {
      failureBlock(thriftError);
      return;
    }
    responseBlock();
  } failure:failureBlock];
}

- (AnyPromise *) unregisterDevice: (RTId *) userId password: (NSString *) password deviceId: (RTId *) deviceId
{
  return [AnyPromise promiseWithResolverBlock:^(PMKResolver resolver) {
    NSError *thriftError;
    id<TAsyncTransport> transport = [transportFactory newTransport];
    id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

    if (![self send_unregisterDevice : userId password: password deviceId: deviceId protocol: protocol error: &thriftError])     {
      resolver(thriftError);
      return;
    }
    [transport flushWithCompletion:^{
      NSError *thriftError;
      if (![self recv_unregisterDevice: protocol error: &thriftError])       {
        resolver(thriftError);
        return;
      }
      resolver(@YES);
    } failure:^(NSError *error) {
      resolver(error);
    }];
  }];
}

- (BOOL) send_changePassword: (RTId *) userId oldPassword: (NSString *) oldPassword newPassword: (NSString *) newPassword protocol: (id<TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"changePassword" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_changePassword_args" error: __thriftError]) return NO;
  if (userId != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"userId" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![userId write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (oldPassword != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"oldPassword" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeString: oldPassword error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (newPassword != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"newPassword" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
    if (![outProtocol writeString: newPassword error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_changePassword: (BOOL *) result protocol: (id<TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTPublicAPI_changePassword_result * resulter = [RTPublicAPI_changePassword_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"changePassword"}];
  }
  return NO;
}

- (void) changePassword: (RTId *) userId oldPassword: (NSString *) oldPassword newPassword: (NSString *) newPassword response: (void (^)(BOOL)) responseBlock failure : (TAsyncFailureBlock) failureBlock
{
  NSError *thriftError;
  id<TAsyncTransport> transport = [transportFactory newTransport];
  id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

  if (![self send_changePassword : userId oldPassword: oldPassword newPassword: newPassword protocol: protocol error: &thriftError])   {
    failureBlock(thriftError);
    return;
  }
  [transport flushWithCompletion:^{
    NSError *thriftError;
    BOOL result;
    if (![self recv_changePassword: &result protocol: protocol error: &thriftError])     {
      failureBlock(thriftError);
      return;
    }
    responseBlock(result);
  } failure:failureBlock];
}

- (AnyPromise *) changePassword: (RTId *) userId oldPassword: (NSString *) oldPassword newPassword: (NSString *) newPassword
{
  return [AnyPromise promiseWithResolverBlock:^(PMKResolver resolver) {
    NSError *thriftError;
    id<TAsyncTransport> transport = [transportFactory newTransport];
    id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

    if (![self send_changePassword : userId oldPassword: oldPassword newPassword: newPassword protocol: protocol error: &thriftError])     {
      resolver(thriftError);
      return;
    }
    [transport flushWithCompletion:^{
      NSError *thriftError;
      BOOL result;
      if (![self recv_changePassword: &result protocol: protocol error: &thriftError])       {
        resolver(thriftError);
        return;
      }
      resolver(@(result));
    } failure:^(NSError *error) {
      resolver(error);
    }];
  }];
}

- (BOOL) send_requestTemporaryPassword: (RTAlias) name protocol: (id<TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"requestTemporaryPassword" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_requestTemporaryPassword_args" error: __thriftError]) return NO;
  if (name != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"name" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeString: name error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_requestTemporaryPassword: (RTId * *) result protocol: (id<TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTPublicAPI_requestTemporaryPassword_result * resulter = [RTPublicAPI_requestTemporaryPassword_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"requestTemporaryPassword"}];
  }
  return NO;
}

- (void) requestTemporaryPassword: (RTAlias) name response: (void (^)(RTId *)) responseBlock failure : (TAsyncFailureBlock) failureBlock
{
  NSError *thriftError;
  id<TAsyncTransport> transport = [transportFactory newTransport];
  id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

  if (![self send_requestTemporaryPassword : name protocol: protocol error: &thriftError])   {
    failureBlock(thriftError);
    return;
  }
  [transport flushWithCompletion:^{
    NSError *thriftError;
    RTId * result;
    if (![self recv_requestTemporaryPassword: &result protocol: protocol error: &thriftError])     {
      failureBlock(thriftError);
      return;
    }
    responseBlock(result);
  } failure:failureBlock];
}

- (AnyPromise *) requestTemporaryPassword: (RTAlias) name
{
  return [AnyPromise promiseWithResolverBlock:^(PMKResolver resolver) {
    NSError *thriftError;
    id<TAsyncTransport> transport = [transportFactory newTransport];
    id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

    if (![self send_requestTemporaryPassword : name protocol: protocol error: &thriftError])     {
      resolver(thriftError);
      return;
    }
    [transport flushWithCompletion:^{
      NSError *thriftError;
      RTId * result;
      if (![self recv_requestTemporaryPassword: &result protocol: protocol error: &thriftError])       {
        resolver(thriftError);
        return;
      }
      resolver(result);
    } failure:^(NSError *error) {
      resolver(error);
    }];
  }];
}

- (BOOL) send_checkTemporaryPassword: (RTId *) userId tempPassword: (NSString *) tempPassword protocol: (id<TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"checkTemporaryPassword" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_checkTemporaryPassword_args" error: __thriftError]) return NO;
  if (userId != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"userId" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![userId write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (tempPassword != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"tempPassword" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeString: tempPassword error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_checkTemporaryPassword: (BOOL *) result protocol: (id<TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTPublicAPI_checkTemporaryPassword_result * resulter = [RTPublicAPI_checkTemporaryPassword_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"checkTemporaryPassword"}];
  }
  return NO;
}

- (void) checkTemporaryPassword: (RTId *) userId tempPassword: (NSString *) tempPassword response: (void (^)(BOOL)) responseBlock failure : (TAsyncFailureBlock) failureBlock
{
  NSError *thriftError;
  id<TAsyncTransport> transport = [transportFactory newTransport];
  id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

  if (![self send_checkTemporaryPassword : userId tempPassword: tempPassword protocol: protocol error: &thriftError])   {
    failureBlock(thriftError);
    return;
  }
  [transport flushWithCompletion:^{
    NSError *thriftError;
    BOOL result;
    if (![self recv_checkTemporaryPassword: &result protocol: protocol error: &thriftError])     {
      failureBlock(thriftError);
      return;
    }
    responseBlock(result);
  } failure:failureBlock];
}

- (AnyPromise *) checkTemporaryPassword: (RTId *) userId tempPassword: (NSString *) tempPassword
{
  return [AnyPromise promiseWithResolverBlock:^(PMKResolver resolver) {
    NSError *thriftError;
    id<TAsyncTransport> transport = [transportFactory newTransport];
    id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

    if (![self send_checkTemporaryPassword : userId tempPassword: tempPassword protocol: protocol error: &thriftError])     {
      resolver(thriftError);
      return;
    }
    [transport flushWithCompletion:^{
      NSError *thriftError;
      BOOL result;
      if (![self recv_checkTemporaryPassword: &result protocol: protocol error: &thriftError])       {
        resolver(thriftError);
        return;
      }
      resolver(@(result));
    } failure:^(NSError *error) {
      resolver(error);
    }];
  }];
}

- (BOOL) send_resetPassword: (RTId *) userId tempPassword: (NSString *) tempPassword password: (NSString *) password protocol: (id<TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"resetPassword" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"PublicAPI_resetPassword_args" error: __thriftError]) return NO;
  if (userId != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"userId" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![userId write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (tempPassword != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"tempPassword" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeString: tempPassword error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (password != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"password" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
    if (![outProtocol writeString: password error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_resetPassword: (BOOL *) result protocol: (id<TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTPublicAPI_resetPassword_result * resulter = [RTPublicAPI_resetPassword_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"resetPassword"}];
  }
  return NO;
}

- (void) resetPassword: (RTId *) userId tempPassword: (NSString *) tempPassword password: (NSString *) password response: (void (^)(BOOL)) responseBlock failure : (TAsyncFailureBlock) failureBlock
{
  NSError *thriftError;
  id<TAsyncTransport> transport = [transportFactory newTransport];
  id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

  if (![self send_resetPassword : userId tempPassword: tempPassword password: password protocol: protocol error: &thriftError])   {
    failureBlock(thriftError);
    return;
  }
  [transport flushWithCompletion:^{
    NSError *thriftError;
    BOOL result;
    if (![self recv_resetPassword: &result protocol: protocol error: &thriftError])     {
      failureBlock(thriftError);
      return;
    }
    responseBlock(result);
  } failure:failureBlock];
}

- (AnyPromise *) resetPassword: (RTId *) userId tempPassword: (NSString *) tempPassword password: (NSString *) password
{
  return [AnyPromise promiseWithResolverBlock:^(PMKResolver resolver) {
    NSError *thriftError;
    id<TAsyncTransport> transport = [transportFactory newTransport];
    id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

    if (![self send_resetPassword : userId tempPassword: tempPassword password: password protocol: protocol error: &thriftError])     {
      resolver(thriftError);
      return;
    }
    [transport flushWithCompletion:^{
      NSError *thriftError;
      BOOL result;
      if (![self recv_resetPassword: &result protocol: protocol error: &thriftError])       {
        resolver(thriftError);
        return;
      }
      resolver(@(result));
    } failure:^(NSError *error) {
      resolver(error);
    }];
  }];
}

@end

@interface RTDeviceService_userStatus_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RTAlias sender;
@property (assign, nonatomic) BOOL senderIsSet;
- (void) unsetSender;

@property (strong, nonatomic) RTAlias recipient;
@property (assign, nonatomic) BOOL recipientIsSet;
- (void) unsetRecipient;

@property (assign, nonatomic) RTUserStatus status;
@property (assign, nonatomic) BOOL statusIsSet;
- (void) unsetStatus;


- (instancetype) initWithSender: (RTAlias) sender recipient: (RTAlias) recipient status: (RTUserStatus) status;

@end

@implementation RTDeviceService_userStatus_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSender: (RTAlias) sender recipient: (RTAlias) recipient status: (RTUserStatus) status
{
  self = [super init];
  if (self)  {
    _sender = sender;
    _senderIsSet = YES;
    _recipient = recipient;
    _recipientIsSet = YES;
    _status = status;
    _statusIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"sender"])
    {
      _sender = [decoder decodeObjectForKey: @"sender"];
      _senderIsSet = YES;
    }
    if ([decoder containsValueForKey: @"recipient"])
    {
      _recipient = [decoder decodeObjectForKey: @"recipient"];
      _recipientIsSet = YES;
    }
    if ([decoder containsValueForKey: @"status"])
    {
      _status = [decoder decodeIntForKey: @"status"];
      _statusIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_senderIsSet)
  {
    [encoder encodeObject: _sender forKey: @"sender"];
  }
  if (_recipientIsSet)
  {
    [encoder encodeObject: _recipient forKey: @"recipient"];
  }
  if (_statusIsSet)
  {
    [encoder encodeInt: _status forKey: @"status"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _senderIsSet ? 2654435761 : 0;
  if (_senderIsSet)
  {
    hash = (hash * 31) ^ [_sender hash];
  }
  hash = (hash * 31) ^ _recipientIsSet ? 2654435761 : 0;
  if (_recipientIsSet)
  {
    hash = (hash * 31) ^ [_recipient hash];
  }
  hash = (hash * 31) ^ _statusIsSet ? 2654435761 : 0;
  if (_statusIsSet)
  {
    hash = (hash * 31) ^ [@(_status) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTDeviceService_userStatus_args class]]) {
    return NO;
  }
  RTDeviceService_userStatus_args *other = (RTDeviceService_userStatus_args *)anObject;
  if ((_senderIsSet != other->_senderIsSet) ||
      (_senderIsSet && ((_sender || other->_sender) && ![_sender isEqual:other->_sender]))) {
    return NO;
  }
  if ((_recipientIsSet != other->_recipientIsSet) ||
      (_recipientIsSet && ((_recipient || other->_recipient) && ![_recipient isEqual:other->_recipient]))) {
    return NO;
  }
  if ((_statusIsSet != other->_statusIsSet) ||
      (_statusIsSet && (_status != other->_status))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTDeviceService_userStatus_args * val = [RTDeviceService_userStatus_args new];
  val.sender = [self.sender copy];
  val.recipient = [self.recipient copy];
  val.status = self.status;
  return val;
}

- (void) setSender: (NSString *) sender {
  _sender = sender;
  _senderIsSet = YES;
}

- (void) unsetSender {
  _sender = nil;
  _senderIsSet = NO;
}

- (void) setRecipient: (NSString *) recipient {
  _recipient = recipient;
  _recipientIsSet = YES;
}

- (void) unsetRecipient {
  _recipient = nil;
  _recipientIsSet = NO;
}

- (void) setStatus: (RTUserStatus) status {
  _status = status;
  _statusIsSet = YES;
}

- (void) unsetStatus {
  _statusIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.sender = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.recipient = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeI32) {
          RTUserStatus fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.status = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"DeviceService_userStatus_args" error: __thriftError]) return NO;
  if (_senderIsSet) {
    if (_sender != nil) {
      if (![outProtocol writeFieldBeginWithName: @"sender" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _sender error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_recipientIsSet) {
    if (_recipient != nil) {
      if (![outProtocol writeFieldBeginWithName: @"recipient" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _recipient error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_statusIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"status" type: TTypeI32 fieldID: 3 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _status error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTDeviceService_userStatus_args("];
  [ms appendString: @"sender:"];
  [ms appendFormat: @"\"%@\"", _sender];
  [ms appendString: @",recipient:"];
  [ms appendFormat: @"\"%@\"", _recipient];
  [ms appendString: @",status:"];
  [ms appendFormat: @"%i", (int)_status];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTDeviceService_groupStatus_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RTAlias sender;
@property (assign, nonatomic) BOOL senderIsSet;
- (void) unsetSender;

@property (strong, nonatomic) RTId * chatId;
@property (assign, nonatomic) BOOL chatIdIsSet;
- (void) unsetChatId;

@property (assign, nonatomic) RTUserStatus status;
@property (assign, nonatomic) BOOL statusIsSet;
- (void) unsetStatus;


- (instancetype) initWithSender: (RTAlias) sender chatId: (RTId *) chatId status: (RTUserStatus) status;

@end

@implementation RTDeviceService_groupStatus_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSender: (RTAlias) sender chatId: (RTId *) chatId status: (RTUserStatus) status
{
  self = [super init];
  if (self)  {
    _sender = sender;
    _senderIsSet = YES;
    _chatId = chatId;
    _chatIdIsSet = YES;
    _status = status;
    _statusIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"sender"])
    {
      _sender = [decoder decodeObjectForKey: @"sender"];
      _senderIsSet = YES;
    }
    if ([decoder containsValueForKey: @"chatId"])
    {
      _chatId = [decoder decodeObjectForKey: @"chatId"];
      _chatIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"status"])
    {
      _status = [decoder decodeIntForKey: @"status"];
      _statusIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_senderIsSet)
  {
    [encoder encodeObject: _sender forKey: @"sender"];
  }
  if (_chatIdIsSet)
  {
    [encoder encodeObject: _chatId forKey: @"chatId"];
  }
  if (_statusIsSet)
  {
    [encoder encodeInt: _status forKey: @"status"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _senderIsSet ? 2654435761 : 0;
  if (_senderIsSet)
  {
    hash = (hash * 31) ^ [_sender hash];
  }
  hash = (hash * 31) ^ _chatIdIsSet ? 2654435761 : 0;
  if (_chatIdIsSet)
  {
    hash = (hash * 31) ^ [_chatId hash];
  }
  hash = (hash * 31) ^ _statusIsSet ? 2654435761 : 0;
  if (_statusIsSet)
  {
    hash = (hash * 31) ^ [@(_status) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTDeviceService_groupStatus_args class]]) {
    return NO;
  }
  RTDeviceService_groupStatus_args *other = (RTDeviceService_groupStatus_args *)anObject;
  if ((_senderIsSet != other->_senderIsSet) ||
      (_senderIsSet && ((_sender || other->_sender) && ![_sender isEqual:other->_sender]))) {
    return NO;
  }
  if ((_chatIdIsSet != other->_chatIdIsSet) ||
      (_chatIdIsSet && ((_chatId || other->_chatId) && ![_chatId isEqual:other->_chatId]))) {
    return NO;
  }
  if ((_statusIsSet != other->_statusIsSet) ||
      (_statusIsSet && (_status != other->_status))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTDeviceService_groupStatus_args * val = [RTDeviceService_groupStatus_args new];
  val.sender = [self.sender copy];
  val.chatId = [self.chatId copy];
  val.status = self.status;
  return val;
}

- (void) setSender: (NSString *) sender {
  _sender = sender;
  _senderIsSet = YES;
}

- (void) unsetSender {
  _sender = nil;
  _senderIsSet = NO;
}

- (void) setChatId: (RTId *) chatId {
  _chatId = chatId;
  _chatIdIsSet = YES;
}

- (void) unsetChatId {
  _chatId = nil;
  _chatIdIsSet = NO;
}

- (void) setStatus: (RTUserStatus) status {
  _status = status;
  _statusIsSet = YES;
}

- (void) unsetStatus {
  _statusIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.sender = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRUCT) {
          RTId *fieldValue = [[RTId alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.chatId = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeI32) {
          RTUserStatus fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.status = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"DeviceService_groupStatus_args" error: __thriftError]) return NO;
  if (_senderIsSet) {
    if (_sender != nil) {
      if (![outProtocol writeFieldBeginWithName: @"sender" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _sender error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_chatIdIsSet) {
    if (_chatId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"chatId" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
      if (![_chatId write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_statusIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"status" type: TTypeI32 fieldID: 3 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _status error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTDeviceService_groupStatus_args("];
  [ms appendString: @"sender:"];
  [ms appendFormat: @"\"%@\"", _sender];
  [ms appendString: @",chatId:"];
  [ms appendFormat: @"%@", _chatId];
  [ms appendString: @",status:"];
  [ms appendFormat: @"%i", (int)_status];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTDeviceService_msgDelivery_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RTMsg * msg;
@property (assign, nonatomic) BOOL msgIsSet;
- (void) unsetMsg;


- (instancetype) initWithMsg: (RTMsg *) msg;

@end

@implementation RTDeviceService_msgDelivery_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithMsg: (RTMsg *) msg
{
  self = [super init];
  if (self)  {
    _msg = msg;
    _msgIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"msg"])
    {
      _msg = [decoder decodeObjectForKey: @"msg"];
      _msgIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_msgIsSet)
  {
    [encoder encodeObject: _msg forKey: @"msg"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _msgIsSet ? 2654435761 : 0;
  if (_msgIsSet)
  {
    hash = (hash * 31) ^ [_msg hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTDeviceService_msgDelivery_args class]]) {
    return NO;
  }
  RTDeviceService_msgDelivery_args *other = (RTDeviceService_msgDelivery_args *)anObject;
  if ((_msgIsSet != other->_msgIsSet) ||
      (_msgIsSet && ((_msg || other->_msg) && ![_msg isEqual:other->_msg]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTDeviceService_msgDelivery_args * val = [RTDeviceService_msgDelivery_args new];
  val.msg = [self.msg copy];
  return val;
}

- (void) setMsg: (RTMsg *) msg {
  _msg = msg;
  _msgIsSet = YES;
}

- (void) unsetMsg {
  _msg = nil;
  _msgIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          RTMsg *fieldValue = [[RTMsg alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.msg = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"DeviceService_msgDelivery_args" error: __thriftError]) return NO;
  if (_msgIsSet) {
    if (_msg != nil) {
      if (![outProtocol writeFieldBeginWithName: @"msg" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_msg write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTDeviceService_msgDelivery_args("];
  [ms appendString: @"msg:"];
  [ms appendFormat: @"%@", _msg];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTDeviceService_msgDelivery_result : NSObject <TBase, NSCoding, NSCopying> 



@end

@implementation RTDeviceService_msgDelivery_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTDeviceService_msgDelivery_result class]]) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTDeviceService_msgDelivery_result * val = [RTDeviceService_msgDelivery_result new];
  return val;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"DeviceService_msgDelivery_result" error: __thriftError]) return NO;

  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTDeviceService_msgDelivery_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTDeviceService_msgReady_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RTMsgHdr * msgHdr;
@property (assign, nonatomic) BOOL msgHdrIsSet;
- (void) unsetMsgHdr;


- (instancetype) initWithMsgHdr: (RTMsgHdr *) msgHdr;

@end

@implementation RTDeviceService_msgReady_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithMsgHdr: (RTMsgHdr *) msgHdr
{
  self = [super init];
  if (self)  {
    _msgHdr = msgHdr;
    _msgHdrIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"msgHdr"])
    {
      _msgHdr = [decoder decodeObjectForKey: @"msgHdr"];
      _msgHdrIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_msgHdrIsSet)
  {
    [encoder encodeObject: _msgHdr forKey: @"msgHdr"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _msgHdrIsSet ? 2654435761 : 0;
  if (_msgHdrIsSet)
  {
    hash = (hash * 31) ^ [_msgHdr hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTDeviceService_msgReady_args class]]) {
    return NO;
  }
  RTDeviceService_msgReady_args *other = (RTDeviceService_msgReady_args *)anObject;
  if ((_msgHdrIsSet != other->_msgHdrIsSet) ||
      (_msgHdrIsSet && ((_msgHdr || other->_msgHdr) && ![_msgHdr isEqual:other->_msgHdr]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTDeviceService_msgReady_args * val = [RTDeviceService_msgReady_args new];
  val.msgHdr = [self.msgHdr copy];
  return val;
}

- (void) setMsgHdr: (RTMsgHdr *) msgHdr {
  _msgHdr = msgHdr;
  _msgHdrIsSet = YES;
}

- (void) unsetMsgHdr {
  _msgHdr = nil;
  _msgHdrIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          RTMsgHdr *fieldValue = [[RTMsgHdr alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.msgHdr = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"DeviceService_msgReady_args" error: __thriftError]) return NO;
  if (_msgHdrIsSet) {
    if (_msgHdr != nil) {
      if (![outProtocol writeFieldBeginWithName: @"msgHdr" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_msgHdr write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTDeviceService_msgReady_args("];
  [ms appendString: @"msgHdr:"];
  [ms appendFormat: @"%@", _msgHdr];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTDeviceService_msgDelivered_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RTId * msgId;
@property (assign, nonatomic) BOOL msgIdIsSet;
- (void) unsetMsgId;

@property (strong, nonatomic) RTAlias recipient;
@property (assign, nonatomic) BOOL recipientIsSet;
- (void) unsetRecipient;


- (instancetype) initWithMsgId: (RTId *) msgId recipient: (RTAlias) recipient;

@end

@implementation RTDeviceService_msgDelivered_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithMsgId: (RTId *) msgId recipient: (RTAlias) recipient
{
  self = [super init];
  if (self)  {
    _msgId = msgId;
    _msgIdIsSet = YES;
    _recipient = recipient;
    _recipientIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"msgId"])
    {
      _msgId = [decoder decodeObjectForKey: @"msgId"];
      _msgIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"recipient"])
    {
      _recipient = [decoder decodeObjectForKey: @"recipient"];
      _recipientIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_msgIdIsSet)
  {
    [encoder encodeObject: _msgId forKey: @"msgId"];
  }
  if (_recipientIsSet)
  {
    [encoder encodeObject: _recipient forKey: @"recipient"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _msgIdIsSet ? 2654435761 : 0;
  if (_msgIdIsSet)
  {
    hash = (hash * 31) ^ [_msgId hash];
  }
  hash = (hash * 31) ^ _recipientIsSet ? 2654435761 : 0;
  if (_recipientIsSet)
  {
    hash = (hash * 31) ^ [_recipient hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTDeviceService_msgDelivered_args class]]) {
    return NO;
  }
  RTDeviceService_msgDelivered_args *other = (RTDeviceService_msgDelivered_args *)anObject;
  if ((_msgIdIsSet != other->_msgIdIsSet) ||
      (_msgIdIsSet && ((_msgId || other->_msgId) && ![_msgId isEqual:other->_msgId]))) {
    return NO;
  }
  if ((_recipientIsSet != other->_recipientIsSet) ||
      (_recipientIsSet && ((_recipient || other->_recipient) && ![_recipient isEqual:other->_recipient]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTDeviceService_msgDelivered_args * val = [RTDeviceService_msgDelivered_args new];
  val.msgId = [self.msgId copy];
  val.recipient = [self.recipient copy];
  return val;
}

- (void) setMsgId: (RTId *) msgId {
  _msgId = msgId;
  _msgIdIsSet = YES;
}

- (void) unsetMsgId {
  _msgId = nil;
  _msgIdIsSet = NO;
}

- (void) setRecipient: (NSString *) recipient {
  _recipient = recipient;
  _recipientIsSet = YES;
}

- (void) unsetRecipient {
  _recipient = nil;
  _recipientIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          RTId *fieldValue = [[RTId alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.msgId = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.recipient = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"DeviceService_msgDelivered_args" error: __thriftError]) return NO;
  if (_msgIdIsSet) {
    if (_msgId != nil) {
      if (![outProtocol writeFieldBeginWithName: @"msgId" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_msgId write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_recipientIsSet) {
    if (_recipient != nil) {
      if (![outProtocol writeFieldBeginWithName: @"recipient" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
      if (![outProtocol writeString: _recipient error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTDeviceService_msgDelivered_args("];
  [ms appendString: @"msgId:"];
  [ms appendFormat: @"%@", _msgId];
  [ms appendString: @",recipient:"];
  [ms appendFormat: @"\"%@\"", _recipient];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTDeviceService_msgDirect_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) RTDirectMsg * msg;
@property (assign, nonatomic) BOOL msgIsSet;
- (void) unsetMsg;


- (instancetype) initWithMsg: (RTDirectMsg *) msg;

@end

@implementation RTDeviceService_msgDirect_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithMsg: (RTDirectMsg *) msg
{
  self = [super init];
  if (self)  {
    _msg = msg;
    _msgIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"msg"])
    {
      _msg = [decoder decodeObjectForKey: @"msg"];
      _msgIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_msgIsSet)
  {
    [encoder encodeObject: _msg forKey: @"msg"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _msgIsSet ? 2654435761 : 0;
  if (_msgIsSet)
  {
    hash = (hash * 31) ^ [_msg hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RTDeviceService_msgDirect_args class]]) {
    return NO;
  }
  RTDeviceService_msgDirect_args *other = (RTDeviceService_msgDirect_args *)anObject;
  if ((_msgIsSet != other->_msgIsSet) ||
      (_msgIsSet && ((_msg || other->_msg) && ![_msg isEqual:other->_msg]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  RTDeviceService_msgDirect_args * val = [RTDeviceService_msgDirect_args new];
  val.msg = [self.msg copy];
  return val;
}

- (void) setMsg: (RTDirectMsg *) msg {
  _msg = msg;
  _msgIsSet = YES;
}

- (void) unsetMsg {
  _msg = nil;
  _msgIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          RTDirectMsg *fieldValue = [[RTDirectMsg alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.msg = fieldValue;
        } else { 
          NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, (int)fieldID, (int)fieldType);
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  if (![self validate: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"DeviceService_msgDirect_args" error: __thriftError]) return NO;
  if (_msgIsSet) {
    if (_msg != nil) {
      if (![outProtocol writeFieldBeginWithName: @"msg" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_msg write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RTDeviceService_msgDirect_args("];
  [ms appendString: @"msg:"];
  [ms appendFormat: @"%@", _msg];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RTDeviceServiceClient () {

  id<TProtocol> inProtocol;
  id<TProtocol> outProtocol;

}

@end

@implementation RTDeviceServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  if (self)   {
    inProtocol = anInProtocol;
    outProtocol = anOutProtocol;
  }
  return self;
}

- (BOOL) send_userStatus: (RTAlias) sender recipient: (RTAlias) recipient status: (RTUserStatus) status error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"userStatus" type: TMessageTypeONEWAY sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"DeviceService_userStatus_args" error: __thriftError]) return NO;
  if (sender != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"sender" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeString: sender error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (recipient != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"recipient" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeString: recipient error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldBeginWithName: @"status" type: TTypeI32 fieldID: 3 error: __thriftError]) return NO;
  if (![outProtocol writeI32: status error: __thriftError]) return NO;
  if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) userStatus: (RTAlias) sender recipient: (RTAlias) recipient status: (RTUserStatus) status error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_userStatus : sender recipient: recipient status: status error: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) send_groupStatus: (RTAlias) sender chatId: (RTId *) chatId status: (RTUserStatus) status error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"groupStatus" type: TMessageTypeONEWAY sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"DeviceService_groupStatus_args" error: __thriftError]) return NO;
  if (sender != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"sender" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeString: sender error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (chatId != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"chatId" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
    if (![chatId write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldBeginWithName: @"status" type: TTypeI32 fieldID: 3 error: __thriftError]) return NO;
  if (![outProtocol writeI32: status error: __thriftError]) return NO;
  if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) groupStatus: (RTAlias) sender chatId: (RTId *) chatId status: (RTUserStatus) status error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_groupStatus : sender chatId: chatId status: status error: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) send_msgDelivery: (RTMsg *) msg error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"msgDelivery" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"DeviceService_msgDelivery_args" error: __thriftError]) return NO;
  if (msg != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"msg" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![msg write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_msgDelivery: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTDeviceService_msgDelivery_result * resulter = [RTDeviceService_msgDelivery_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) msgDelivery: (RTMsg *) msg error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_msgDelivery : msg error: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  if (![self recv_msgDelivery: __thriftError]) return NO;
  return YES;
}

- (BOOL) send_msgReady: (RTMsgHdr *) msgHdr error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"msgReady" type: TMessageTypeONEWAY sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"DeviceService_msgReady_args" error: __thriftError]) return NO;
  if (msgHdr != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"msgHdr" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![msgHdr write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) msgReady: (RTMsgHdr *) msgHdr error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_msgReady : msgHdr error: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) send_msgDelivered: (RTId *) msgId recipient: (RTAlias) recipient error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"msgDelivered" type: TMessageTypeONEWAY sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"DeviceService_msgDelivered_args" error: __thriftError]) return NO;
  if (msgId != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"msgId" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![msgId write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (recipient != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"recipient" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeString: recipient error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) msgDelivered: (RTId *) msgId recipient: (RTAlias) recipient error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_msgDelivered : msgId recipient: recipient error: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) send_msgDirect: (RTDirectMsg *) msg error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"msgDirect" type: TMessageTypeONEWAY sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"DeviceService_msgDirect_args" error: __thriftError]) return NO;
  if (msg != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"msg" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![msg write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) msgDirect: (RTDirectMsg *) msg error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_msgDirect : msg error: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

@end

@interface RTDeviceServiceProcessor () {
  id <RTDeviceService> service;
  NSDictionary * methodMap;
}
@end

@implementation RTDeviceServiceProcessor

- (id) initWithDeviceService: (id <RTDeviceService>) aService
{
  self = [super init];
  if (self)   {
    service = aService;
    methodMap = [NSMutableDictionary dictionary];
    {
      SEL s = @selector(process_userStatus_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"userStatus"];
    }
    {
      SEL s = @selector(process_groupStatus_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"groupStatus"];
    }
    {
      SEL s = @selector(process_msgDelivery_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"msgDelivery"];
    }
    {
      SEL s = @selector(process_msgReady_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"msgReady"];
    }
    {
      SEL s = @selector(process_msgDelivered_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"msgDelivered"];
    }
    {
      SEL s = @selector(process_msgDirect_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"msgDirect"];
    }
  }
  return self;
}

- (id<RTDeviceService>) service
{
  return service;
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
                          error: (NSError *__autoreleasing *)__thriftError
{
  NSString * messageName;
  SInt32 messageType;
  SInt32 seqID;
  if (![inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID
                                      error: __thriftError]) return NO;
  NSInvocation * invocation = [methodMap valueForKey: messageName];
  if (invocation == nil) {
    if (![TProtocolUtil skipType: TTypeSTRUCT onProtocol: inProtocol error: __thriftError]) return NO;
    if (![inProtocol readMessageEnd: __thriftError]) return NO;
    NSError * x = [NSError errorWithDomain: TApplicationErrorDomain
                                      code: TApplicationErrorUnknownMethod
                                  userInfo: @{TApplicationErrorMethodKey: messageName}];
    if (![outProtocol writeMessageBeginWithName: messageName
                                           type: TMessageTypeEXCEPTION
                                     sequenceID: seqID
                                          error: __thriftError]) return NO;
    if (![x write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeMessageEnd: __thriftError]) return NO;
    if (![[outProtocol transport] flush: __thriftError]) return NO;
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setArgument: &__thriftError atIndex: 5];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (BOOL) process_userStatus_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  RTDeviceService_userStatus_args * args = [RTDeviceService_userStatus_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  BOOL serviceResult = [service userStatus: [args sender] recipient: [args recipient] status: [args status] error: __thriftError];
  if (!serviceResult) return NO;
  return YES;
}

- (BOOL) process_groupStatus_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  RTDeviceService_groupStatus_args * args = [RTDeviceService_groupStatus_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  BOOL serviceResult = [service groupStatus: [args sender] chatId: [args chatId] status: [args status] error: __thriftError];
  if (!serviceResult) return NO;
  return YES;
}

- (BOOL) process_msgDelivery_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  RTDeviceService_msgDelivery_args * args = [RTDeviceService_msgDelivery_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  RTDeviceService_msgDelivery_result * result = [RTDeviceService_msgDelivery_result new];
  BOOL serviceResult = [service msgDelivery: [args msg] error: __thriftError];
  if (!serviceResult) return NO;
  if (![outProtocol writeMessageBeginWithName: @"msgDelivery"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}

- (BOOL) process_msgReady_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  RTDeviceService_msgReady_args * args = [RTDeviceService_msgReady_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  BOOL serviceResult = [service msgReady: [args msgHdr] error: __thriftError];
  if (!serviceResult) return NO;
  return YES;
}

- (BOOL) process_msgDelivered_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  RTDeviceService_msgDelivered_args * args = [RTDeviceService_msgDelivered_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  BOOL serviceResult = [service msgDelivered: [args msgId] recipient: [args recipient] error: __thriftError];
  if (!serviceResult) return NO;
  return YES;
}

- (BOOL) process_msgDirect_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  RTDeviceService_msgDirect_args * args = [RTDeviceService_msgDirect_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  BOOL serviceResult = [service msgDirect: [args msg] error: __thriftError];
  if (!serviceResult) return NO;
  return YES;
}
@end

@interface RTDeviceServiceClientAsync () {

  id<TProtocolFactory> protocolFactory;
  id<TAsyncTransportFactory> transportFactory;

}

@end

@implementation RTDeviceServiceClientAsync

- (id) initWithProtocolFactory: (id <TProtocolFactory>) aProtocolFactory transportFactory: (id <TAsyncTransportFactory>) aTransportFactory;
{
  self = [super init];
  if (self) {
    protocolFactory = aProtocolFactory;
    transportFactory = aTransportFactory;
  }
  return self;
}

- (BOOL) send_userStatus: (RTAlias) sender recipient: (RTAlias) recipient status: (RTUserStatus) status protocol: (id<TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"userStatus" type: TMessageTypeONEWAY sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"DeviceService_userStatus_args" error: __thriftError]) return NO;
  if (sender != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"sender" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeString: sender error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (recipient != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"recipient" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeString: recipient error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldBeginWithName: @"status" type: TTypeI32 fieldID: 3 error: __thriftError]) return NO;
  if (![outProtocol writeI32: status error: __thriftError]) return NO;
  if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (void) userStatus: (RTAlias) sender recipient: (RTAlias) recipient status: (RTUserStatus) status response: (void (^)()) responseBlock failure : (TAsyncFailureBlock) failureBlock
{
  NSError *thriftError;
  id<TAsyncTransport> transport = [transportFactory newTransport];
  id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

  if (![self send_userStatus : sender recipient: recipient status: status protocol: protocol error: &thriftError])   {
    failureBlock(thriftError);
    return;
  }
  [transport flushWithCompletion:^{
    responseBlock();
  } failure:failureBlock];
}

- (AnyPromise *) userStatus: (RTAlias) sender recipient: (RTAlias) recipient status: (RTUserStatus) status
{
  return [AnyPromise promiseWithResolverBlock:^(PMKResolver resolver) {
    NSError *thriftError;
    id<TAsyncTransport> transport = [transportFactory newTransport];
    id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

    if (![self send_userStatus : sender recipient: recipient status: status protocol: protocol error: &thriftError])     {
      resolver(thriftError);
      return;
    }
    [transport flushWithCompletion:^{
      resolver(@YES);
    } failure:^(NSError *error) {
      resolver(error);
    }];
  }];
}

- (BOOL) send_groupStatus: (RTAlias) sender chatId: (RTId *) chatId status: (RTUserStatus) status protocol: (id<TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"groupStatus" type: TMessageTypeONEWAY sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"DeviceService_groupStatus_args" error: __thriftError]) return NO;
  if (sender != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"sender" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeString: sender error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (chatId != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"chatId" type: TTypeSTRUCT fieldID: 2 error: __thriftError]) return NO;
    if (![chatId write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldBeginWithName: @"status" type: TTypeI32 fieldID: 3 error: __thriftError]) return NO;
  if (![outProtocol writeI32: status error: __thriftError]) return NO;
  if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (void) groupStatus: (RTAlias) sender chatId: (RTId *) chatId status: (RTUserStatus) status response: (void (^)()) responseBlock failure : (TAsyncFailureBlock) failureBlock
{
  NSError *thriftError;
  id<TAsyncTransport> transport = [transportFactory newTransport];
  id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

  if (![self send_groupStatus : sender chatId: chatId status: status protocol: protocol error: &thriftError])   {
    failureBlock(thriftError);
    return;
  }
  [transport flushWithCompletion:^{
    responseBlock();
  } failure:failureBlock];
}

- (AnyPromise *) groupStatus: (RTAlias) sender chatId: (RTId *) chatId status: (RTUserStatus) status
{
  return [AnyPromise promiseWithResolverBlock:^(PMKResolver resolver) {
    NSError *thriftError;
    id<TAsyncTransport> transport = [transportFactory newTransport];
    id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

    if (![self send_groupStatus : sender chatId: chatId status: status protocol: protocol error: &thriftError])     {
      resolver(thriftError);
      return;
    }
    [transport flushWithCompletion:^{
      resolver(@YES);
    } failure:^(NSError *error) {
      resolver(error);
    }];
  }];
}

- (BOOL) send_msgDelivery: (RTMsg *) msg protocol: (id<TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"msgDelivery" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"DeviceService_msgDelivery_args" error: __thriftError]) return NO;
  if (msg != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"msg" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![msg write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_msgDelivery: (id<TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  RTDeviceService_msgDelivery_result * resulter = [RTDeviceService_msgDelivery_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  return YES;
}

- (void) msgDelivery: (RTMsg *) msg response: (void (^)()) responseBlock failure : (TAsyncFailureBlock) failureBlock
{
  NSError *thriftError;
  id<TAsyncTransport> transport = [transportFactory newTransport];
  id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

  if (![self send_msgDelivery : msg protocol: protocol error: &thriftError])   {
    failureBlock(thriftError);
    return;
  }
  [transport flushWithCompletion:^{
    NSError *thriftError;
    if (![self recv_msgDelivery: protocol error: &thriftError])     {
      failureBlock(thriftError);
      return;
    }
    responseBlock();
  } failure:failureBlock];
}

- (AnyPromise *) msgDelivery: (RTMsg *) msg
{
  return [AnyPromise promiseWithResolverBlock:^(PMKResolver resolver) {
    NSError *thriftError;
    id<TAsyncTransport> transport = [transportFactory newTransport];
    id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

    if (![self send_msgDelivery : msg protocol: protocol error: &thriftError])     {
      resolver(thriftError);
      return;
    }
    [transport flushWithCompletion:^{
      NSError *thriftError;
      if (![self recv_msgDelivery: protocol error: &thriftError])       {
        resolver(thriftError);
        return;
      }
      resolver(@YES);
    } failure:^(NSError *error) {
      resolver(error);
    }];
  }];
}

- (BOOL) send_msgReady: (RTMsgHdr *) msgHdr protocol: (id<TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"msgReady" type: TMessageTypeONEWAY sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"DeviceService_msgReady_args" error: __thriftError]) return NO;
  if (msgHdr != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"msgHdr" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![msgHdr write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (void) msgReady: (RTMsgHdr *) msgHdr response: (void (^)()) responseBlock failure : (TAsyncFailureBlock) failureBlock
{
  NSError *thriftError;
  id<TAsyncTransport> transport = [transportFactory newTransport];
  id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

  if (![self send_msgReady : msgHdr protocol: protocol error: &thriftError])   {
    failureBlock(thriftError);
    return;
  }
  [transport flushWithCompletion:^{
    responseBlock();
  } failure:failureBlock];
}

- (AnyPromise *) msgReady: (RTMsgHdr *) msgHdr
{
  return [AnyPromise promiseWithResolverBlock:^(PMKResolver resolver) {
    NSError *thriftError;
    id<TAsyncTransport> transport = [transportFactory newTransport];
    id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

    if (![self send_msgReady : msgHdr protocol: protocol error: &thriftError])     {
      resolver(thriftError);
      return;
    }
    [transport flushWithCompletion:^{
      resolver(@YES);
    } failure:^(NSError *error) {
      resolver(error);
    }];
  }];
}

- (BOOL) send_msgDelivered: (RTId *) msgId recipient: (RTAlias) recipient protocol: (id<TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"msgDelivered" type: TMessageTypeONEWAY sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"DeviceService_msgDelivered_args" error: __thriftError]) return NO;
  if (msgId != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"msgId" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![msgId write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (recipient != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"recipient" type: TTypeSTRING fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeString: recipient error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (void) msgDelivered: (RTId *) msgId recipient: (RTAlias) recipient response: (void (^)()) responseBlock failure : (TAsyncFailureBlock) failureBlock
{
  NSError *thriftError;
  id<TAsyncTransport> transport = [transportFactory newTransport];
  id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

  if (![self send_msgDelivered : msgId recipient: recipient protocol: protocol error: &thriftError])   {
    failureBlock(thriftError);
    return;
  }
  [transport flushWithCompletion:^{
    responseBlock();
  } failure:failureBlock];
}

- (AnyPromise *) msgDelivered: (RTId *) msgId recipient: (RTAlias) recipient
{
  return [AnyPromise promiseWithResolverBlock:^(PMKResolver resolver) {
    NSError *thriftError;
    id<TAsyncTransport> transport = [transportFactory newTransport];
    id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

    if (![self send_msgDelivered : msgId recipient: recipient protocol: protocol error: &thriftError])     {
      resolver(thriftError);
      return;
    }
    [transport flushWithCompletion:^{
      resolver(@YES);
    } failure:^(NSError *error) {
      resolver(error);
    }];
  }];
}

- (BOOL) send_msgDirect: (RTDirectMsg *) msg protocol: (id<TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"msgDirect" type: TMessageTypeONEWAY sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"DeviceService_msgDirect_args" error: __thriftError]) return NO;
  if (msg != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"msg" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
    if (![msg write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (void) msgDirect: (RTDirectMsg *) msg response: (void (^)()) responseBlock failure : (TAsyncFailureBlock) failureBlock
{
  NSError *thriftError;
  id<TAsyncTransport> transport = [transportFactory newTransport];
  id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

  if (![self send_msgDirect : msg protocol: protocol error: &thriftError])   {
    failureBlock(thriftError);
    return;
  }
  [transport flushWithCompletion:^{
    responseBlock();
  } failure:failureBlock];
}

- (AnyPromise *) msgDirect: (RTDirectMsg *) msg
{
  return [AnyPromise promiseWithResolverBlock:^(PMKResolver resolver) {
    NSError *thriftError;
    id<TAsyncTransport> transport = [transportFactory newTransport];
    id<TProtocol> protocol = [protocolFactory newProtocolOnTransport:transport];

    if (![self send_msgDirect : msg protocol: protocol error: &thriftError])     {
      resolver(thriftError);
      return;
    }
    [transport flushWithCompletion:^{
      resolver(@YES);
    } failure:^(NSError *error) {
      resolver(error);
    }];
  }];
}

@end

